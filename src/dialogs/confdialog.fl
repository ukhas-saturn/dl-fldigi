# data file for the Fltk User Interface Designer (fluid)
version 1.03
i18n_type 1
i18n_include "gettext.h"
i18n_function _
header_name {.h}
code_name {.cxx}
decl {\#include <config.h>} {private local
}

decl {\#include <FL/Fl_Tooltip.H>} {private local
}

decl {\#include <FL/Fl_Box.H>} {private local
}

decl {\#include <FL/filename.H>} {private local
}

decl {\#include <FL/Fl_File_Chooser.H>} {private local
}

decl {\#include <FL/fl_show_colormap.H>} {private local
}

decl {\#include "main.h"} {private local
}

decl {\#include "fl_digi.h"} {private local
}

decl {\#include "dl_fldigi/dl_fldigi.h"} {private local
}

decl {\#include "dl_fldigi/location.h"} {private local
}

decl {\#include "dl_fldigi/flights.h"} {private local
}

decl {\#include "dl_fldigi/hbtint.h"} {private local
}

decl {\#include "data_io.h"} {private local
}

decl {\#include "Viewer.h"} {private global
}

decl {\#include "font_browser.h"} {public global
}

decl {\#include "soundconf.h"} {private local
}

decl {\#include "globals.h"} {public local
}

decl {\#include "modem.h"} {public local
}

decl {\#include "configuration.h"} {public local
}

decl {\#include "combo.h"} {public local
}

decl {\#include "waterfall.h"} {private local
}

decl {\#include "rigxml.h"} {private local
}

decl {\#include "lookupcall.h"} {private local
}

decl {\#include "icons.h"} {private local
}

decl {\#include "Viewer.h"} {private local
}

decl {\#include "pskrep.h"} {private global
}

decl {\#include "flinput2.h"} {public local
}

decl {\#include "flslider2.h"} {public local
}

decl {\#include "flmisc.h"} {public local
}

decl {\#include "logsupport.h"} {private local
}

decl {\#include "notify.h"} {private local
}

decl {\#include "debug.h"} {private local
}

decl {\#include "status.h"} {private local
}

decl {\#include "rx_extract.h"} {private local
}

decl {\#include "kmlserver.h"} {private local
}

decl {\#include "macroedit.h"} {private local
}

decl {\#include "fileselect.h"} {private local
}

decl {\#include "psm/psm.h"} {private local
}

decl {\#include "dx_cluster.h"} {private local
}

decl {extern void WefaxDestDirSet(Fl_File_Chooser *w, void *userdata);} {private local
}

decl {\#include "dx_dialog.h"} {private local
}

decl {\#if USE_HAMLIB
  \#include "hamlib.h"
\#endif} {private local
}

decl {\#include "fsq.h"} {private local
}

decl {Fl_Double_Window *dlgConfig;} {public local
}

decl {Mode_Browser* mode_browser;} {public local
}

Function {choose_color(Fl_Color & c)} {open private return_type void
} {
  code {unsigned char r, g, b;
Fl::get_color(c, r, g, b);
if (fl_color_chooser("Font color", r, g, b))
    c = fl_rgb_color(r, g, b);} {}
}

Function {cbRxFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    RxText->textfont(font);
    RxText->textsize(size);
    RxText->textcolor(color);
    RxText->redraw();

    progdefaults.RxFontnbr = font;
    progdefaults.RxFontsize = size;
    progdefaults.RxFontcolor = color;

    ReceiveText->setFont(font);
    ReceiveText->setFontSize(size);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    fsq_rx_text->setFont(font);
    fsq_rx_text->setFontSize(size);
    fsq_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    ifkp_rx_text->setFont(font);
    ifkp_rx_text->setFontSize(size);
    ifkp_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbTxFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    TxText->textfont(font);
    TxText->textsize(size);
    TxText->textcolor(color);
    TxText->redraw();

    progdefaults.TxFontnbr = font;
    progdefaults.TxFontsize = size;
    progdefaults.TxFontcolor = color;

    TransmitText->setFont(font);
    TransmitText->setFontSize(size);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);

    fsq_tx_text->setFont(font);
    fsq_tx_text->setFontSize(size);
    fsq_tx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    ifkp_rx_text->setFont(font);
    ifkp_rx_text->setFontSize(size);
    ifkp_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

     font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbDXfont_browser(Fl_Widget*, void*)} {open private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
int size = font_browser->fontSize();
Fl_Color color = font_browser->fontColor();

progdefaults.DXfontcolor = color;
progdefaults.DXfontnbr = font;
progdefaults.DXfontsize = size;

brws_tcpip_stream->setFont(font);
brws_tcpip_stream->setFontSize(size);
brws_tcpip_stream->setFontColor(color, FTextBase::RECV);
brws_tcpip_stream->redraw();

ed_telnet_cmds->setFont(font);
ed_telnet_cmds->setFontSize(size);
ed_telnet_cmds->setFontColor(color);
ed_telnet_cmds->redraw();

StreamText->textcolor(color);
StreamText->redraw();

brws_dxc_help->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));    
brws_dxc_help->setFont(font);
brws_dxc_help->setFontSize(size);
brws_dxc_help->setFontColor(color, FTextBase::RECV);
brws_dxc_help->redraw();
       
font_browser->hide();

dxcluster_hosts_load();

progdefaults.changed = true;} {}
}

Function {cbDXC_FontBrowser(Fl_Widget*, void*)} {open private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.DXC_textfont = font;
    progdefaults.DXC_textsize = size;
    progdefaults.DXC_textcolor = color;

    DXC_display->textsize(size);
    DXC_display->textcolor(color);
    DXC_display->textfont(font);
    DXC_display->redraw();

    font_browser->hide();

    dxc_lines_redraw();

    progdefaults.changed = true;} {}
}

Function {cbMacroEditFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();

    MacroText->textfont(font);
    MacroText->textsize(size);
    MacroText->redraw();

    progdefaults.MacroEditFontnbr = font;
    progdefaults.MacroEditFontsize = size;

    update_macroedit_font();

    MacroText->textfont(font);
    MacroText->textsize(size);

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbWaterfallFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {Fl_Font fnt = font_browser->fontNumber();
    int size = font_browser->fontSize();

    progdefaults.WaterfallFontnbr = fnt;
    progdefaults.WaterfallFontsize = size;
    progdefaults.changed = true;

    font_browser->hide();} {}
}

Function {cbMacroBtnFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {progdefaults.MacroBtnFontnbr = font_browser->fontNumber();
    progdefaults.MacroBtnFontsize = font_browser->fontSize();;
    progdefaults.MacroBtnFontcolor = font_browser->fontColor();

    font_browser->hide();

    btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup1->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup1->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup1->redraw_label();

    btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup2->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup2->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup2->redraw_label();

    btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup3->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup3->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup3->redraw_label();

    progdefaults.changed = true;
    colorize_macros();} {}
}

Function {cbViewerFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {progdefaults.ViewerFontnbr = font_browser->fontNumber();
    progdefaults.ViewerFontsize = font_browser->fontSize();
    initViewer();
    progdefaults.changed = true;

    font_browser->hide();} {}
}

Function {cbFreqControlFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {Fl_Font fnt = font_browser->fontNumber();
    progdefaults.FreqControlFontnbr = fnt;
    progdefaults.changed = true;

    FDdisplay->labelfont(progdefaults.FreqControlFontnbr);
    FDdisplay->redraw();
    qsoFreqDisp1->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp2->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp3->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp1->redraw();
    qsoFreqDisp2->redraw();
    qsoFreqDisp3->redraw();

    font_browser->hide();} {}
}

Function {cbLOGGINGFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.LOGGINGtextfont = font;
    progdefaults.LOGGINGtextsize = size;
    progdefaults.LOGGINGtextcolor = color;

    LOGGINGdisplay->textsize(size);
    LOGGINGdisplay->textcolor(color);
    LOGGINGdisplay->textfont(font);
    LOGGINGdisplay->redraw();

    LOGGING_colors_font();

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbLOGBOOKFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.LOGBOOKtextfont = font;
    progdefaults.LOGBOOKtextsize = size;
    progdefaults.LOGBOOKtextcolor = color;

    LOGBOOKdisplay->textsize(size);
    LOGBOOKdisplay->textcolor(color);
    LOGBOOKdisplay->textfont(font);
    LOGBOOKdisplay->redraw();

    LOGBOOK_colors_font();

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {set_qrzxml_buttons(Fl_Button* b)} {open return_type void
} {
  code {Fl_Button* qrzbxml[] = { btnQRZXMLnotavailable, btnQRZcdrom, btnQRZsub,
                         btnHamcall,
                         btnCALLOOK, btnHamQTH};

for (size_t i = 0; i < sizeof(qrzbxml)/sizeof(*qrzbxml); i++)
	qrzbxml[i]->value(b == qrzbxml[i]);} {}
}

Function {set_qrzweb_buttons(Fl_Button* b)} {open return_type void
} {
  code {Fl_Button* qrzbweb[] = { btnQRZWEBnotavailable, btnQRZonline,
                              btnHAMCALLonline,
                              btnHamQTHonline, btnCallookOnline };

for (size_t i = 0; i < sizeof(qrzbweb)/sizeof(*qrzbweb); i++)
	qrzbweb[i]->value(b == qrzbweb[i]);} {}
}

Function {ConfigureDialog()} {open
} {
  code {font_browser = new Font_Browser;} {}
  code {static const char szShifts[]  = "23|85|160|170|182|200|240|350|425|600|850|Custom";
static const char szBauds[]  = "45|45.45|50|56|75|100|110|150|200|300|600|1200";
static const char szSelBits[] = "5 (baudot)|7 (ascii)|8 (ascii)";
static const char szParity[]  = "none|even|odd|zero|one";
static const char szStopBits[] = "1|1.5|2";
static const char szOliviaTones[] = "2|4|8|16|32|64|128|256";
static const char szOliviaBandwidth[] = "125|250|500|1000|2000";
static const char szContestiaTones[] = "2|4|8|16|32|64|128|256";
static const char szContestiaBandwidth[] = "125|250|500|1000|2000";
static const char szBaudRates[] = "300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800";
static const char szProsigns[] = "~|%|&|+|=|{|}|<|>|[|]| ";} {}
  code {static const int flight_browser_columns[] = { 180, 160, 190 };} {}
  code {static const int payload_browser_columns[] = { 180, 350 };} {}
  Fl_Window {} {
    label {Fldigi configuration} open
    xywh {438 155 600 425} type Double color 45 selection_color 51 labelsize 18 align 80 non_modal visible
  } {
    Fl_Tabs tabsConfigure {open
      xywh {0 0 675 390} color 50 selection_color 50
    } {
      Fl_Group tabOperator {
        label Operator
        callback {progdefaults.changed = true;} open selected
        xywh {0 25 600 365} when 1
      } {
        Fl_Group {} {
          label {Station / Operator} open
          xywh {5 35 590 320} box ENGRAVED_FRAME align 21
        } {
          Fl_Input inpMyCallsign {
            label {Upload Callsign:}
            callback {const char *triggers = " !\#$%&'()*+,-.;<=>?@[\\\\]^_{|}~";
std::string mycall = o->value();

for (size_t k = 0; k < mycall.length(); k++) {
  for (size_t n = 0; n < strlen(triggers); n++) {
    if (mycall[k] == triggers[n]) {
      if ( fl_choice2("Replace FSQ trigger character with slash /", _("no"), _("yes"), NULL ) )
        mycall[k] = '/';
    }
  }
}

if (progdefaults.THORsecText.empty()) {
progdefaults.THORsecText = mycall;
progdefaults.THORsecText.append(" ");
txtTHORSecondary->value(progdefaults.THORsecText.c_str());
}

if (progdefaults.secText.empty()) {
progdefaults.secText = mycall;
progdefaults.secText.append(" ");
txtSecondary->value(progdefaults.secText.c_str());
}

progdefaults.myCall = mycall;
inpMyCallsign->value(progdefaults.myCall.c_str());
inpMyCallsign->redraw();

update_main_title();
notify_change_callsign();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_INFO);
btnApplyConfig->activate();}
            tooltip {Callsign for uploading to UKHAS} xywh {195 64 110 24} when 1
            code0 {inpMyCallsign->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.myCall.c_str());}
            class Fl_Input2
          }
          Fl_Input inpOperCallsign {
            label {Operator Callsign:}
            callback {progdefaults.operCall = o->value();
progdefaults.changed = true;}
            tooltip {Operator callsign (if different than station callsign)} xywh {195 308 110 24}
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.operCall.c_str());}
            class Fl_Input2
          }
          Fl_Input inpMyName {
            label {Operator Name:}
            callback {progdefaults.myName = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_INFO);
btnApplyConfig->activate();}
            tooltip {Operators name} xywh {195 125 140 24}
            code0 {inpMyName->labelsize(FL_NORMAL_SIZE);}
            class Fl_Input2
          }
          Fl_Input MyRadio {
            label {Radio:}
            callback {progdefaults.myRadio = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_INFO);
btnApplyConfig->activate();}
            tooltip {Short description of radio} xywh {195 95 320 24}
            code0 {o->value(progdefaults.myRadio.c_str());}
            class Fl_Input2
          }
          Fl_Input inpMyAntenna {
            label {Antenna:}
            callback {progdefaults.myAntenna = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_INFO);
btnApplyConfig->activate();} 
            tooltip {Short description of antenna} xywh {195 155 320 24}
            code0 {inpMyAntenna->labelsize(FL_NORMAL_SIZE);}
            class Fl_Input2
          }
          Fl_Input inpMyQth {
            label {Station QTH:}
            callback {progdefaults.myQth = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_INFO);
btnApplyConfig->activate();}
            tooltip {Operators QTH} xywh {195 186 320 24}
            code0 {inpMyQth->labelsize(FL_NORMAL_SIZE);}
            class Fl_Input2
          }
          Fl_Input inpMyLocator {
            label {Station Locator:}
            callback {progdefaults.myLocator = o->value();
progdefaults.changed = true;}
            tooltip {Maidenhead locator as in EM64qv} xywh {195 216 85 24}
            code0 {inpMyLocator->labelsize(FL_NORMAL_SIZE);}
            class Fl_Input2
          }
          Fl_Group listbox_states {
            label State
            callback {listbox_counties->clear();
listbox_counties->add(states.counties(o->value()).c_str());
listbox_counties->index(0);
inp_QP_short_county->value(states.cnty_short(listbox_states->value(),listbox_counties->value()).c_str());
inp_QP_state_short->value(states.state_short(o->value()).c_str());
progdefaults.SQSOstate = o->index();
progdefaults.changed = true;} open
            xywh {195 247 160 24} box DOWN_BOX color 7 align 4
            code0 {\#include "counties.h"}
            code1 {o->labelsize(FL_NORMAL_SIZE);}
            code2 {o->add(states.names().c_str());}
            code3 {o->index(progdefaults.SQSOstate);}
            class Fl_ListBox
          } {}
          Fl_Input inp_QP_state_short {
            tooltip {Abbreviation for state} xywh {362 247 43 24} align 5
            code0 {o->value(states.state_short(listbox_states->value()).c_str());}
            class Fl_Input2
          }
          Fl_Group listbox_counties {
            label County
            callback {inp_QP_short_county->value(states.cnty_short(listbox_states->value(),o->value()).c_str());
progdefaults.SQSOcounty = o->index();
progdefaults.changed = true;} open
            xywh {195 278 284 24} box DOWN_BOX color 7 align 4
            code0 {o->clear(); o->add(states.counties(listbox_states->value()).c_str());}
            code1 {o->index(progdefaults.SQSOcounty);}
            code2 {o->labelsize(FL_NORMAL_SIZE);}
            class Fl_ListBox
          } {}
          Fl_Input inp_QP_short_county {
            tooltip {Abbreviation for county} xywh {487 278 60 24} align 5
            code0 {inp_QP_short_county->value(states.cnty_short(listbox_states->value(),listbox_counties->value()).c_str());}
            class Fl_Input2
          }
        }
      }
      Fl_Group tabUI {
        label UI open
        xywh {0 25 604 365} hide
      } {
        Fl_Tabs tabsUI {open
          xywh {0 25 604 365} selection_color 50
        } {
          Fl_Group tabBrowser {
            label Browser open
            xywh {0 50 600 340}
          } {
            Fl_Group {} {open
              xywh {30 65 540 300} box ENGRAVED_FRAME
            } {
              Fl_Spinner cntChannels {
                label {Channels, first channel starts at waterfall lower limit}
                callback {progdefaults.VIEWERchannels = (int)(o->value());
initViewer();}
                tooltip {Change \# of psk viewer channels} xywh {46 75 50 24} align 8 maximum 30 value 30
                code0 {o->minimum(5); o->maximum(30); o->step(1);}
                code1 {o->value(progdefaults.VIEWERchannels);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
              Fl_Spinner cntTimeout {
                label {Inactivity timeout}
                callback {progdefaults.VIEWERtimeout = (int)(o->value());
progdefaults.changed = true;}
                tooltip {Clear channel text after
\# seconds of inactivity} xywh {46 111 50 24} align 8 value 10
                code0 {o->minimum(1); o->maximum(180); o->step(1);}
                code1 {o->value(progdefaults.VIEWERtimeout);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
              Fl_Group listboxViewerLabel {
                label {Channel label}
                callback {progdefaults.VIEWERlabeltype = o->index();
initViewer();
progdefaults.changed = true;} open
                tooltip {Appearance of label on each channel} xywh {46 151 150 24} box DOWN_BOX color 7 align 8
                code0 {listboxViewerLabel->add(_("None")); listboxViewerLabel->add(_("Audio frequency"));}
                code1 {listboxViewerLabel->add(_("Radio frequency")); listboxViewerLabel->add(_("Channel number"));}
                code3 {listboxViewerLabel->index(progdefaults.VIEWERlabeltype);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Button btnViewerFont {
                label {Font...}
                callback {font_browser->fontNumber(progdefaults.ViewerFontnbr);
font_browser->fontSize(progdefaults.ViewerFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbViewerFontBrowser);
font_browser->show();}
                tooltip {select browser font} xywh {331 151 70 24}
              }
              Fl_Check_Button btnFixedIntervals {
                label {Fixed Intervals}
                callback {progdefaults.VIEWERfixed = o->value();
progdefaults.changed = true;
initViewer();}
                tooltip {Force channel spacing to even 100 Hz increments} xywh {236 137 165 20} down_box DOWN_BOX value 1 hide
                code0 {o->value(progdefaults.VIEWERfixed);}
              }
              Fl_Check_Button btnMarquee {
                label {Continuous scrolling}
                callback {progdefaults.VIEWERmarquee = o->value();
progdefaults.changed = true;
initViewer();}
                tooltip {ON - Marquee style
OFF - Clear & restart} xywh {46 189 165 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.VIEWERmarquee);}
              }
              Fl_Check_Button btnAscend {
                label {Lowest freq on bottom of viewer}
                callback {progdefaults.VIEWERascend = o->value();
progdefaults.changed = true;
initViewer();}
                tooltip {Change positions of low to high channels} xywh {46 213 253 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.VIEWERascend);}
              }
              Fl_Check_Button btnBrowserHistory {
                label {Play back history when active channel selected}
                callback {progdefaults.VIEWERhistory = o->value();
progdefaults.changed = true;}
                tooltip {Audio stream history decoded on selected signal} xywh {46 238 356 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.VIEWERhistory);}
              }
              Fl_Group {} {
                label {Detection Level} open
                xywh {40 287 144 60} box ENGRAVED_FRAME
              } {
                Fl_Button bwsrSliderColor {
                  label Backgnd
                  callback {uchar r, g, b;
    r = progdefaults.bwsrSliderColor.R;
    g = progdefaults.bwsrSliderColor.G;
    b = progdefaults.bwsrSliderColor.B;

    if (fl_color_chooser("Slider Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSliderColor.R = r;
    progdefaults.bwsrSliderColor.G = g;
    progdefaults.bwsrSliderColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();

    progdefaults.changed = true;}
                  tooltip {Background color of signal viewer squelch control} xywh {47 310 60 24} align 1
                  code0 {bwsrSliderColor->color(fl_rgb_color(progdefaults.bwsrSliderColor.R, progdefaults.bwsrSliderColor.G,progdefaults.bwsrSliderColor.B));}
                }
                Fl_Button bwsrSldrSelColor {
                  label Button
                  callback {uchar r, g, b;
    r = progdefaults.bwsrSldrSelColor.R;
    g = progdefaults.bwsrSldrSelColor.G;
    b = progdefaults.bwsrSldrSelColor.B;

    if (fl_color_chooser("Button Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSldrSelColor.R = r;
    progdefaults.bwsrSldrSelColor.G = g;
    progdefaults.bwsrSldrSelColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->selection_color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->selection_color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();

    progdefaults.changed = true;}
                  tooltip {Slider hilite color of signal viewer squelch control} xywh {115 310 60 24} align 1
                  code0 {bwsrSldrSelColor->color(fl_rgb_color(progdefaults.bwsrSldrSelColor.R, progdefaults.bwsrSldrSelColor.G,progdefaults.bwsrSliderColor.B));}
                }
              }
              Fl_Group {} {
                label {Browser Line Colors} open
                xywh {192 287 326 60} box ENGRAVED_FRAME
              } {
                Fl_Button bwsrHiLite_1_color {
                  label {HiLite 1}
                  callback {progdefaults.bwsrHiLight1 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight1);
bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);
viewer_redraw();
progdefaults.changed = true;}
                  tooltip {PSK/RTTY Viewer HiLite Color 1} xywh {198 309 60 24} align 1
                  code0 {bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);}
                  code1 {\#include "Viewer.h"}
                }
                Fl_Button bwsrHiLite_2_color {
                  label {HiLite 2}
                  callback {progdefaults.bwsrHiLight2 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight2);
bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);
viewer_redraw();
progdefaults.changed = true;}
                  tooltip {PSK/RTTY Viewer HiLite Color 2} xywh {261 309 60 24} align 1
                  code0 {bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);}
                }
                Fl_Button bwsrHiLite_even_lines {
                  label Even
                  callback {progdefaults.bwsrBackgnd2 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd2);
bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);
viewer_redraw();
progdefaults.changed = true;;}
                  tooltip {Even lines} xywh {324 309 60 24} align 1
                  code0 {bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);}
                }
                Fl_Button bwsrHiLite_odd_lines {
                  label Odd
                  callback {progdefaults.bwsrBackgnd1 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd1);
bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);
viewer_redraw();
progdefaults.changed = true;}
                  tooltip {Odd lines} xywh {387 309 60 24} align 1
                  code0 {bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);}
                }
                Fl_Button bwsrHiLite_select {
                  label Select
                  callback {progdefaults.bwsrSelect = fl_show_colormap((Fl_Color)progdefaults.bwsrSelect);
bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);
viewer_redraw();
progdefaults.changed = true;}
                  tooltip {Select line} xywh {451 309 60 24} align 1
                  code0 {bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);}
                }
              }
            }
          }
          Fl_Group tabUserInterface {
            label General open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {5 59 590 76} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnShowTooltips {
                label {Show tooltips}
                callback {progdefaults.tooltips = o->value();
Fl_Tooltip::enable(progdefaults.tooltips);
progdefaults.changed = true;}
                tooltip {Enable / disable tooltips} xywh {75 72 120 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.tooltips);}
              }
              Fl_Check_Button chkMenuIcons {
                label {Show menu icons}
                callback {progdefaults.menuicons = o->value();
icons::toggle_icon_labels();
progdefaults.changed = true;}
                tooltip {Enable / disable icons on menus} xywh {219 72 150 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.menuicons);}
              }
              Fl_Group listboxScheme {
                label {UI scheme}
                callback {progdefaults.ui_scheme = o->value();
    Fl::scheme(progdefaults.ui_scheme.c_str());

    progdefaults.changed = true;} open
                tooltip {Change application look and feel} xywh {193 101 80 20} box DOWN_BOX color 7 align 8
                code0 {listboxScheme->add("base");}
                code1 {listboxScheme->add("gtk+");}
                code2 {listboxScheme->add("plastic");}
                code3 {listboxScheme->value(progdefaults.ui_scheme.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Button bVisibleModes {
                label {Visible modes}
                callback {mode_browser->label(o->label());
mode_browser->callback(toggle_visible_modes);
mode_browser->show_(&progdefaults.visible_modes);
progdefaults.changed = true;}
                tooltip {Select modes for menu access} xywh {58 101 110 20}
              }
              Fl_Group listbox_language {
                label {UI language}
                callback {progdefaults.ui_language = o->index();
progdefaults.changed = true;} open
                tooltip {Changes take effect on next program startup} xywh {375 101 170 20} box DOWN_BOX color 7 labelsize 12 align 5
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
            }
            Fl_Group {} {open
              xywh {5 141 590 34} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_rx_lowercase {
                label {Print CW / RTTY / THROB / CONTESTIA in lowercase}
                callback {progdefaults.rx_lowercase = o->value();
progdefaults.changed = true;}
                xywh {45 148 441 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.rx_lowercase);}
              }
            }
            Fl_Group {} {open
              xywh {5 177 294 65} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_tx_lowercase {
                label {Transmit lower case text}
                callback {progdefaults.tx_lowercase = o->value();
progdefaults.changed = true;}
                xywh {40 186 199 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.tx_lowercase);}
              }
            }
            Fl_Group {} {
              label {Exit prompts}
              xywh {5 244 590 76} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_save_config_on_exit {
                label {Prompt to save Configuration}
                callback {progdefaults.SaveConfig = o->value();
progdefaults.changed = true;}
                xywh {45 268 264 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.SaveConfig);}
              }
              Fl_Check_Button btn2_save_macros_on_exit {
                label {Prompt to save macro file}
                callback {btn_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;}
                tooltip {Write current macro set on program exit} xywh {45 290 264 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.SaveMacros);}
              }
              Fl_Check_Button btn2NagMe {
                label {Prompt to save log}
                callback {btnNagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;}
                tooltip {Bug me about saving log entries} xywh {322 268 188 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.NagMe);}
              }
              Fl_Check_Button btn2_confirm_exit {
                label {Confirm exit}
                callback {btn2_confirm_exit->value(o->value());
progdefaults.confirmExit=o->value();
progdefaults.changed = true;}
                xywh {322 290 226 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.confirmExit);}
              }
            }
            Fl_Group {} {
              label {Check for updates} open
              xywh {5 323 590 60} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_check_for_updates {
                label {Check for updates when starting program}
                callback {progdefaults.check_for_updates = o->value();
progdefaults.changed = true;}
                xywh {45 346 367 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.check_for_updates);}
              }
            }
            Fl_Group {} {open
              xywh {300 177 295 65} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_tx_show_timer {
                label {Show TX timer}
                callback {progdefaults.show_tx_timer = o->value();
progdefaults.changed = true;}
                xywh {319 186 219 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.show_tx_timer);}
              }
              Fl_Spinner val_tx_timeout {
                label {TX deadmen timeout (mins)}
                callback {progdefaults.tx_timeout=o->value();
progdefaults.changed = true;}
                xywh {320 211 45 24} align 8 minimum 0 maximum 60 value 10
                code0 {o->value(progdefaults.tx_timeout);}
              }
            }
          }
          Fl_Group tabLogServer {
            label Log
            xywh {0 50 600 340} hide
          } {
            Fl_Tabs tabsLog {open
              xywh {0 50 600 340}
            } {
              Fl_Group grp_Log_QSO {
                label QSO open
                xywh {0 75 600 315}
              } {
                Fl_Group {} {
                  label {QSO logging} open
                  xywh {45 99 515 250} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnNagMe {
                    label {Prompt to save log on exit}
                    callback {btn2NagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;}
                    tooltip {Bug me about saving log entries} xywh {77 134 236 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.NagMe);}
                  }
                  Fl_Check_Button btnClearOnSave {
                    label {Clear on save}
                    callback {progdefaults.ClearOnSave=o->value();
progdefaults.changed = true;}
                    tooltip {Clear log entries after saving or using macro <LOG>} xywh {77 163 236 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.ClearOnSave);}
                  }
                  Fl_Check_Button btnCallUpperCase {
                    label {Convert callsign to upper case}
                    callback {progdefaults.calluppercase = o->value();
progdefaults.changed = true;}
                    tooltip {Force callsign field to UPPERCASE} xywh {77 192 236 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.calluppercase);}
                  }
                  Fl_Check_Button btnAutoFillQSO {
                    label {Auto-fill Country and Azimuth}
                    callback {progdefaults.autofill_qso_fields = o->value();
progdefaults.changed = true;}
                    tooltip {Fill in Country / Azimuth using cty.dat information} xywh {77 222 236 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.autofill_qso_fields);}
                  }
                  Fl_Check_Button btnDateTimeSort {
                    label {Sort by Date/Time OFF}
                    callback {progdefaults.sort_date_time_off = o->value();
progdefaults.changed = true;
reload_browser();}
                    tooltip {Sort by date/time OFF - effects all ADIF/Cabrillo reports} xywh {330 134 190 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.sort_date_time_off);}
                  }
                  Fl_Check_Button btndate_time_force {
                    label {Date time ON == OFF}
                    callback {progdefaults.force_date_time = o->value();
progdefaults.changed = true;}
                    tooltip {Force date/time ON == date/time OFF} xywh {330 163 190 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.force_date_time);}
                  }
                  Fl_Check_Button btnRSTindefault {
                    label {Default RST in to 599/59}
                    callback {progdefaults.RSTin_default = o->value();
progdefaults.changed = true;}
                    tooltip {Clear log controls sets RST in to 599/59} xywh {330 192 213 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.RSTin_default);}
                  }
                  Fl_Check_Button btnRSTdefault {
                    label {Default RST out to 599/59}
                    callback {progdefaults.RSTdefault = o->value();
progdefaults.changed = true;}
                    tooltip {Clear log controls sets RST out to 599/59} xywh {330 222 216 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.RSTdefault);}
                  }
                  Fl_Input txt_cty_dat_pathname {
                    label {cty.dat folder}
                    callback {progdefaults.cty_dat_pathname = o->value();
progdefaults.changed = true;}
                    tooltip {Enter full path-name for cty.dat folder} xywh {197 283 346 24} when 1
                    code0 {o->value(progdefaults.cty_dat_pathname.c_str());}
                    code1 {\#include "dxcc.h"}
                    class Fl_Input2
                  }
                  Fl_Button btn_select_cty_dat {
                    label Browse
                    callback {select_cty_dat_pathname();}
                    tooltip {Locate cty.dat file} xywh {78 312 75 24}
                  }
                  Fl_Button btn_default_cty_dat {
                    label Default
                    callback {default_cty_dat_pathname();}
                    tooltip {Restore cty.dat default folder} xywh {173 312 75 24}
                  }
                  Fl_Button btn_reload_cty_dat {
                    label Reload
                    callback {reload_cty_dat();}
                    tooltip {Reload cty.dat} xywh {268 312 75 24}
                  }
                  Fl_Input inpMyPower {
                    label {Transmit Power}
                    callback {progdefaults.mytxpower = o->value();
progdefaults.changed = true;}
                    tooltip {Tx power used for logbook entries} xywh {493 312 50 24}
                    code0 {o->value(progdefaults.mytxpower.c_str());}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Check_Button btnDisplayLogbookRead {
                    label {Display logbook read datum at start}
                    callback {progdefaults.DisplayLogbookRead = o->value();
progdefaults.changed = true;}
                    tooltip {The filename is written to the RX text area} xywh {77 252 277 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.DisplayLogbookRead);}
                  }
                }
              }
              Fl_Group grpRX_Text {
                label {Rx Text} open
                xywh {0 75 600 315} hide
              } {
                Fl_Group {} {
                  label {Rx Text} open
                  xywh {2 96 596 131} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnRXClicks {
                    label {Single-click to capture}
                    callback {progdefaults.rxtext_clicks_qso_data = o->value();
progdefaults.changed = true;}
                    tooltip {Enable for single click capure of text in Rx panel} xywh {62 159 191 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rxtext_clicks_qso_data);}
                  }
                  Fl_Check_Button btnRXTooltips {
                    label {callsign tooltips in received text}
                    callback {progdefaults.rxtext_tooltips = o->value();
progdefaults.changed = true;}
                    tooltip {Popup info after a 2 second hover on a callsign} xywh {304 159 254 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rxtext_tooltips);}
                  }
                  Fl_Input inpNonword {
                    label {Word delimiters}
                    callback {progdefaults.nonwordchars = o->value();
progdefaults.changed = true;}
                    tooltip {RX text QSO data entry is bounded by the non-word characters
defined here. Tab and newline are automatically included.} xywh {204 125 279 24} textfont 4
                    code0 {o->value(progdefaults.nonwordchars.c_str());}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Check_Button btnUSunits {
                    label {US units of distance (QRB)}
                    callback {progdefaults.us_units = o->value();
progdefaults.changed = true;}
                    tooltip {Enable for single click capure of text in Rx panel} xywh {304 188 220 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.us_units);}
                  }
                  Fl_Check_Button btn_clear_fields {
                    label {Clear log fields - new CALL}
                    callback {progdefaults.clear_fields=o->value();
progdefaults.changed = true;}
                    xywh {62 188 198 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.clear_fields);}
                  }
                }
              }
              Fl_Group grpMacLogger {
                label MacLogger
                xywh {0 75 600 315} hide
              } {
                Fl_Check_Button btnConnectToMaclogger {
                  label {Connect to MacLogger}
                  callback {progdefaults.connect_to_maclogger = o->value();
if (progdefaults.connect_to_maclogger == false)
  maclogger_close();
else
  maclogger_init();
progdefaults.changed = true;}
                  xywh {10 91 186 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.connect_to_maclogger);}
                  code1 {\#include "maclogger.h"}
                }
                Fl_Check_Button btn_capture_maclogger_radio {
                  label {Capture Radio Report}
                  callback {progdefaults.capture_maclogger_radio = o->value();
progdefaults.changed = true;}
                  xywh {205 91 186 20} down_box DOWN_BOX value 1
                  code0 {o->value(progdefaults.capture_maclogger_radio);}
                }
                Fl_Check_Button btn_capture_maclogger_log {
                  label {Capture Log Report}
                  callback {progdefaults.capture_maclogger_log = o->value();
progdefaults.changed = true;}
                  xywh {205 116 186 21} down_box DOWN_BOX
                  code0 {o->value(progdefaults.capture_maclogger_log);}
                }
                Fl_Check_Button btn_capture_maclogger_lookup {
                  label {Capture Lookup }
                  callback {progdefaults.capture_maclogger_lookup = o->value();
progdefaults.changed = true;}
                  xywh {405 91 186 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.capture_maclogger_lookup);}
                }
                Fl_Check_Button btn_capture_maclogger_spot_tune {
                  label {Capture Spot Tune}
                  callback {progdefaults.capture_maclogger_spot_tune = o->value();
progdefaults.changed = true;}
                  xywh {405 116 186 21} down_box DOWN_BOX
                  code0 {o->value(progdefaults.capture_maclogger_spot_tune);}
                }
                Fl_Check_Button btn_capture_maclogger_spot_report {
                  label {Capture Spot Report}
                  callback {progdefaults.capture_maclogger_spot_report = o->value();
progdefaults.changed = true;}
                  xywh {405 144 186 21} down_box DOWN_BOX
                  code0 {o->value(progdefaults.capture_maclogger_spot_report);}
                }
                Fl_Check_Button btn_enable_maclogger_log {
                  label {Enable UDP log file}
                  callback {progdefaults.enable_maclogger_log = o->value();
progdefaults.changed = true;}
                  xywh {10 173 165 26} down_box DOWN_BOX
                  code0 {o->value(progdefaults.enable_maclogger_log);}
                }
                Fl_Text_Display txt_UDP_data {
                  label {UDP data stream}
                  xywh {10 220 580 161} align 5
                  code0 {Fl_Text_Buffer *txtbuffer = new Fl_Text_Buffer();}
                  code1 {o->buffer(txtbuffer);}
                }
                Fl_Output txt_maclogger_log_filename {
                  xywh {178 173 272 26}
                  code0 {o->value(progdefaults.maclogger_log_filename.c_str());}
                }
                Fl_Button {} {
                  label {Clear UDP text}
                  callback {txt_UDP_data->buffer()->text("");}
                  xywh {460 173 129 26}
                }
              }
              Fl_Group grpN3FJP_logs {
                label {N3FJP logs} open
                xywh {0 75 600 315} hide
              } {
                Fl_Text_Display txt_N3FJP_data {
                  label {TCP/IP Data Stream}
                  xywh {5 145 590 150} align 5
                  code0 {Fl_Text_Buffer *txtbuffer = new Fl_Text_Buffer();}
                  code1 {o->buffer(txtbuffer);}
                }
                Fl_Button {} {
                  label {Clear text}
                  callback {txt_N3FJP_data->buffer()->text("");}
                  xywh {501 298 90 24}
                }
                Fl_Input txt_N3FJP_ip_address {
                  label Address
                  callback {progdefaults.N3FJP_address = o->value();
progdefaults.changed = true;}
                  tooltip {N3FJP Server IP Address} xywh {5 100 350 25} align 5
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  code1 {o->value(progdefaults.N3FJP_address.c_str());}
                  class Fl_Input2
                }
                Fl_Input txt_N3FJP_ip_port_no {
                  label Port
                  callback {progdefaults.N3FJP_port = o->value();
progdefaults.changed = true;}
                  tooltip {N3FJP Server IP Port} xywh {365 100 55 25} align 5
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  code1 {o->value(progdefaults.N3FJP_port.c_str());}
                  class Fl_Input2
                }
                Fl_Button btn_default_N3FJP_ip {
                  label Default
                  callback {txt_N3FJP_ip_address->value("127.0.0.1");
progdefaults.N3FJP_address = "127.0.0.1";
txt_N3FJP_ip_port_no->value("1100");
progdefaults.N3FJP_port = "1100";
progdefaults.changed = true;}
                  tooltip {Returns IP Address and port
number to the default value.} xywh {423 100 67 25}
                }
                Fl_Check_Button btn_enable_N3FJP_log {
                  label {Enable Data Stream}
                  callback {progdefaults.enable_N3FJP_log = o->value();
progdefaults.changed = true;}
                  xywh {10 297 165 26} down_box DOWN_BOX
                  code0 {o->value(progdefaults.enable_N3FJP_log);}
                }
                Fl_Check_Button btn_connect_to_n3fjp {
                  label Connect
                  callback {progdefaults.connect_to_n3fjp=o->value();
progdefaults.changed=true;}
                  xywh {495 90 70 15} down_box DOWN_BOX
                  code0 {o->value(progdefaults.connect_to_n3fjp);}
                }
                Fl_Box box_n3fjp_connected {
                  label Connected
                  xywh {495 117 16 16} box DIAMOND_DOWN_BOX color 52 selection_color 58 align 8
                }
                Fl_Check_Button btn_N3FJP_sweet_spot {
                  label {Center DXspot freq at sweet spot}
                  callback {progdefaults.N3FJP_sweet_spot = o->value();
progdefaults.changed = true;}
                  tooltip {N3FJP DX spots centered on mode sweet spot} xywh {10 350 255 26} down_box DOWN_BOX
                  code0 {o->value(progdefaults.N3FJP_sweet_spot);}
                }
                Fl_Check_Button btn_N3FJP_modem_carrier {
                  label {Report actual modem RF frequency}
                  callback {progdefaults.N3FJP_modem_carrier = o->value();
progdefaults.changed = true;}
                  tooltip {Suppressed carrier +/- AF injection frequency} xywh {275 350 255 26} down_box DOWN_BOX
                  code0 {o->value(progdefaults.N3FJP_modem_carrier);}
                }
                Fl_Check_Button btn_enable_N3FJP_RIGTX {
                  label {PTT via <RIGTX> and <RIGRX>}
                  callback {progdefaults.enable_N3FJP_RIGTX = o->value();
progdefaults.changed = true;}
                  xywh {10 324 165 26} down_box DOWN_BOX
                  code0 {o->value(progdefaults.enable_N3FJP_RIGTX);}
                }
              }
            }
          }
          Fl_Group tabLogContests {
            label Contests open
            xywh {0 50 604 340} hide
          } {
            Fl_Tabs tabs_contests {open
              xywh {0 50 604 340}
            } {
              Fl_Group grpGeneral_contest {
                label General open
                xywh {0 75 600 315}
              } {
                Fl_Group listbox_contest {
                  label Contest
                  callback {progdefaults.logging = o->index();
if (contests[progdefaults.logging].name == "State QSO parties") {
  progdefaults.CONTESTnotes = QSOparties.qso_parties[progdefaults.SQSOcontest].notes;
  progdefaults.SQSOinstate = (QSOparties.qso_parties[progdefaults.SQSOcontest].instate[0] == 'T');
} else {
  listbox_QP_contests->index(0);
  progdefaults.CONTESTnotes = contests[progdefaults.logging].notes;
}
inp_contest_notes->value(progdefaults.CONTESTnotes.c_str());
UI_select();
clear_log_fields();
clearQSO();
progdefaults.changed = true;} open
                  tooltip {Select Logging as QSO or Contest} xywh {86 84 500 24} box DOWN_BOX color 7 align 4
                  code0 {\#include "contest.h"}
                  code1 {o->add(contest_names().c_str());}
                  code2 {o->index(progdefaults.logging);}
                  class Fl_ListBox
                } {}
                Fl_Group listbox_QP_contests {
                  label {State QSO Party}
                  callback {int n = o->index();
progdefaults.SQSOcontest = n;
progdefaults.SQSOinstate = (QSOparties.qso_parties[n].instate[0] == 'T');
if (contests[progdefaults.logging].name == "State QSO parties") {
  progdefaults.CONTESTnotes = QSOparties.qso_parties[n].notes;
  inp_contest_notes->value(progdefaults.CONTESTnotes.c_str());
} else
  inp_contest_notes->value("");
adjust_for_contest(0);
UI_select();
clear_log_fields();
clearQSO();
progdefaults.changed = true;} open
                  xywh {166 118 420 24} box DOWN_BOX color 7 align 4
                  code0 {\#include "contest.h"}
                  code1 {o->labelsize(FL_NORMAL_SIZE);}
                  code2 {o->add(QSOparties.names().c_str());}
                  code3 {o->index(progdefaults.SQSOcontest);}
                  class Fl_ListBox
                } {}
                Fl_Input inp_contest_notes {
                  label {Text capture order}
                  tooltip {Context Notes} xywh {166 153 420 24}
                  code0 {o->value(progdefaults.CONTESTnotes.c_str());}
                  class Fl_Input2
                }
                Fl_Group {} {
                  label {Duplicate check, CALL plus} open
                  xywh {3 192 590 86} box ENGRAVED_FRAME align 21
                } {
                  Fl_Light_Button btnDupCheckOn {
                    label {On/Off}
                    callback {progdefaults.EnableDupCheck = o->value();
progdefaults.changed = true;}
                    tooltip {Check for duplicates} xywh {20 217 74 20} selection_color 2
                    code0 {o->value(progdefaults.EnableDupCheck);}
                  }
                  Fl_Check_Button btnDupBand {
                    label Band
                    callback {progdefaults.dupband = o->value();
progdefaults.changed = true;}
                    tooltip {Bands must match} xywh {132 217 70 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.dupband);}
                  }
                  Fl_Check_Button btnDupMode {
                    label Mode
                    callback {progdefaults.dupmode = o->value();
progdefaults.changed = true;}
                    tooltip {Mode must match} xywh {245 217 70 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.dupmode);}
                  }
                  Fl_Check_Button btnDupTimeSpan {
                    label {Time span over}
                    callback {progdefaults.duptimespan=(int)o->value();
progdefaults.changed = true;}
                    tooltip {QSO must not occur within a time period of} xywh {370 217 129 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.duptimespan);}
                  }
                  Fl_Button btnDupColor {
                    label {Dup Color}
                    callback {fl_color_chooser("Dup Check",
  progdefaults.dup_color.R,
  progdefaults.dup_color.G,
  progdefaults.dup_color.B);
o->color(
  fl_rgb_color(
    progdefaults.dup_color.R,
    progdefaults.dup_color.G,
    progdefaults.dup_color.B));
o->redraw();
progdefaults.changed = true;}
                    tooltip {Left click to select dup color} xywh {20 244 90 24} box DOWN_BOX down_box DOWN_BOX color 7 selection_color 7
                    code0 {o->color(fl_rgb_color(progdefaults.dup_color.R, progdefaults.dup_color.G, progdefaults.dup_color.B));}
                    code1 {\#include <FL/Fl_Color_Chooser.H>}
                  }
                  Fl_Button btnPossibleDupColor {
                    label {? Dup Color}
                    callback {fl_color_chooser("Possible_Dup Check",
  progdefaults.possible_dup_color.R,
  progdefaults.possible_dup_color.G,
  progdefaults.possible_dup_color.B);
o->color(
  fl_rgb_color(
    progdefaults.possible_dup_color.R,
    progdefaults.possible_dup_color.G,
    progdefaults.possible_dup_color.B));
o->redraw();
progdefaults.changed = true;}
                    tooltip {Left click to select possible dup color} xywh {132 244 90 24} box DOWN_BOX down_box DOWN_BOX color 7 selection_color 7
                    code0 {o->color(fl_rgb_color(progdefaults.possible_dup_color.R, progdefaults.possible_dup_color.G, progdefaults.possible_dup_color.B));}
                    code1 {\#include <FL/Fl_Color_Chooser.H>}
                  }
                  Fl_Check_Button btnDupXchg1 {
                    label {Exchange In}
                    callback {progdefaults.dupxchg1 = o->value();
progdefaults.changed = true;}
                    tooltip {free form 1 must match} xywh {245 246 105 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.dupxchg1);}
                  }
                  Fl_Check_Button btnDupState {
                    label State
                    callback {progdefaults.dupstate = o->value();
progdefaults.changed = true;}
                    tooltip {State must match} xywh {370 246 70 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.dupstate);}
                  }
                  Fl_Value_Input nbrTimeSpan {
                    label minutes
                    callback {progdefaults.timespan = (int)o->value();
progdefaults.changed = true;}
                    tooltip {Enter time span in minutes} xywh {463 244 53 24} align 8 maximum 1440 step 1 value 120
                    code0 {o->value(progdefaults.timespan);}
                    class Fl_Value_Input2
                  }
                }
                Fl_Group {} {
                  label {Contest Exchange / Serial \#} open
                  xywh {3 276 590 100} box ENGRAVED_FRAME align 21
                } {
                  Fl_Input inpSend1 {
                    label Send
                    callback {progdefaults.myXchg=o->value();
progdefaults.changed = true;}
                    tooltip {free form exchange} xywh {68 300 200 24}
                    code0 {o->value(progdefaults.myXchg.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Check_Button btn599 {
                    label {RST always 599/59}
                    callback {progdefaults.fixed599 = o->value();
progdefaults.changed = true;}
                    tooltip {Force RST in/out to 599/59} xywh {283 302 130 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.fixed599);}
                  }
                  Fl_Check_Button btnCutNbrs {
                    label {Send CW cut \#'s}
                    callback {progdefaults.cutnbrs=o->value();
progdefaults.changed = true;}
                    tooltip {0 = T; 9 = N} xywh {443 302 139 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.cutnbrs);}
                  }
                  Fl_Group {} {open
                    xywh {10 329 576 42} box ENGRAVED_FRAME
                  } {
                    Fl_Value_Input nbrContestStart {
                      label {Start Nbr}
                      callback {progdefaults.ContestStart = (int)o->value();
progdefaults.changed = true;}
                      tooltip {Starting number} xywh {97 338 45 24} maximum 10000 step 1
                      code0 {o->value(progdefaults.ContestStart);}
                      class Fl_Value_Input2
                    }
                    Fl_Value_Input nbrContestDigits {
                      label Digits
                      callback {progdefaults.ContestDigits = (int)o->value();
progdefaults.changed = true;}
                      tooltip {Number of digits in serial number} xywh {219 338 46 24} minimum 1 maximum 5 step 1 value 3
                      class Fl_Value_Input2
                    }
                    Fl_Check_Button btnUseLeadingZeros {
                      label {Use leading zeros}
                      callback {progdefaults.UseLeadingZeros = o->value();
progdefaults.changed = true;}
                      tooltip {Insert leading zeros into Xmtd serial number} xywh {284 340 157 20} down_box DOWN_BOX value 1
                    }
                    Fl_Button btnResetSerNbr {
                      label Reset
                      callback {cb_ResetSerNbr();}
                      tooltip {Initialize the QSO logging fields} xywh {481 338 71 24}
                    }
                  }
                }
              }
              Fl_Group grpFD_contest {
                label {Field Day}
                xywh {0 75 600 315} hide
              } {
                Fl_Group {} {
                  label {Field Day} open
                  xywh {5 88 590 53} box ENGRAVED_BOX align 21
                } {
                  Fl_Input inp_my_FD_call {
                    label {Operator Call}
                    callback {progdefaults.fd_op_call=o->value();
progdefaults.changed = true;}
                    tooltip {Field Day Callsign
May be same as OP callsign} xywh {176 104 80 24}
                    code0 {o->value(progdefaults.fd_op_call.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Input inp_my_FD_section {
                    label {My Section}
                    callback {progdefaults.my_FD_section=o->value();
progdefaults.changed = true;}
                    tooltip {Field Day Section} xywh {484 104 45 24}
                    code0 {o->value(progdefaults.my_FD_section.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Input inp_my_FD_class {
                    label {My Class}
                    callback {progdefaults.my_FD_class=o->value();
progdefaults.changed = true;}
                    tooltip {Field Day Class} xywh {337 104 50 24}
                    code0 {o->value(progdefaults.my_FD_class.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                }
              }
              Fl_Group grpJOTA_contest {
                label {JOTA/School} open
                xywh {0 75 600 315} hide
              } {
                Fl_Group {} {
                  label {School Round Up} open
                  xywh {10 179 580 53} box ENGRAVED_BOX align 21
                } {
                  Fl_Input inp_my_SCR_class {
                    label {My Class}
                    callback {progdefaults.my_SCR_class=o->value();
progdefaults.changed = true;}
                    tooltip {School Round Up - allowable I, H, O - see rules} xywh {196 201 69 24}
                    code0 {o->value(progdefaults.my_SCR_class.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                }
                Fl_Group {} {
                  label {Jamboree OTA} open
                  xywh {10 86 580 89} box ENGRAVED_BOX align 21
                } {
                  Fl_Input inp_my_JOTA_troop {
                    label {My Troop}
                    callback {progdefaults.my_JOTA_troop=o->value();
progdefaults.changed = true;}
                    tooltip {My JOTA Troop} xywh {195 109 200 24}
                    code0 {o->value(progdefaults.my_JOTA_troop.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                  Fl_Input inp_my_JOTA_scout {
                    label {Scout Op'}
                    callback {progdefaults.my_JOTA_scout = o->value();
progdefaults.changed=true;}
                    tooltip {Scout Operator Name} xywh {195 140 200 24}
                    code0 {o->value(progdefaults.my_JOTA_scout.c_str());}
                    code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Input2
                  }
                }
              }
            }
          }
          Fl_Group tabMBars {
            label Macros
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {5 240 590 35} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnMacroMouseWheel {
                label {Mouse wheel active on macro buttons}
                callback {progdefaults.macro_wheel = o->value();
progdefaults.changed = true;}
                tooltip {enable mouse wheel control of macro bar} xywh {62 248 296 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.macro_wheel);}
              }
            }
            Fl_Group {} {
              label {Number and position of macro bars} open
              xywh {5 60 590 180} box ENGRAVED_FRAME align 21
            } {
              Fl_Counter cnt_macro_height {
                label {Button Height}
                callback {progdefaults.macro_height = (int)o->value();
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                tooltip {Height of macro bar} xywh {215 85 89 22} type Simple align 8 minimum 18 maximum 30 step 1 value 20
                code0 {o->value(progdefaults.macro_height);}
              }
              Fl_Round_Button btn_scheme_0 {
                label {One above Rx/Tx}
                callback {progdefaults.mbar_scheme = 0;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
                tooltip {Single macro bar below logging panel
variable height} xywh {61 113 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_1 {
                label {One above waterfall}
                callback {progdefaults.mbar_scheme = 1;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
                xywh {61 138 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_2 {
                label {One below waterfall}
                callback {progdefaults.mbar_scheme = 2;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
                xywh {61 163 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_3 {
                label {Two scheme 1}
                callback {progdefaults.mbar_scheme = 3;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {228 113 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_4 {
                label {Two scheme 2}
                callback {progdefaults.mbar_scheme = 4;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {396 113 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_5 {
                label {Two scheme 3}
                callback {progdefaults.mbar_scheme = 5;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {228 138 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_6 {
                label {Two scheme 4}
                callback {progdefaults.mbar_scheme = 6;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {396 138 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_7 {
                label {Two scheme 5}
                callback {progdefaults.mbar_scheme = 7;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {228 163 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_8 {
                label {Two scheme 6}
                callback {progdefaults.mbar_scheme = 8;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {396 163 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_9 {
                label {Two scheme 7}
                callback {progdefaults.mbar_scheme = 9;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {228 188 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_10 {
                label {Two scheme 8}
                callback {progdefaults.mbar_scheme = 10;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {396 188 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_11 {
                label {Two scheme 9}
                callback {progdefaults.mbar_scheme = 11;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {228 213 144 22} type Radio down_box ROUND_DOWN_BOX
              }
              Fl_Round_Button btn_scheme_12 {
                label {Two scheme 10}
                callback {progdefaults.mbar_scheme = 12;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
                xywh {396 213 144 22} type Radio down_box ROUND_DOWN_BOX
              }
            }
            Fl_Group {} {open
              xywh {5 275 590 55} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnUseLastMacro {
                label {Load last used macro file at start}
                callback {progdefaults.UseLastMacro = o->value();
update_main_title();
progdefaults.changed = true;}
                tooltip {ON - use last set of macros
OFF - use default set} xywh {62 280 277 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.UseLastMacro);}
              }
              Fl_Check_Button btnDisplayMacroFilename {
                label {Display macro filename at start}
                callback {progdefaults.DisplayMacroFilename = o->value();
progdefaults.changed = true;}
                tooltip {The filename is written to the RX text area} xywh {62 302 277 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.DisplayMacroFilename);}
              }
              Fl_Check_Button btn_save_macros_on_exit {
                label {Prompt to save macro file}
                callback {btn2_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;}
                tooltip {Write current macro set on program exit} xywh {345 280 216 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.SaveMacros);}
              }
            }
            Fl_Group {} {open
              xywh {5 330 295 45} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btn_macro_post {
                label {Show macro control codes}
                callback {progdefaults.macro_post = o->value();
progdefaults.changed = true;}
                tooltip {print ^! execution codes in Rx panel} xywh {65 342 216 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.macro_post);}
              }
            }
            Fl_Group {} {open
              xywh {300 330 295 45} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btn_4bar_position {
                label {4 bar macro set below Tx}
                callback {progdefaults.four_bar_position = o->value();
UI_select();
progdefaults.changed = true;}
                tooltip {Position the 4 bar macro set below Tx panel
Default above Rx panel} xywh {332 342 216 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.four_bar_position);}
              }
            }
          }
          Fl_Group tabWF_UI {
            label {WF Ctrls}
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {52 83 496 253} box ENGRAVED_BOX
            } {
              Fl_Box {} {
                label {Enable check box to show each respective operator control}
                xywh {81 90 446 25} box FLAT_BOX align 16
              }
              Fl_Check_Button btnWF_UIrev {
                label Reverse
                callback {progdefaults.WF_UIrev = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {108 123 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIrev);}
              }
              Fl_Check_Button btnWF_UIx1 {
                label {WF Magnification}
                callback {progdefaults.WF_UIx1 = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 123 162 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIx1);}
              }
              Fl_Check_Button btnWF_UIwfcarrier {
                label {WF carrier}
                callback {progdefaults.WF_UIwfcarrier = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {108 154 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfcarrier);}
              }
              Fl_Check_Button btnWF_UIwfshift {
                label {WF Shift Controls}
                callback {progdefaults.WF_UIwfshift = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 154 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfshift);}
              }
              Fl_Check_Button btnWF_UIwfreflevel {
                label {WF ref level}
                callback {progdefaults.WF_UIwfreflevel = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {108 186 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfreflevel);}
              }
              Fl_Check_Button btnWF_UIwfdrop {
                label {WF drop rate}
                callback {progdefaults.WF_UIwfdrop = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 186 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfdrop);}
              }
              Fl_Check_Button btnWF_UIwfampspan {
                label {WF amp span}
                callback {progdefaults.WF_UIwfampspan = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {108 218 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfampspan);}
              }
              Fl_Check_Button btnWF_UIwfstore {
                label {WF Store}
                callback {progdefaults.WF_UIwfstore = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 218 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfstore);}
              }
              Fl_Check_Button btnWF_UIwfmode {
                label {WF mode}
                callback {progdefaults.WF_UIwfmode = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {108 250 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIwfmode);}
              }
              Fl_Check_Button btnWF_UIqsy {
                label QSY
                callback {progdefaults.WF_UIqsy = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 250 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIqsy);}
              }
              Fl_Check_Button btnWF_UIxmtlock {
                label {XMT lock}
                callback {progdefaults.WF_UIxmtlock = o->value();
progdefaults.changed = true;
WF_UI();}
                xywh {327 282 150 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.WF_UIxmtlock);}
              }
              Fl_Button btn_wf_enable_all {
                label {Enable all}
                callback {btnWF_UIrev->value(progdefaults.WF_UIrev = 1);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 1);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 1);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 1);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 1);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 1);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 1);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 1);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 1);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 1);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 1);

progdefaults.changed = true;
WF_UI();}
                xywh {152 305 88 20}
              }
              Fl_Button btn_wf_disable_all {
                label {Disable all}
                callback {btnWF_UIrev->value(progdefaults.WF_UIrev = 0);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 0);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 0);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 0);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 0);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 0);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 0);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 0);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 0);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 0);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 0);

progdefaults.changed = true;
WF_UI();}
                xywh {351 305 88 20}
              }
            }
          }
          Fl_Group tabColorsFonts {
            label {Clrs/Fnts} open
            xywh {0 50 600 340} hide
          } {
            Fl_Tabs tabsColors {open
              xywh {0 50 600 340}
            } {
              Fl_Group {} {
                label {Rx/Tx} open
                xywh {0 75 600 315} hide
              } {
                Fl_Group listbox_charset_status {
                  label {Rx/Tx Character set} open
                  tooltip {Select Rx/Tx Character Set} xywh {96 90 165 24} box BORDER_BOX color 55 align 8
                  code0 {\#include "fl_digi.h"}
                  code1 {o->labelsize(FL_NORMAL_SIZE);
                  listbox_charset_status->callback(cb_listbox_charset, 0);}
                  class Fl_ListBox
                } {}
                Fl_Input RxText {
                  xywh {96 121 220 36}
                  code0 {RxText->value("Receive Text");}
                  code1 {RxText->color(fl_rgb_color(progdefaults.RxColor.R, progdefaults.RxColor.G, progdefaults.RxColor.B));}
                  code2 {RxText->textfont(progdefaults.RxFontnbr); RxText->textsize(progdefaults.RxFontsize); RxText->textcolor(progdefaults.RxFontcolor);}
                  code3 {RxText->type(FL_MULTILINE_INPUT_WRAP);}
                }
                Fl_Button btnRxColor {
                  label {Rx bkgnd}
                  callback {uchar r, g, b;
    r = progdefaults.RxColor.R;
    g = progdefaults.RxColor.G;
    b = progdefaults.RxColor.B;

    if (!fl_color_chooser("Rx Color", r, g, b))
        return;

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;
    RxText->color(fl_rgb_color(r,g,b));
    ReceiveText->color(RxText->color());
    RxText->redraw();
    ReceiveText->redraw();

    progdefaults.changed = true;}
                  xywh {326 128 75 21}
                }
                Fl_Button btnTxColor {
                  label {Tx bkgnd}
                  callback {uchar r, g, b;
    r = progdefaults.TxColor.R;
    g = progdefaults.TxColor.G;
    b = progdefaults.TxColor.B;

    if (!fl_color_chooser("Tx Color", r, g, b))
        return;

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;
    TxText->color(fl_rgb_color(r,g,b));
    TransmitText->color(TxText->color());
    TxText->redraw();
    TransmitText->redraw();

progdefaults.changed = true;}
                  xywh {326 171 75 21}
                }
                Fl_Input TxText {
                  xywh {96 163 220 37}
                  code0 {TxText->value("Transmit Text");}
                  code1 {TxText->color(fl_rgb_color(progdefaults.TxColor.R, progdefaults.TxColor.G, progdefaults.TxColor.B));}
                  code2 {TxText->textfont(progdefaults.TxFontnbr); TxText->textsize(progdefaults.TxFontsize); TxText->textcolor(progdefaults.TxFontcolor);}
                  code3 {TxText->type(FL_MULTILINE_INPUT_WRAP);}
                }
                Fl_Button btnRxFont {
                  label {Rx font}
                  callback {font_browser->fontNumber(progdefaults.RxFontnbr);
    font_browser->fontSize(progdefaults.RxFontsize);
    font_browser->fontColor(progdefaults.RxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbRxFontBrowser);
font_browser->show();}
                  xywh {411 128 75 21}
                }
                Fl_Button btnTxFont {
                  label {Tx font}
                  callback {font_browser->fontNumber(progdefaults.TxFontnbr);
    font_browser->fontSize(progdefaults.TxFontsize);
    font_browser->fontColor(progdefaults.TxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbTxFontBrowser);
    font_browser->show();}
                  xywh {411 171 75 21}
                }
                Fl_Input MacroText {
                  xywh {96 206 220 37}
                  code0 {MacroText->value("Macro editor text");}
                  code1 {MacroText->textfont(progdefaults.MacroEditFontnbr);}
                  code2 {MacroText->textsize(progdefaults.MacroEditFontsize);}
                  code3 {MacroText->type(FL_MULTILINE_INPUT_WRAP);}
                }
                Fl_Button btnMacroEditFont {
                  label {Macro Edit Font}
                  callback {font_browser->fontNumber(progdefaults.MacroEditFontnbr);
font_browser->fontSize(progdefaults.MacroEditFontsize);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbMacroEditFontBrowser);
font_browser->show();}
                  xywh {326 214 120 21}
                }
                Fl_Group {} {
                  label {Text Highlighting} open
                  xywh {86 253 404 81} box ENGRAVED_FRAME align 17
                } {
                  Fl_Button btnXMIT {
                    label XMIT
                    callback {choose_color(progdefaults.XMITcolor);
    btnXMIT->color( progdefaults.XMITcolor );
    btnXMIT->redraw();
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);

    progdefaults.changed = true;}
                    tooltip {Sent chars in Rx/Tx pane} xywh {104 281 40 21} align 2
                    code0 {btnXMIT->color(progdefaults.XMITcolor);}
                  }
                  Fl_Button btnCTRL {
                    label CTRL
                    callback {choose_color(progdefaults.CTRLcolor);
    btnCTRL->color( progdefaults.CTRLcolor );
    btnCTRL->redraw();
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);

    progdefaults.changed = true;}
                    tooltip {Control chars in Rx/Tx pane} xywh {147 281 40 21} align 2
                    code0 {btnCTRL->color(progdefaults.CTRLcolor);}
                  }
                  Fl_Button btnSKIP {
                    label SKIP
                    callback {choose_color(progdefaults.SKIPcolor);
    btnSKIP->color( progdefaults.SKIPcolor );
    btnSKIP->redraw();
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);

    progdefaults.changed = true;}
                    tooltip {Skipped chars in Tx pane
(Tx on/off in CW)} xywh {191 281 40 21} align 2
                    code0 {btnSKIP->color(progdefaults.SKIPcolor);}
                  }
                  Fl_Button btnALTR {
                    label ALTR
                    callback {choose_color(progdefaults.ALTRcolor);
    btnALTR->color( progdefaults.ALTRcolor );
    btnALTR->redraw();
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);

    progdefaults.changed = true;}
                    tooltip {Alternate character color in Rx panelr} xywh {234 281 40 21} align 2
                    code0 {btnALTR->color(progdefaults.ALTRcolor);}
                  }
                  Fl_Button btnSEL {
                    label SEL
                    callback {choose_color(progdefaults.RxTxSelectcolor);
btnSEL->color( progdefaults.RxTxSelectcolor );
btnSEL->redraw();
ReceiveText->color(
  fl_rgb_color(
    progdefaults.RxColor.R,
    progdefaults.RxColor.G,
    progdefaults.RxColor.B),
    progdefaults.RxTxSelectcolor);
TransmitText->color(
  fl_rgb_color(
    progdefaults.TxColor.R,
    progdefaults.TxColor.G,
    progdefaults.TxColor.B),
    progdefaults.RxTxSelectcolor);

progdefaults.changed = true;}
                    tooltip {Selection background color in Rx Tx panels} xywh {278 281 39 21} align 2
                    code0 {btnSEL->color(progdefaults.RxTxSelectcolor);}
                  }
                  Fl_Button btnNoTextColor {
                    label System
                    callback {uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;}
                    xywh {325 281 70 21}
                  }
                  Fl_Button btnTextDefaults {
                    label Defaults
                    callback {uchar r, g, b;
    Fl_Color clr;

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    r = 255; g = 242; b = 190;
    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    r = 200; g = 235; b = 255;
    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;}
                    xywh {399 281 70 21}
                  }
                }
                Fl_Check_Button btn_show_all_codes {
                  label {display Rx control chars as ascii string}
                  callback {progdefaults.show_all_codes=o->value();
progdefaults.changed = true;}
                  xywh {110 345 25 25} down_box DOWN_BOX
                  code0 {o->value(progdefaults.show_all_codes);}
                }
              }
              Fl_Group {} {
                label {FreqDisp / Meters}
                xywh {0 75 600 315} hide
              } {
                Fl_Group {} {open
                  xywh {115 108 395 87} box ENGRAVED_FRAME
                } {
                  Fl_Box FDdisplay {
                    label {14070.150}
                    xywh {195 112 235 45} box DOWN_BOX color 55 labelfont 4 labelsize 40
                    code0 {o->color(fl_rgb_color(progdefaults.FDbackground.R,progdefaults.FDbackground.G,progdefaults.FDbackground.B));}
                    code1 {o->labelcolor(fl_rgb_color(progdefaults.FDforeground.R,progdefaults.FDforeground.G,progdefaults.FDforeground.B));}
                    code2 {o->labelfont(progdefaults.FreqControlFontnbr);}
                  }
                  Fl_Button btn_freq_control_font {
                    label Font
                    callback {font_browser->fontNumber(progdefaults.FreqControlFontnbr);
    font_browser->fontSize(14);
    font_browser->fontColor(FL_FOREGROUND_COLOR);
    font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbFreqControlFontBrowser);
font_browser->show();}
                    xywh {122 163 90 24}
                  }
                  Fl_Button btnBackgroundColor {
                    label {Bg Color}
                    callback {uchar r, g, b;
    r = progdefaults.FDbackground.R;
    g = progdefaults.FDbackground.G;
    b = progdefaults.FDbackground.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;

    FDdisplay->color(fl_rgb_color(r,g,b));
    FDdisplay->redraw();

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
                    xywh {218 163 90 24}
                  }
                  Fl_Button btnForegroundColor {
                    label {Digit Color}
                    callback {uchar r, g, b;
    r = progdefaults.FDforeground.R;
    g = progdefaults.FDforeground.G;
    b = progdefaults.FDforeground.B;

    if (!fl_color_chooser("Foreground", r, g, b))
        return;

    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;

    FDdisplay->labelcolor(fl_rgb_color(r,g,b));
    FDdisplay->redraw();

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
                    xywh {314 163 90 24}
                  }
                  Fl_Button btnFD_SystemColor {
                    label {Sys Colors}
                    callback {uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;

    FDdisplay->color(clr);

    clr = FL_FOREGROUND_COLOR;
    Fl::get_color(clr, r, g, b);

    FDdisplay->labelcolor(clr);
    FDdisplay->redraw();

    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
                    xywh {410 163 90 24}
                  }
                }
                Fl_Group {} {
                  label {S-meter} open
                  xywh {115 199 395 62} box ENGRAVED_FRAME align 21
                } {
                  Fl_Button btnSmeter_bg_color {
                    label {Bg Color}
                    callback {uchar r, g, b;
    r = progdefaults.Smeter_bg_color.R;
    g = progdefaults.Smeter_bg_color.G;
    b = progdefaults.Smeter_bg_color.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.Smeter_bg_color.R = r;
    progdefaults.Smeter_bg_color.G = g;
    progdefaults.Smeter_bg_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {122 226 90 24}
                  }
                  Fl_Button btnSmeter_scale_color {
                    label {Scale Color}
                    callback {uchar r, g, b;
    r = progdefaults.Smeter_scale_color.R;
    g = progdefaults.Smeter_scale_color.G;
    b = progdefaults.Smeter_scale_color.B;

    if (!fl_color_chooser("Scale", r, g, b))
        return;

    progdefaults.Smeter_scale_color.R = r;
    progdefaults.Smeter_scale_color.G = g;
    progdefaults.Smeter_scale_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {218 226 90 24}
                  }
                  Fl_Button btnSmeter_meter_color {
                    label {Meter Color}
                    callback {uchar r, g, b;
    r = progdefaults.Smeter_meter_color.R;
    g = progdefaults.Smeter_meter_color.G;
    b = progdefaults.Smeter_meter_color.B;

    if (!fl_color_chooser("Meter", r, g, b))
        return;

    progdefaults.Smeter_meter_color.R = r;
    progdefaults.Smeter_meter_color.G = g;
    progdefaults.Smeter_meter_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {314 226 90 24}
                  }
                }
                Fl_Group {} {
                  label {PWR-meter} open
                  xywh {115 268 395 67} box ENGRAVED_FRAME align 21
                } {
                  Fl_Button btnPWR_bg_color {
                    label {Bg Color}
                    callback {uchar r, g, b;
    r = progdefaults.PWRmeter_bg_color.R;
    g = progdefaults.PWRmeter_bg_color.G;
    b = progdefaults.PWRmeter_bg_color.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.PWRmeter_bg_color.R = r;
    progdefaults.PWRmeter_bg_color.G = g;
    progdefaults.PWRmeter_bg_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {122 295 90 24}
                  }
                  Fl_Button btnPWR_scale_color {
                    label {Scale Color}
                    callback {uchar r, g, b;
    r = progdefaults.PWRmeter_scale_color.R;
    g = progdefaults.PWRmeter_scale_color.G;
    b = progdefaults.PWRmeter_scale_color.B;

    if (!fl_color_chooser("Scale", r, g, b))
        return;

    progdefaults.PWRmeter_scale_color.R = r;
    progdefaults.PWRmeter_scale_color.G = g;
    progdefaults.PWRmeter_scale_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {218 295 90 24}
                  }
                  Fl_Button btnPWR_meter_Color {
                    label {Meter Color}
                    callback {uchar r, g, b;
    r = progdefaults.PWRmeter_meter_color.R;
    g = progdefaults.PWRmeter_meter_color.G;
    b = progdefaults.PWRmeter_meter_color.B;

    if (!fl_color_chooser("Meter", r, g, b))
        return;

    progdefaults.PWRmeter_meter_color.R = r;
    progdefaults.PWRmeter_meter_color.G = g;
    progdefaults.PWRmeter_meter_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
                    xywh {314 295 90 24}
                  }
                  Fl_Group listboxPWRselect {
                    label {Power scale}
                    callback {progdefaults.PWRselect = o->index();
set_smeter_colors();
progdefaults.changed = true;} open
                    tooltip {Select the type of FFT prefilter} xywh {410 295 80 24} box DOWN_BOX color 7
                    code0 {o->add(_("25 W")); o->add("50 W");}
                    code1 {o->add("100 W"); o->add("200 W"); o->add("AUTO");}
                    code3 {o->index(progdefaults.PWRselect);o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                }
              }
              Fl_Group {} {
                label Log open
                xywh {0 75 600 315} hide
              } {
                Fl_Group {} {
                  label {Logging Panel Controls} open
                  xywh {5 101 590 65} box ENGRAVED_FRAME align 21
                } {
                  Fl_Output LOGGINGdisplay {
                    xywh {33 125 184 25}
                    code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGGINGtextcolor);}
                    code1 {o->color(progdefaults.LOGGINGcolor);}
                    code2 {o->value("W1HKJ");}
                    code3 {o->redraw();}
                  }
                  Fl_Button btnLOGGING_color {
                    label {Bg Color}
                    callback {uchar r, g, b;
    Fl::get_color(progdefaults.LOGGINGcolor, r, g, b);

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGGINGcolor = fl_rgb_color(r, g, b);

    LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
    LOGGINGdisplay->redraw();

    LOGGING_colors_font();

    progdefaults.changed = true;}
                    xywh {276 125 80 25}
                  }
                  Fl_Button btn_LOGGING_font {
                    label Font
                    callback {font_browser->fontNumber(progdefaults.LOGGINGtextfont);
font_browser->fontSize(progdefaults.LOGGINGtextsize);
font_browser->fontColor(progdefaults.LOGGINGtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGGINGFontBrowser);
font_browser->show();}
                    xywh {366 125 55 25}
                  }
                  Fl_Button btnLOGGINGdefault_colors_font {
                    label Default
                    callback {progdefaults.LOGGINGcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGGINGtextfont = (Fl_Font)0;
progdefaults.LOGGINGtextsize = 14;
progdefaults.LOGGINGtextcolor = FL_BLACK;

LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
LOGGINGdisplay->textsize(progdefaults.LOGGINGtextsize);
LOGGINGdisplay->textcolor(progdefaults.LOGGINGtextcolor);
LOGGINGdisplay->textfont(progdefaults.LOGGINGtextfont);
LOGGINGdisplay->redraw();

LOGGING_colors_font();

progdefaults.changed = true;}
                    xywh {432 125 80 25}
                  }
                }
                Fl_Group {} {
                  label {Logbook Dialog} open
                  xywh {5 167 590 65} box ENGRAVED_FRAME align 21
                } {
                  Fl_Output LOGBOOKdisplay {
                    xywh {33 191 184 25}
                    code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGBOOKtextcolor);}
                    code1 {o->color(progdefaults.LOGBOOKcolor);}
                    code2 {o->value("14.070000");}
                    code3 {o->redraw();}
                  }
                  Fl_Button btnLOGBOOK_color {
                    label {Bg Color}
                    callback {uchar r, g, b;
    Fl::get_color(progdefaults.LOGBOOKcolor, r, g, b);

   if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGBOOKcolor = fl_rgb_color(r, g, b);

    LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
    LOGBOOKdisplay->redraw();

    LOGBOOK_colors_font();

    progdefaults.changed = true;}
                    xywh {275 191 80 25}
                  }
                  Fl_Button btn_LOGBOOK_font {
                    label Font
                    callback {font_browser->fontNumber(progdefaults.LOGBOOKtextfont);
font_browser->fontSize(progdefaults.LOGBOOKtextsize);
font_browser->fontColor(progdefaults.LOGBOOKtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGBOOKFontBrowser);
font_browser->show();}
                    xywh {365 191 55 25}
                  }
                  Fl_Button btnLOGBOOKdefault_colors_font {
                    label Default
                    callback {progdefaults.LOGBOOKcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGBOOKtextfont = (Fl_Font)0;
progdefaults.LOGBOOKtextsize = 14;
progdefaults.LOGBOOKtextcolor = FL_BLACK;

LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
LOGBOOKdisplay->textsize(progdefaults.LOGBOOKtextsize);
LOGBOOKdisplay->textcolor(progdefaults.LOGBOOKtextcolor);
LOGBOOKdisplay->textfont(progdefaults.LOGBOOKtextfont);
LOGBOOKdisplay->redraw();

LOGBOOK_colors_font();

progdefaults.changed = true;}
                    xywh {431 191 80 25}
                  }
                }
                Fl_Group {} {
                  label {DX Cluster Dialog} open
                  xywh {5 236 590 147} box ENGRAVED_FRAME align 21
                } {
                  Fl_Output DXC_display {
                    label {Report Browser}
                    xywh {33 271 184 25} align 5
                    code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);}
                    code2 {o->value("DX de W1HKJ-1");}
                    code3 {o->redraw();}
                  }
                  Fl_Button btn_DXC_font {
                    label Font
                    callback {font_browser->fontNumber(progdefaults.DXC_textfont);
font_browser->fontSize(progdefaults.DXC_textsize);
font_browser->fontColor(progdefaults.DXC_textcolor);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbDXC_FontBrowser);
font_browser->show();}
                    xywh {222 271 86 25}
                  }
                  Fl_Button btnDXCdefault_colors_font {
                    label Default
                    callback {progdefaults.DXC_textfont = FL_COURIER;
progdefaults.DXC_textsize = 14;
progdefaults.DXC_textcolor = FL_BLACK;
progdefaults.DXC_even_color = 7;
progdefaults.DXC_odd_color = 246;

DXC_display->textsize(progdefaults.DXC_textsize);
DXC_display->textcolor(progdefaults.DXC_textcolor);
DXC_display->textfont(progdefaults.DXC_textfont);

DXC_display->redraw();}
                    xywh {314 271 86 25}
                  }
                  Fl_Button btn_DXC_even_lines {
                    label {Even Lines}
                    callback {progdefaults.DXC_even_color = fl_show_colormap((Fl_Color)progdefaults.DXC_even_color);
o->color(progdefaults.DXC_even_color);
o->redraw();
dxc_lines_redraw();
progdefaults.changed = true}
                    xywh {222 302 86 25} color 55
                    code0 {o->color(progdefaults.DXC_even_color);}
                  }
                  Fl_Button btn_DXC_odd_lines {
                    label {Odd Lines}
                    callback {progdefaults.DXC_odd_color = fl_show_colormap((Fl_Color)progdefaults.DXC_odd_color);
o->color(progdefaults.DXC_odd_color);
o->redraw();
dxc_lines_redraw();
progdefaults.changed = true}
                    xywh {314 302 86 25} color 246
                    code0 {o->color(progdefaults.DXC_odd_color);}
                  }
                  Fl_Input StreamText {
                    label {Stream Text}
                    xywh {33 341 184 25} align 5
                    code0 {o->value("DX de W1HKJ...");}
                    code1 {o->color(fl_rgb_color(progdefaults.DX_Color.R, progdefaults.DX_Color.G, progdefaults.DX_Color.B));}
                    code2 {o->textfont(progdefaults.DXfontnbr); o->textsize(progdefaults.DXfontsize); o->textcolor(progdefaults.DXfontcolor);}
                  }
                  Fl_Button btnDXcolor {
                    label {Bg color}
                    callback {uchar r, g, b;
r = progdefaults.DX_Color.R;
g = progdefaults.DX_Color.G;
b = progdefaults.DX_Color.B;

if (!fl_color_chooser("DX Color", r, g, b))
    return;

progdefaults.DX_Color.R = r;
progdefaults.DX_Color.G = g;
progdefaults.DX_Color.B = b;

StreamText->color(fl_rgb_color(r,g,b));
StreamText->redraw();

brws_tcpip_stream->color(fl_rgb_color(r,g,b));
brws_tcpip_stream->redraw();

brws_dxcluster_hosts->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_dxcluster_hosts->textcolor(progdefaults.DXfontcolor);
brws_dxcluster_hosts->textfont(progdefaults.DXfontnbr);
brws_dxcluster_hosts->textsize(progdefaults.DXfontsize);
brws_dxcluster_hosts->redraw();

brws_dxc_help->color(fl_rgb_color(r,g,b));
brws_dxc_help->setFont(progdefaults.DXfontnbr);
brws_dxc_help->setFontSize(progdefaults.DXfontsize);
brws_dxc_help->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();
    
ed_telnet_cmds->color(fl_rgb_color(r,g,b));
ed_telnet_cmds->redraw();

dxcluster_hosts_load();

progdefaults.changed = true;}
                    xywh {222 341 86 25}
                  }
                  Fl_Button btnDXfont {
                    label Font
                    callback {font_browser->fontNumber(progdefaults.DXfontnbr);
    font_browser->fontSize(progdefaults.DXfontsize);
    font_browser->fontColor(progdefaults.DXfontcolor);
    font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
    font_browser->callback(cbDXfont_browser);
font_browser->show();}
                    xywh {314 341 86 25}
                  }
                  Fl_Button btnDXalt_color {
                    label {Alt Color}
                    callback {choose_color(progdefaults.DXalt_color);

o->labelcolor(progdefaults.DXalt_color);
o->redraw_label();

brws_tcpip_stream->setFontColor(progdefaults.DXalt_color, FTextBase::XMIT);
brws_tcpip_stream->redraw();

progdefaults.changed = true;}
                    tooltip {Color for outgoing telnet text} xywh {406 340 86 25}
                    code0 {o->labelcolor(progdefaults.DXalt_color);}
                  }
                  Fl_Button btnDXdefault_colors_font {
                    label Default
                    callback {progdefaults.DX_Color.R = 255;
progdefaults.DX_Color.G = 255;
progdefaults.DX_Color.B = 255;

progdefaults.DXfontnbr = FL_COURIER;
progdefaults.DXfontsize = 14;
progdefaults.DXfontcolor = FL_BLACK;
progdefaults.DXalt_color = fl_rgb_color(200, 0, 0);
btnDXalt_color->labelcolor(progdefaults.DXalt_color);
btnDXalt_color->redraw_label();

brws_tcpip_stream->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_tcpip_stream->setFont(progdefaults.DXfontnbr);
brws_tcpip_stream->setFontSize(progdefaults.DXfontsize);
brws_tcpip_stream->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_tcpip_stream->setFontColor(progdefaults.DXalt_color, FTextBase::XMIT);
brws_tcpip_stream->redraw();

ed_telnet_cmds->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
ed_telnet_cmds->setFont(progdefaults.DXfontnbr);
ed_telnet_cmds->setFontSize(progdefaults.DXfontsize);
ed_telnet_cmds->setFontColor(progdefaults.DXfontcolor);
ed_telnet_cmds->redraw();

brws_dxc_help->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_dxc_help->setFont(progdefaults.DXfontnbr);
brws_dxc_help->setFontSize(progdefaults.DXfontsize);
brws_dxc_help->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();

StreamText->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
StreamText->textcolor(progdefaults.DXfontcolor);
StreamText->redraw();

dxcluster_hosts_load();

font_browser->hide();

progdefaults.changed = true;}
                    xywh {500 340 86 25}
                  }
                }
              }
              Fl_Group {} {
                label F_keys
                xywh {0 75 600 315} hide
              } {
                Fl_Check_Button btnUseGroupColors {
                  label {Use colored buttons}
                  callback {progdefaults.useGroupColors = o->value();
    colorize_macros();
    progdefaults.changed = true;}
                  xywh {135 107 165 21} down_box DOWN_BOX
                  code0 {btnUseGroupColors->value(progdefaults.useGroupColors);}
                }
                Fl_Button btnGroup1 {
                  label {Group 1}
                  callback {uchar r, g, b;
    r = progdefaults.btnGroup1.R;
    g = progdefaults.btnGroup1.G;
    b = progdefaults.btnGroup1.B;

    if (fl_color_chooser("Group 1", r, g, b) == 0)
        return;
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();

    progdefaults.changed = true;}
                  tooltip {Background color for Function key group 1} xywh {103 155 90 30}
                  code0 {btnGroup1->color(fl_rgb_color(progdefaults.btnGroup1.R, progdefaults.btnGroup1.G,progdefaults.btnGroup1.B));}
                  code1 {btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);}
                }
                Fl_Button btnGroup2 {
                  label {Group 2}
                  callback {uchar r, g, b;
    r = progdefaults.btnGroup2.R;
    g = progdefaults.btnGroup2.G;
    b = progdefaults.btnGroup2.B;

    if (fl_color_chooser("Group 2", r, g, b) == 0)
        return;
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();

    progdefaults.changed = true;}
                  tooltip {Background color for Function key group 2} xywh {205 155 90 30}
                  code0 {btnGroup2->color(fl_rgb_color(progdefaults.btnGroup2.R, progdefaults.btnGroup2.G,progdefaults.btnGroup2.B));}
                  code1 {btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);}
                }
                Fl_Button btnGroup3 {
                  label {Group 3}
                  callback {uchar r, g, b;
    r = progdefaults.btnGroup3.R;
    g = progdefaults.btnGroup3.G;
    b = progdefaults.btnGroup3.B;

    if (fl_color_chooser("Group 3", r, g, b) == 0)
        return;
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;
    o->color(fl_rgb_color(r,g,b));

    colorize_macros();
    progdefaults.changed = true;}
                  tooltip {Background color for Function key group 3} xywh {307 155 90 30}
                  code0 {btnGroup3->color(fl_rgb_color(progdefaults.btnGroup3.R, progdefaults.btnGroup3.G,progdefaults.btnGroup3.B));}
                  code1 {btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);}
                }
                Fl_Button btnFkeyDEfaults {
                  label Defaults
                  callback {uchar r, g, b;
    Fl_Color clr;

    r = 80; g = 144; b = 144;
    clr = fl_rgb_color(r,g,b);
     btnGroup1->color(clr);
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;

    r = 144; g = 80; b = 80;
    clr = fl_rgb_color(r,g,b);
    btnGroup2->color(clr);
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;

    r = 80; g = 80; b = 144;
    clr = fl_rgb_color(r,g,b);
    btnGroup3->color(clr);
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;

    progdefaults.MacroBtnFontcolor = FL_BLACK;
    progdefaults.MacroBtnFontnbr = FL_HELVETICA;
    progdefaults.MacroBtnFontsize = 12;

    btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup1->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup2->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup3->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup1->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup2->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup3->labelsize(progdefaults.MacroBtnFontsize);

    btnGroup1->redraw_label();
    btnGroup2->redraw_label();
    btnGroup3->redraw_label();

    colorize_macros();

progdefaults.changed = true;}
                  xywh {410 155 90 30}
                }
                Fl_Button btnMacroBtnFont {
                  label {Font/Color}
                  callback {font_browser->fontNumber(progdefaults.MacroBtnFontnbr);
    font_browser->fontSize(progdefaults.MacroBtnFontsize);
    font_browser->fontColor(progdefaults.MacroBtnFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbMacroBtnFontBrowser);
font_browser->show();}
                  xywh {307 102 90 30}
                }
              }
              Fl_Group {} {
                label Tabs open
                xywh {0 75 600 315} hide
              } {
                Fl_Button btnTabColor {
                  label {Tab Color}
                  callback {progdefaults.TabsColor = fl_show_colormap(progdefaults.TabsColor);
setTabColors();
LOGBOOK_colors_font();
progdefaults.changed = true;}
                  xywh {200 113 75 21}
                }
                Fl_Button btnTabDefaultColor {
                  label System
                  callback {progdefaults.TabsColor = FL_BACKGROUND2_COLOR;
setTabColors();
LOGBOOK_colors_font();
progdefaults.changed = true;}
                  xywh {330 113 75 21}
                }
              }
              Fl_Group {} {
                label Buttons open
                xywh {0 75 600 315}
              } {
                Fl_Button btnSpotColor {
                  label Spot
                  callback {progdefaults.SpotColor = fl_show_colormap(progdefaults.SpotColor);
spotcolor->color(progdefaults.SpotColor);
spotcolor->redraw();
spot_selection_color();
progdefaults.changed = true;}
                  xywh {139 121 85 21}
                }
                Fl_Button btnRevColor {
                  label Rev
                  callback {progdefaults.RevColor = fl_show_colormap(progdefaults.RevColor);
revcolor->color(progdefaults.RevColor);
revcolor->redraw();
rev_selection_color();
progdefaults.changed = true;}
                  xywh {139 157 85 21}
                }
                Fl_Button btnTuneColor {
                  label Tune
                  callback {progdefaults.TuneColor = fl_show_colormap(progdefaults.TuneColor);
tunecolor->color(progdefaults.TuneColor);
tunecolor->redraw();
tune_selection_color();
progdefaults.changed = true;}
                  xywh {139 194 85 21}
                }
                Fl_Button btnRxIDColor {
                  label {RxID nar}
                  callback {progdefaults.RxIDColor = fl_show_colormap(progdefaults.RxIDColor);
rxidcolor->color(progdefaults.RxIDColor);
rxidcolor->redraw();
rxid_selection_color();
progdefaults.changed = true;

Fl_Color clr = progdefaults.rsidWideSearch ? progdefaults.RxIDwideColor : progdefaults.RxIDColor;
btnRSID->selection_color(clr);
btnRSID->redraw();}
                  xywh {139 229 85 21}
                }
                Fl_Button btnLkColor {
                  label Lk
                  callback {progdefaults.LkColor = fl_show_colormap(progdefaults.LkColor);
lockcolor->color(progdefaults.LkColor);
lockcolor->redraw();
xmtlock_selection_color();
progdefaults.changed = true;}
                  xywh {274 121 85 21}
                }
                Fl_Button btnSql1Color {
                  label {SQL-1}
                  callback {progdefaults.Sql1Color = fl_show_colormap(progdefaults.Sql1Color);
sql1color->color(progdefaults.Sql1Color);
sql1color->redraw();
sql_selection_color();
progdefaults.changed = true;}
                  xywh {275 157 85 21}
                }
                Fl_Button btnXmtColor {
                  label {T/R}
                  callback {progdefaults.XmtColor = fl_show_colormap(progdefaults.XmtColor);
xmtcolor->color(progdefaults.XmtColor);
xmtcolor->redraw();
xmtrcv_selection_color();
progdefaults.changed = true;}
                  xywh {274 194 85 20}
                }
                Fl_Button btnRxIDwideColor {
                  label {RxID wide}
                  callback {progdefaults.RxIDwideColor = fl_show_colormap(progdefaults.RxIDwideColor);
rxidcolorwide->color(progdefaults.RxIDwideColor);
rxidcolorwide->redraw();
rxid_selection_color();
progdefaults.changed = true;

Fl_Color clr = progdefaults.rsidWideSearch ? progdefaults.RxIDwideColor : progdefaults.RxIDColor;
btnRSID->selection_color(clr);
btnRSID->redraw();}
                  xywh {274 229 85 21}
                }
                Fl_Button btnAfcColor {
                  label AFC
                  callback {progdefaults.AfcColor = fl_show_colormap(progdefaults.AfcColor);
afccolor->color(progdefaults.AfcColor);
afccolor->redraw();
afc_selection_color();
progdefaults.changed = true;}
                  xywh {410 121 85 21}
                }
                Fl_Button btnSql2Color {
                  label {SQL-2}
                  callback {progdefaults.Sql2Color = fl_show_colormap(progdefaults.Sql2Color);
sql2color->color(progdefaults.Sql2Color);
sql2color->redraw();
sql_selection_color();
progdefaults.changed = true;}
                  xywh {410 157 85 20}
                }
                Fl_Button btnTxIDColor {
                  label TxID
                  callback {progdefaults.TxIDColor = fl_show_colormap(progdefaults.TxIDColor);
txidcolor->color(progdefaults.TxIDColor);
txidcolor->redraw();
txid_selection_color();
progdefaults.changed = true;

btnTxRSID->selection_color(progdefaults.TxIDColor);
btnTxRSID->redraw();}
                  xywh {409 229 85 20}
                }
                Fl_Box spotcolor {
                  xywh {115 122 18 19} box THIN_DOWN_BOX color 3
                  code0 {o->color(progdefaults.SpotColor);}
                }
                Fl_Box revcolor {
                  xywh {115 158 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.RevColor);}
                }
                Fl_Box tunecolor {
                  xywh {115 195 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.TuneColor);}
                }
                Fl_Box rxidcolor {
                  xywh {115 230 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.RxIDColor);}
                }
                Fl_Box lockcolor {
                  xywh {250 122 18 19} box THIN_DOWN_BOX color 3
                  code0 {o->color(progdefaults.LkColor);}
                }
                Fl_Box sql1color {
                  xywh {250 158 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.Sql1Color);}
                }
                Fl_Box rxidcolorwide {
                  xywh {250 230 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.RxIDwideColor);}
                }
                Fl_Box xmtcolor {
                  xywh {250 195 18 18} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.XmtColor);}
                }
                Fl_Box afccolor {
                  xywh {385 122 18 19} box THIN_DOWN_BOX color 3
                  code0 {o->color(progdefaults.AfcColor);}
                }
                Fl_Box sql2color {
                  xywh {385 158 18 18} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.Sql2Color);}
                }
                Fl_Box txidcolor {
                  xywh {385 230 18 18} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.TxIDColor);}
                }
                Fl_Box {} {
                  label {Lighted button enabled colors}
                  xywh {195 310 220 20} align 21
                }
                Fl_Button btn_default_btn_color {
                  label {All Others}
                  callback {progdefaults.default_btn_color = fl_show_colormap(progdefaults.default_btn_color);
default_btn_color->color(progdefaults.default_btn_color);
default_btn_color->redraw();
set_default_btn_color();
progdefaults.changed = true;}
                  xywh {274 264 85 21}
                }
                Fl_Box default_btn_color {
                  xywh {250 264 18 19} box THIN_DOWN_BOX
                  code0 {o->color(progdefaults.default_btn_color);}
                }
              }
              Fl_Group {} {
                label SigLvl
                xywh {0 75 600 315} hide
              } {
                Fl_Button btnLowSignal {
                  label Low
                  callback {progdefaults.LowSignal = fl_show_colormap(progdefaults.LowSignal);
lowcolor->color(progdefaults.LowSignal);
lowcolor->redraw();
progdefaults.changed = true;}
                  xywh {210 142 70 21}
                }
                Fl_Box lowcolor {
                  xywh {189 142 21 21} box DIAMOND_DOWN_BOX color 0
                  code0 {o->color(progdefaults.LowSignal);}
                }
                Fl_Button btnHighSignal {
                  label High
                  callback {progdefaults.HighSignal = fl_show_colormap(progdefaults.HighSignal);
highcolor->color(progdefaults.HighSignal);
highcolor->redraw();
progdefaults.changed = true;}
                  xywh {210 180 70 21}
                }
                Fl_Box highcolor {
                  xywh {189 180 21 21} box DIAMOND_DOWN_BOX color 3
                  code0 {o->color(progdefaults.HighSignal);}
                }
                Fl_Button btnNormalSignal {
                  label Normal
                  callback {progdefaults.NormSignal = fl_show_colormap(progdefaults.NormSignal);
normalcolor->color(progdefaults.NormSignal);
normalcolor->redraw();
progdefaults.changed = true;}
                  xywh {333 142 70 21}
                }
                Fl_Box normalcolor {
                  xywh {312 141 21 21} box DIAMOND_DOWN_BOX color 2
                  code0 {o->color(progdefaults.NormSignal);}
                }
                Fl_Button btnOverSignal {
                  label Over
                  callback {progdefaults.OverSignal = fl_show_colormap(progdefaults.OverSignal);
overcolor->color(progdefaults.OverSignal);
overcolor->redraw();
progdefaults.changed = true;}
                  xywh {333 180 70 21}
                }
                Fl_Box overcolor {
                  xywh {312 180 21 21} box DIAMOND_DOWN_BOX color 1
                  code0 {o->color(progdefaults.OverSignal);}
                }
                Fl_Box {} {
                  label {Signal Level Colors}
                  xywh {135 110 316 21}
                }
              }
            }
          }
          Fl_Group tab_touch {
            label Touch
            xywh {0 50 600 340} hide
          } {
            Fl_Box {} {
              label {Note:
These configuration items are useful for but not unique to using fldigi on a
touch screen device such as a tablet.}
              xywh {15 70 570 52} align 20
            }
            Fl_Group {} {
              label {Arrow Key Control of Frequency Entry} open
              xywh {15 145 570 102} box ENGRAVED_BOX align 21
            } {
              Fl_Box {} {
                label {Right/Left = 1 x LSD
Up/Dn= 10 x LSD
Shift - Right/Left = 100 x LSD
Shift - Up/Dn = 1000 x LSD}
                xywh {30 170 290 74} align 16
              }
              Fl_Choice sel_lsd {
                label {Right/Left
Select Least Signficant Digit}
                callback {progdefaults.sel_lsd = o->value();
set_freq_control_lsd();
progdefaults.changed = true;} open
                xywh {420 206 90 24} down_box BORDER_BOX align 1
                code0 {o->add("1 Hz|10 Hz|100 Hz|1 kHz");}
                code1 {o->value(progdefaults.sel_lsd);}
              } {}
            }
            Fl_Group {} {
              label {Rx / Tx Panels} open
              xywh {15 256 570 64} box ENGRAVED_BOX align 21
            } {
              Fl_Check_Button btn_rxtx_swap {
                label {Tx above Rx}
                callback {progdefaults.rxtx_swap = o->value();
progdefaults.changed = true;
UI_select();}
                tooltip {Enable to put Tx panel above Rx panel} xywh {145 276 116 30} down_box DOWN_BOX
                code0 {o->value(progdefaults.rxtx_swap);}
              }
            }
          }
        }
      }
      Fl_Group tabWaterfall {
        label Waterfall open
        xywh {0 25 600 365} hide
      } {
        Fl_Tabs tabsWaterfall {open
          xywh {0 25 600 365} color 50 selection_color 50
        } {
          Fl_Group {} {
            label Display open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Colors and cursors} open
              xywh {50 63 496 190} box ENGRAVED_FRAME align 21
            } {
              Fl_Button WF_Palette {
                label aa
                callback {progdefaults.changed = true;}
                xywh {60 99 380 24} box DOWN_BOX color 0 labelsize 12 align 5
                code0 {\#include "colorbox.h"}
                code1 {o->label(progdefaults.PaletteName.c_str());}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class colorbox
              }
              Fl_Button {btnColor[0]} {
                callback {selectColor(0);
progdefaults.changed = true;}
                tooltip {Change color} xywh {60 125 20 24}
              }
              Fl_Button {btnColor[1]} {
                callback {selectColor(1);
progdefaults.changed = true;}
                tooltip {Change color} xywh {105 125 20 24}
              }
              Fl_Button {btnColor[2]} {
                callback {selectColor(2);
progdefaults.changed = true;}
                tooltip {Change color} xywh {150 125 20 24}
              }
              Fl_Button {btnColor[3]} {
                callback {selectColor(3);
progdefaults.changed = true;}
                tooltip {Change color} xywh {195 125 20 24}
              }
              Fl_Button {btnColor[4]} {
                callback {selectColor(4);
progdefaults.changed = true;}
                tooltip {Change color} xywh {240 125 20 24}
              }
              Fl_Button {btnColor[5]} {
                callback {selectColor(5);
progdefaults.changed = true;}
                tooltip {Change color} xywh {285 125 20 24}
              }
              Fl_Button {btnColor[6]} {
                callback {selectColor(6);
progdefaults.changed = true;}
                tooltip {Change color} xywh {330 125 20 24}
              }
              Fl_Button {btnColor[7]} {
                callback {selectColor(7);
progdefaults.changed = true;}
                tooltip {Change color} xywh {375 125 20 24}
              }
              Fl_Button {btnColor[8]} {
                callback {selectColor(8);
progdefaults.changed = true;}
                tooltip {Change color} xywh {420 125 20 24}
              }
              Fl_Button btnLoadPalette {
                label {Load...}
                callback {loadPalette();
progdefaults.changed = true;}
                tooltip {Load a new palette} xywh {450 99 70 24}
                code0 {\#include "colorbox.h"}
              }
              Fl_Button btnSavePalette {
                label {Save...}
                callback {savePalette();}
                tooltip {Save this palette} xywh {450 125 70 24}
                code0 {\#include "colorbox.h"}
              }
              Fl_Group {} {
                label Bandwidth open
                xywh {59 153 113 96} box ENGRAVED_FRAME align 21
              } {
                Fl_Check_Button btnUseCursorLines {
                  label ON
                  callback {progdefaults.UseCursorLines = o->value();
if (o->value())
    btnCursorBWcolor->activate();
else
    btnCursorBWcolor->deactivate();
progdefaults.changed = true;}
                  tooltip {Show cursor with bandwidth lines} xywh {61 173 56 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseCursorLines);}
                }
                Fl_Button btnCursorBWcolor {
                  label Color
                  callback {if (fl_color_chooser("Cursor BW Lines",
  progdefaults.cursorLineRGBI.R,
  progdefaults.cursorLineRGBI.G,
  progdefaults.cursorLineRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
o->redraw();
progdefaults.changed = true;
}}
                  tooltip {Change color} xywh {61 196 20 20} color 3 align 8
                  code0 {\#include <FL/Fl_Color_Chooser.H>}
                  code1 {o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));}
                }
                Fl_Check_Button btnUseWideCursor {
                  label Wide
                  callback {progdefaults.UseWideCursor = o->value();
progdefaults.changed = true;}
                  tooltip {Show bandwidth tracks on waterfall} xywh {61 219 62 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseWideCursor);}
                }
              }
              Fl_Group {} {
                label {Center line} open
                xywh {183 153 113 96} box ENGRAVED_FRAME align 21
              } {
                Fl_Check_Button btnUseCursorCenterLine {
                  label ON
                  callback {progdefaults.UseCursorCenterLine = o->value();
progdefaults.changed = true;}
                  tooltip {Show cursor with center line} xywh {189 173 48 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseCursorCenterLine);}
                }
                Fl_Button btnCursorCenterLineColor {
                  label Color
                  callback {if (fl_color_chooser("Cursor Center Line",
  progdefaults.cursorCenterRGBI.R,
  progdefaults.cursorCenterRGBI.G,
  progdefaults.cursorCenterRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
o->redraw();
progdefaults.changed = true;
}}
                  tooltip {Change color} xywh {189 196 20 20} color 7 align 8
                  code0 {o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));}
                }
                Fl_Check_Button btnUseWideCenter {
                  label Wide
                  callback {progdefaults.UseWideCenter = o->value();
progdefaults.changed = true;}
                  tooltip {Show bandwidth tracks on waterfall} xywh {189 221 69 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseWideCenter);}
                }
              }
              Fl_Group {} {
                label {Signal tracks} open
                xywh {306 153 113 96} box ENGRAVED_FRAME align 21
              } {
                Fl_Check_Button btnUseBWTracks {
                  label ON
                  callback {progdefaults.UseBWTracks = o->value();
progdefaults.changed = true;}
                  tooltip {Show bandwidth tracks on waterfall} xywh {308 172 56 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseBWTracks);}
                }
                Fl_Button btnBwTracksColor {
                  label Color
                  callback {if (fl_color_chooser("Track Lines",
  progdefaults.bwTrackRGBI.R,
  progdefaults.bwTrackRGBI.G,
  progdefaults.bwTrackRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
                  tooltip {Change color} xywh {308 195 20 20} color 1 align 8
                  code0 {o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));}
                }
                Fl_Check_Button btnUseWideTracks {
                  label Wide
                  callback {progdefaults.UseWideTracks = o->value();
progdefaults.changed = true;}
                  tooltip {Show bandwidth tracks on waterfall} xywh {308 219 74 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.UseWideTracks);}
                }
              }
              Fl_Group {} {
                label Notch open
                xywh {426 153 113 96} box ENGRAVED_FRAME align 21
              } {
                Fl_Button btnNotchColor {
                  label Color
                  callback {if (fl_color_chooser("Notch Indicator",
  progdefaults.notchRGBI.R,
  progdefaults.notchRGBI.G,
  progdefaults.notchRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
                  tooltip {Change color} xywh {428 195 20 20} color 1 align 8
                  code0 {o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));}
                }
              }
            }
            Fl_Group {} {
              label {Frequency scale} open
              xywh {50 254 496 55} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkShowAudioScale {
                label {Always show audio frequencies}
                callback {progdefaults.wf_audioscale = o->value();
progdefaults.changed = true;}
                tooltip {Audio or RF frequencies on waterfall scale} xywh {60 277 241 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.wf_audioscale);}
              }
              Fl_Button btnWaterfallFont {
                label {Font...}
                callback {font_browser->fontNumber(progdefaults.WaterfallFontnbr);
font_browser->fontSize(progdefaults.WaterfallFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback((Fl_Callback*)cbWaterfallFontBrowser);
font_browser->show();}
                tooltip {Select waterfall scale font} xywh {360 277 71 24}
              }
            }
            Fl_Group {} {
              label {Transmit signal} open
              xywh {50 310 496 65} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnViewXmtSignal {
                label {Monitor transmitted signal}
                callback {progdefaults.viewXmtSignal=o->value();
progdefaults.changed = true;}
                tooltip {Show transmit signal on waterfall} xywh {60 336 208 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.viewXmtSignal);}
              }
              Fl_Value_Slider valTxMonitorLevel {
                label {Signal level}
                callback {progdefaults.TxMonitorLevel = o->value();
progdefaults.changed = true;}
                tooltip {Set level for good viewing} xywh {318 336 203 20} type Horizontal align 1 step 0.05 value 0.5 textsize 14
                code0 {o->value(progdefaults.TxMonitorLevel);}
                code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
            }
          }
          Fl_Group {} {
            label {FFT Processing} open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 71 490 135} box ENGRAVED_FRAME
            } {
              Fl_Counter cntLowFreqCutoff {
                label {Lower limit}
                callback {progdefaults.LowFreqCutoff=(int)(o->value());
progdefaults.changed = true;
setwfrange();}
                tooltip {Low frequency limit in Hz} xywh {100 89 70 22} type Simple align 8 minimum 0 maximum 500 step 50 value 300
                code0 {o->value(progdefaults.LowFreqCutoff);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Check_Button btnWFaveraging {
                label {FFT averaging}
                callback {progdefaults.WFaveraging = o->value();
progdefaults.changed = true;}
                tooltip {Use averaging to decrease waterfall noise} xywh {100 125 120 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.WFaveraging);}
              }
              Fl_Group listboxFFTPrefilter {
                label {FFT prefilter window function}
                callback {progdefaults.wfPreFilter = o->index();
progdefaults.changed = true;} open
                tooltip {Select the type of FFT prefilter} xywh {100 155 120 24} box DOWN_BOX color 7 align 8
                code0 {listboxFFTPrefilter->add(_("Rectangular")); listboxFFTPrefilter->add("Blackman");}
                code1 {listboxFFTPrefilter->add("Hamming"); listboxFFTPrefilter->add("Hanning");}
                code2 {listboxFFTPrefilter->add(_("Triangular"));}
                code3 {listboxFFTPrefilter->index(progdefaults.wfPreFilter);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Counter cntrWfwidth {
                label {Upper limit}
                callback {progdefaults.HighFreqCutoff = (int)o->value();
progdefaults.changed = true;
setwfrange();}
                tooltip {High frequency limit in Hz} xywh {323 89 95 22} type Simple align 8 minimum 2000 maximum 4000 step 100 value 3000
                code0 {o->value(progdefaults.HighFreqCutoff);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter wf_latency {
                label Latency
                callback {progdefaults.wf_latency = (int)o->value();
progdefaults.changed = true;}
                tooltip {Signal averaging over time
0 - least
4 - greatest} xywh {323 124 95 22} type Simple align 8 minimum 1 maximum 16 step 1 value 8
                code0 {o->value(progdefaults.wf_latency);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
            }
            Fl_Group {} {open
              tooltip {Show me more or less waterfall} xywh {55 212 490 73} box ENGRAVED_FRAME align 17
            } {
              Fl_Counter cntr_drop_speed {
                label {Slow drop rate}
                callback {progdefaults.drop_speed=(int)o->value();
progdefaults.changed=true;}
                tooltip {Normal drop speed / value} xywh {100 234 95 22} type Simple align 11 minimum 4 maximum 32 step 2 value 4
                code0 {o->value(progdefaults.drop_speed);}
              }
            }
            Fl_Group {} {
              label {Changes take effect on next program startup} open
              tooltip {Show me more or less waterfall} xywh {55 292 490 73} box ENGRAVED_FRAME align 17
            } {
              Fl_Counter cntrWfheight {
                label {Waterfall height in pixels}
                callback {progdefaults.wfheight = (int)o->value();
progdefaults.changed = true;}
                tooltip {CPU usage increases with waterfall height} xywh {100 322 120 22} align 8 minimum 100 maximum 500 step 5 value 120
                code0 {o->value(progdefaults.wfheight);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                code2 {o->lstep(50);}
                class Fl_Counter2
              }
            }
          }
          Fl_Group {} {
            label Mouse open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {10 60 580 170} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnWaterfallHistoryDefault {
                label {Left or right click always replays audio history}
                callback {progdefaults.WaterfallHistoryDefault = o->value();
progdefaults.changed = true;}
                tooltip {Replay trackline audio} xywh {65 75 340 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.WaterfallHistoryDefault);}
              }
              Fl_Check_Button btnWaterfallQSY {
                label {Dragging on the waterfall scale changes frequency}
                callback {progdefaults.WaterfallQSY = o->value();
progdefaults.changed = true;}
                tooltip {Enable drag cursor on waterfall scale} xywh {65 105 380 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.WaterfallQSY);}
              }
              Fl_Check_Button btnWaterfallClickInsert {
                label {Insert text on single left click}
                callback {progdefaults.WaterfallClickInsert = o->value();
if (progdefaults.WaterfallClickInsert)
    inpWaterfallClickText->activate();
else
    inpWaterfallClickText->deactivate();
progdefaults.changed = true;}
                tooltip {Insert special text in Rx panel
when waterfall clicked} xywh {65 147 225 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.WaterfallClickInsert);}
              }
              Fl_Input inpWaterfallClickText {
                callback {progdefaults.WaterfallClickText = o->value();
progdefaults.changed = true;}
                tooltip {The string <FREQ> is replaced with
the current modem and frequency} xywh {351 135 180 50} align 8
                class Fl_Input2
              }
              Fl_Group listboxWaterfallWheelAction {
                label {Wheel action}
                callback {progdefaults.WaterfallWheelAction = o->index();
progdefaults.changed = true;} open
                tooltip {Select how the mouse wheel
behaves inside the waterfall} xywh {65 188 150 22} box DOWN_BOX color 7 align 8
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
            }
          }
          Fl_Group {} {
            label Spectrum open
            xywh {0 50 600 340}
          } {
            Fl_Group {} {
              label {Spectrum Scope / Waterfall interaction} open
              xywh {10 65 580 150} box ENGRAVED_BOX align 17
            } {
              Fl_Check_Button btnWFspectrum_center {
                label {left click transfers frequency to scope center frequency}
                callback {progdefaults.wf_spectrum_center = o->value();
progdefaults.changed = true;}
                tooltip {left click on WF recenters spectrum scope} xywh {75 107 365 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.wf_spectrum_center);}
              }
              Fl_Check_Button btnWFspectrum_dbvals {
                label {use waterfall range/limit values}
                callback {progdefaults.wf_spectrum_dbvals = o->value();
progdefaults.changed = true;}
                tooltip {values left/below waterfall} xywh {75 138 221 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.wf_spectrum_dbvals);}
              }
              Fl_Counter cntr_spectrum_freq_scale {
                label {freq scale = N * modem bandwidth}
                callback {progdefaults.wf_spectrum_scale_factor = o->value();
progdefaults.changed = true;}
                xywh {75 170 75 20} type Simple align 8 minimum 1 maximum 10 step 1 value 5
                code0 {o->value(progdefaults.wf_spectrum_scale_factor);}
              }
              Fl_Check_Button btn_spectrum_modem_scale {
                label use
                callback {progdefaults.wf_spectrum_modem_scale = o->value();
progdefaults.changed = true;}
                tooltip {scale spectrum display linked to modem bandwidth} xywh {385 170 55 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.wf_spectrum_modem_scale);}
              }
            }
          }
        }
      }
      Fl_Group tabModems {
        label Modems open
        xywh {0 25 609 365} hide
      } {
        Fl_Tabs tabsModems {open
          xywh {0 25 609 365} selection_color 50 align 9
        } {
          Fl_Group tabCW {
            label CW open
            xywh {0 50 600 340}
          } {
            Fl_Tabs tabsCW {open
              xywh {0 50 600 340} selection_color 50
            } {
              Fl_Group tabsCW_general {
                label General
                xywh {0 75 600 315} align 5
              } {
                Fl_Group {} {
                  label Receive open
                  xywh {35 85 530 130} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnCWuseSOMdecoding {
                    label {SOM decoding}
                    callback {progdefaults.CWuseSOMdecoding = o->value();
progdefaults.changed = true;}
                    tooltip {Self Organizing Mapping} xywh {96 108 125 20} down_box DOWN_BOX value 1
                    code0 {o->value(progdefaults.CWuseSOMdecoding);}
                  }
                  Fl_Check_Button btnCWrcvTrack {
                    label Tracking
                    callback {progdefaults.CWtrack = o->value();
progdefaults.changed = true;}
                    tooltip {Automatic Rx speed tracking} xywh {250 108 80 20} down_box DOWN_BOX value 1
                    code0 {o->value(progdefaults.CWtrack);}
                  }
                  Fl_Value_Slider sldrCWbandwidth {
                    label {Filter bandwidth}
                    callback {progdefaults.CWbandwidth = (int)o->value();
progdefaults.changed = true;}
                    tooltip {CW dsp filter bandwidth} xywh {50 149 250 20} type Horizontal align 5 minimum 10 maximum 400 step 1 value 66 textsize 14
                    code0 {o->value(progdefaults.CWbandwidth);}
                    code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                    class Fl_Value_Slider2
                  }
                  Fl_Check_Button btnCWmfilt {
                    label {Matched Filt'}
                    callback {progdefaults.CWmfilt = o->value();
progdefaults.changed = true;}
                    tooltip {Matched Filter bandwidth} xywh {303 149 80 20} down_box DOWN_BOX value 1
                    code0 {o->value(progdefaults.CWmfilt);}
                  }
                  Fl_Value_Output valCWrcvWPM {
                    label {Rx WPM}
                    callback {progdefaults.changed = true;}
                    xywh {50 188 35 20} color 7 align 5
                  }
                  Fl_Progress prgsCWrcvWPM {
                    tooltip {Tracked CW speed in WPM} xywh {86 188 214 20} color 49 selection_color 15 align 0
                  }
                  Fl_Counter cntLower {
                    label Lower
                    callback {progdefaults.CWlower = o->value();
progdefaults.changed = true;}
                    tooltip {Detector low threshold} xywh {209 108 65 20} type Simple align 1 minimum 0.01 maximum 0.99 step 0.01 value 0.45 hide
                    code0 {o->value(progdefaults.CWlower);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntUpper {
                    label Upper
                    callback {progdefaults.CWupper = o->value();
progdefaults.changed = true;}
                    tooltip {Detector high threshold} xywh {302 108 65 20} type Simple align 1 minimum 0.01 maximum 0.99 step 0.01 value 0.55 hide
                    code0 {o->value(progdefaults.CWupper);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntCWrange {
                    label Range
                    callback {progdefaults.CWrange = (int)o->value();
progdefaults.changed = true;}
                    tooltip {Range +/- wpm} xywh {303 187 65 20} type Simple align 8 minimum 5 maximum 25 step 1 value 10
                    code0 {o->value(progdefaults.CWrange);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Group {} {
                    label Squelch open
                    xywh {425 110 135 95} box ENGRAVED_BOX align 17
                  } {
                    Fl_Choice mnu_cwrx_attack {
                      label Attack
                      callback {progdefaults.cwrx_attack = o->value();
progdefaults.changed = true;} open
                      xywh {480 140 72 20} down_box BORDER_BOX
                      code0 {o->add("Slow|Med|Fast");}
                      code1 {o->value(progdefaults.cwrx_attack);}
                    } {}
                    Fl_Choice mnu_cwrx_decay {
                      label Decay
                      callback {progdefaults.cwrx_decay = o->value();
progdefaults.changed = true;} open
                      xywh {480 175 72 20} down_box BORDER_BOX
                      code0 {o->add("Slow|Med|Fast");}
                      code1 {o->value(progdefaults.cwrx_decay);}
                    } {}
                  }
                }
                Fl_Group {} {
                  label Transmit open
                  xywh {35 215 530 150} box ENGRAVED_FRAME align 21
                } {
                  Fl_Value_Slider sldrCWxmtWPM {
                    label {TX WPM}
                    callback {progdefaults.CWspeed = (int)o->value();
cntCW_WPM->value(progdefaults.CWspeed);
cntr_nanoCW_WPM->value(progdefaults.CWspeed);
progdefaults.changed = true;
sync_cw_parameters();}
                    tooltip {My transmit CW WPM} xywh {50 240 440 20} type Horizontal align 8 minimum 5 maximum 100 step 1 value 20 textsize 14
                    code0 {o->value(progdefaults.CWspeed);}
                    code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                    class Fl_Value_Slider2
                  }
                  Fl_Counter cntCWdefWPM {
                    label Default
                    callback {progdefaults.defCWspeed = (int)o->value();
progdefaults.changed = true;}
                    tooltip {The default CW speed} xywh {91 281 64 20} type Simple align 1 minimum 5 maximum 200 step 1 value 18
                    code0 {o->value(progdefaults.defCWspeed);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntCWlowerlimit {
                    label {Lower limit}
                    callback {progdefaults.CWlowerlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->minimum(progdefaults.CWlowerlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWupperlimit->minimum(progdefaults.CWlowerlimit+20);
cntCW_WPM->minimum(progdefaults.CWlowerlimit);}
                    tooltip {No slower than this} xywh {245 281 65 20} type Simple align 1 minimum 5 maximum 20 step 5 value 10
                    code0 {o->value(progdefaults.CWlowerlimit);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                  }
                  Fl_Counter cntCWupperlimit {
                    label {Upper limit}
                    callback {progdefaults.CWupperlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->maximum(progdefaults.CWupperlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWlowerlimit->maximum(progdefaults.CWupperlimit-20);
cntCW_WPM->maximum(progdefaults.CWupperlimit);}
                    tooltip {No faster than this} xywh {401 281 65 20} type Simple align 1 minimum 25 maximum 200 step 5 value 100
                    code0 {o->value(progdefaults.CWupperlimit);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                  }
                  Fl_Value_Slider sldrCWfarnsworth {
                    label {F-WPM}
                    callback {progdefaults.CWfarnsworth = (int)o->value();
progdefaults.changed = true;}
                    tooltip {My transmit CW WPM} xywh {50 335 440 20} type Horizontal align 8 minimum 5 maximum 100 step 1 value 20 textsize 14
                    code0 {o->value(progdefaults.CWfarnsworth);}
                    code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                    class Fl_Value_Slider2
                  }
                  Fl_Check_Button btnCWusefarnsworth {
                    label {Use Farnsworth timing}
                    callback {progdefaults.CWusefarnsworth=o->value();
progdefaults.changed = true;}
                    xywh {70 312 180 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.CWusefarnsworth);}
                  }
                }
              }
              Fl_Group tabsCW_timing {
                label {Timing and QSK}
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group {} {
                  label Timing open
                  xywh {5 85 585 120} box ENGRAVED_FRAME align 21
                } {
                  Fl_Counter cntCWweight {
                    label {Weight (%)}
                    callback {progdefaults.CWweight=(int)o->value();
progdefaults.changed = true;}
                    tooltip {Dot to dot-space ratio} xywh {20 110 65 20} type Simple align 8 minimum 20 maximum 80 step 1 value 50
                    code0 {o->value(progdefaults.CWweight);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntCWdash2dot {
                    label {Dash/Dot}
                    callback {progdefaults.CWdash2dot=o->value();
cnt_nanoCWdash2dot->value(progdefaults.CWdash2dot);
progdefaults.changed = true;}
                    tooltip {Dash to dot ratio} xywh {245 110 80 20} type Simple align 8 minimum 2.5 maximum 4 value 3
                    code0 {o->value(progdefaults.CWdash2dot);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntCWrisetime {
                    label {Edge timing}
                    callback {progdefaults.CWrisetime=o->value();
progdefaults.changed = true;}
                    tooltip {Leading and Trailing edge risetimes (msec)} xywh {245 143 80 20} type Simple align 8 minimum 0 maximum 15 value 4
                    code0 {o->value(progdefaults.CWrisetime);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Group i_listboxQSKshape {
                    label {Edge shape}
                    callback {progdefaults.QSKshape = o->index();
progdefaults.changed = true;} open
                    tooltip {Hanning/Blackman - use edge timing
BPF - use BPF bandwidth} xywh {20 143 112 20} box DOWN_BOX color 7 align 8
                    code0 {o->add("Hanning|Blackman");}
                    code1 {o->index(progdefaults.QSKshape);}
                    code2 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Check_Button btnCWnarrow {
                    label {Edge decrease}
                    callback {progdefaults.CWnarrow = o->value();
progdefaults.changed = true;}
                    tooltip {Weight decreases with increasing edge timing} xywh {450 145 131 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.CWnarrow);}
                  }
                  Fl_Check_Button btnCW_bpf_on {
                    label {BPF transmit audio}
                    callback {progdefaults.CW_bpf_on = o->value();
progdefaults.changed = true;}
                    tooltip {Enable LO/HI bfp of transmit audio} xywh {20 180 167 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.CW_bpf_on);}
                  }
                  Fl_Counter cntCW_hpf {
                    label {BPF bw}
                    callback {progdefaults.CW_bpf=o->value();
progdefaults.changed = true;}
                    tooltip {Low filter cutoff} xywh {235 177 100 20} align 8 minimum 10 maximum 1000 step 1 value 100
                    code0 {o->value(progdefaults.CW_bpf);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    code2 {o->lstep(10.0);}
                    class Fl_Counter2
                  }
                }
                Fl_Group {} {
                  label QSK open
                  xywh {5 217 585 118} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnQSK {
                    label {QSK on right audio channel}
                    callback {progdefaults.QSK = o->value();
btnQSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
}}
                    tooltip {Generate square wave signal on right channel} xywh {16 245 233 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.QSK);}
                  }
                  Fl_Counter cntPreTiming {
                    label {Pre-keydown timing (ms)}
                    callback {progdefaults.CWpre=o->value();
progdefaults.changed = true;}
                    tooltip {Msec pre-keydown (+ is earlier in time)} xywh {16 275 71 20} type Simple align 8 minimum 0 maximum 20 step 0.5
                    code0 {o->value(progdefaults.CWpre);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntPostTiming {
                    label {Post-keydown timing (ms)}
                    callback {progdefaults.CWpost=o->value();
progdefaults.changed = true;}
                    tooltip {Msec post-keydown (+ is earlier in time)} xywh {16 305 71 20} type Simple align 8 minimum -20 maximum 20 step 0.5
                    code0 {o->value(progdefaults.CWpre);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Check_Button btnQSKadjust {
                    label {Send continuously}
                    callback {progdefaults.QSKadjust = o->value();}
                    tooltip {Send a continuous stream of test characters} xywh {320 275 176 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.QSKadjust);}
                  }
                  Fl_Group i_listbox_test_char {
                    label {Test char}
                    callback {progdefaults.TestChar = o->index();} open
                    tooltip {Test character for QSK adjustment} xywh {320 245 45 20} box DOWN_BOX color 7 align 8
                    code0 {extern char szTestChar[];}
                    code1 {o->add(szTestChar);}
                    code2 {o->index(progdefaults.TestChar);}
                    code3 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                }
              }
              Fl_Group tabsCW_prosigns {
                label Prosigns
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group {} {open
                  xywh {35 85 530 283} box ENGRAVED_FRAME
                } {
                  Fl_Check_Button btnCW_use_paren {
                    label {Use '(' paren not KN}
                    callback {progdefaults.CW_use_paren=o->value();
progdefaults.changed = true;}
                    xywh {161 244 68 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.CW_use_paren);}
                  }
                  Fl_Group {} {
                    label {Use these for WinKeyer
and nanoCW} open
                    xywh {362 96 182 262} box ENGRAVED_FRAME align 17
                  } {
                    Fl_Box {} {
                      label {" RR}
                      tooltip {.-..-.} xywh {422 127 59 22}
                    }
                    Fl_Box {} {
                      label {$ SX}
                      tooltip {...-..-} xywh {422 147 59 22}
                    }
                    Fl_Box {} {
                      label {' WG}
                      tooltip {.----.} xywh {422 166 59 22}
                    }
                    Fl_Box {} {
                      label {( KN}
                      tooltip {-.--.} xywh {422 185 59 22}
                    }
                    Fl_Box {} {
                      label {) KK}
                      tooltip {-.--.-} xywh {422 204 59 22}
                    }
                    Fl_Box {} {
                      label {+ AR}
                      tooltip {.-.-.} xywh {422 223 59 22}
                    }
                    Fl_Box {} {
                      label {< AR}
                      tooltip {.-.-.} xywh {422 242 59 22}
                    }
                    Fl_Box {} {
                      label {> SK}
                      tooltip {...-.-} xywh {422 261 59 22}
                    }
                    Fl_Box {} {
                      label {= BT}
                      tooltip {-...-} xywh {422 280 59 22}
                    }
                    Fl_Box {} {
                      label {- DU}
                      tooltip {-....-} xywh {422 299 59 22}
                    }
                    Fl_Box {} {
                      label {@@ AC}
                      tooltip {.--.-.} xywh {422 320 59 22}
                    }
                  }
                }
                Fl_Group {listbox_prosign[0]} {
                  label {<BT>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[0] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 102 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[0];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[1]} {
                  label {<AA>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[1] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 129 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[1];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[2]} {
                  label {<AS>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[2] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 157 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[2];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[3]} {
                  label {<AR>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[3] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 184 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[3];}
                  code2 {o->value(s);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[4]} {
                  label {<SK>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[4] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 212 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[4];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[5]} {
                  label {<KN>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[5] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 240 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[5];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[6]} {
                  label {<INT>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[6] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 267 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[6];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[7]} {
                  label {<HM>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[7] = ps[c];
progdefaults.changed = true;;} open
                  xywh {106 295 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[7];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Group {listbox_prosign[8]} {
                  label {<VE>}
                  callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[8] = ps[c];
progdefaults.changed = true;} open
                  xywh {106 323 47 22} box DOWN_BOX color 7 align 4
                  code0 {o->add(szProsigns);}
                  code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[8];}
                  code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
              }
              Fl_Group tabsCW_winkeyer {
                label WinKeyer
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group select_WK_CommPort {
                  label {Ser. Port}
                  callback {progStatus.WK_serial_port_name = o->value();
select_WKFSK_CommPort->value(progStatus.WK_serial_port_name.c_str());} open
                  tooltip {Xcvr serial port} xywh {69 85 405 23} box DOWN_BOX color 55 align 4
                  code0 {\#include "combo.h"}
                  code1 {\#include "winkeyer.h"}
                  code2 {o->value(progStatus.WK_serial_port_name.c_str());}
                  class Fl_ComboBox
                } {}
                Fl_Light_Button btn_WKCW_connect {
                  label Connect
                  callback {WKCW_connect(o->value());}
                  tooltip {Connect / Disconnect from WinKeyer} xywh {500 85 80 23}
                  code0 {o->value(progStatus.WK_online);}
                }
                Fl_Group {} {
                  label ModeReg open
                  xywh {10 191 134 171} box ENGRAVED_FRAME align 17
                } {
                  Fl_Check_Button btn_WK_swap {
                    label Swap
                    callback {WK_change_btn_swap();}
                    tooltip {Swap left/right keyer contacts} xywh {20 217 70 15} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_auto_space {
                    label {Auto Space}
                    callback {WK_change_btn_auto_space();}
                    tooltip {Enable paddle auto spacing of characters} xywh {20 247 70 15} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_ct_space {
                    label {CT space}
                    callback {WK_change_btn_ct_space();}
                    tooltip {Enable contest character spacing} xywh {20 277 70 15} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_paddledog {
                    label {Paddle Dog}
                    callback {WK_change_btn_paddledog();}
                    xywh {20 307 70 15} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_cut_zeronine {
                    label {Cut 0/9}
                    callback {WK_change_btn_cut_zeronine();}
                    tooltip {Use T/N for 0/9} xywh {20 337 70 15} down_box DOWN_BOX
                  }
                }
                Fl_Group {} {
                  label ModeReg open
                  xywh {167 191 134 171} box ENGRAVED_FRAME align 17
                } {
                  Fl_Check_Button btn_WK_paddle_echo {
                    label {Paddle echo}
                    callback {WK_change_btn_paddle_echo();}
                    tooltip {Echo paddle chars to Rx Panel} xywh {173 217 70 16} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_serial_echo {
                    label {Serial echo}
                    callback {WK_change_btn_serial_echo();}
                    xywh {173 247 70 16} down_box DOWN_BOX value 1
                  }
                  Fl_Check_Button btn_WK_sidetone_on {
                    label {Tone Keyer}
                    callback {WK_change_btn_sidetone_on();}
                    tooltip {Enable Winkeyer tone keying} xywh {173 277 103 16} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_tone_on {
                    label {Tone ON}
                    callback {WK_change_btn_tone_on();}
                    tooltip {Enable Winkeyer audio tone} xywh {173 307 87 16} down_box DOWN_BOX
                  }
                  Fl_Check_Button btn_WK_ptt_on {
                    label {PTT ON}
                    callback {WK_change_btn_ptt_on();}
                    tooltip {Enable Winkeyer PTT output} xywh {173 337 87 16} down_box DOWN_BOX
                  }
                }
                Fl_Group {} {
                  label {WPM Settings} open
                  xywh {310 191 112 192} box ENGRAVED_FRAME align 17
                } {
                  Fl_Counter cntr_WK_min_wpm {
                    label {Min WPM}
                    callback {WK_change_cntr_min_wpm();
if ((o->value() + cntr_WK_rng_wpm->value()) > 55)
  cntr_WK_rng_wpm->value(55 - o->value());}
                    tooltip {Minimum WPM setting
default = 10} xywh {331 215 64 22} type Simple minimum 10 maximum 30 step 1 value 10
                  }
                  Fl_Counter cntr_WK_rng_wpm {
                    label {Rng WPM}
                    callback {WK_change_cntr_rng_wpm();
if ((cntr_WK_min_wpm->value() + o->value()) > 55)
o->value(55 - cntr_WK_min_wpm->value());}
                    tooltip {Range WPM setting
default = 25} xywh {331 258 64 21} type Simple
                  }
                  Fl_Counter cntr_WK_farnsworth {
                    label Farsnworth
                    callback {WK_change_cntr_farnsworth();}
                    tooltip {Farnsworth keying (0 = none)
default = 0} xywh {331 300 64 22} type Simple
                  }
                  Fl_Counter cntr_WK_cmd_wpm {
                    label {Cmd WPM}
                    callback {WK_change_cntr_cmd_wpm();}
                    tooltip {WPM speed for Winkeyer Command strings
default = 18} xywh {331 343 64 22} type Simple
                  }
                }
                Fl_Group {} {
                  label {Timing/Settings} open
                  xywh {430 191 160 192} box ENGRAVED_FRAME align 17
                } {
                  Fl_Counter cntr_WK_ratio {
                    label Ratio
                    callback {WK_change_cntr_ratio();}
                    tooltip {Keying ratio
default = 3.0} xywh {442 215 64 22} type Simple
                  }
                  Fl_Counter cntr_WK_comp {
                    label Comp
                    callback {WK_change_cntr_comp();}
                    tooltip {Compensation in msec
default = 0} xywh {442 258 64 21} type Simple
                  }
                  Fl_Counter cntr_WK_first_ext {
                    label {1st Ext}
                    callback {WK_change_cntr_first_ext();}
                    tooltip {Extra duration to first dit/dot in msec
default = 0} xywh {442 300 64 22} type Simple
                  }
                  Fl_Counter cntr_WK_sample {
                    label Sample
                    callback {WK_change_cntr_sample();}
                    tooltip {Paddle sampling (see Winkeyer manual)
default = 50} xywh {442 343 64 22} type Simple
                  }
                  Fl_Counter cntr_WK_weight {
                    label Weight
                    callback {WK_change_cntr_weight();}
                    tooltip {Keying weight
default = 50} xywh {513 215 64 22} type Simple
                  }
                  Fl_Counter cntr_WK_leadin {
                    label Leadin
                    callback {WK_change_cntr_leadin();}
                    tooltip {Leadin in msec
default = 0} xywh {513 258 64 21} type Simple
                  }
                  Fl_Counter cntr_WK_tail {
                    label Tail
                    callback {WK_change_cntr_tail();}
                    tooltip {Extend last dit/dot in msec
default = 0} xywh {513 300 64 22} type Simple
                  }
                }
                Fl_Group {} {open
                  xywh {10 143 580 47} box ENGRAVED_FRAME
                } {
                  Fl_Group choice_WK_keyer_mode {
                    label {Keyer Mode}
                    callback {WK_change_choice_keyer_mode();} open
                    xywh {35 148 90 22} box BORDER_BOX color 55 align 2
                    code0 {\#include "combo.h"}
                    class Fl_ComboBox
                  } {}
                  Fl_Group choice_WK_hang {
                    label Hang
                    callback {WK_change_choice_hang();} open
                    xywh {181 148 90 22} box BORDER_BOX color 55 align 2
                    class Fl_ComboBox
                  } {}
                  Fl_Group choice_WK_sidetone {
                    label Sidetone
                    callback {WK_change_choice_sidetone();} open
                    xywh {328 148 90 22} box BORDER_BOX color 55 align 2
                    class Fl_ComboBox
                  } {}
                  Fl_Group choice_WK_output_pins {
                    label {Output PIns}
                    callback {WK_change_choice_output_pins();} open
                    xywh {475 148 90 22} box BORDER_BOX color 55 align 2
                    class Fl_ComboBox
                  } {}
                }
                Fl_Group {} {open
                  xywh {10 113 397 25} box ENGRAVED_FRAME
                } {
                  Fl_Box box_WK_wait {
                    label Wait
                    xywh {40 117 16 16} box DIAMOND_DOWN_BOX align 8
                  }
                  Fl_Box box_WK_break_in {
                    label Bk
                    xywh {115 117 16 16} box DIAMOND_DOWN_BOX align 8
                  }
                  Fl_Box box_WK_busy {
                    label Busy
                    xywh {190 117 16 16} box DIAMOND_DOWN_BOX align 8
                  }
                  Fl_Box box_WK_xoff {
                    label Bfr
                    xywh {265 117 16 16} box DIAMOND_DOWN_BOX align 8
                  }
                  Fl_Box box_WK_keydown {
                    label Key
                    xywh {341 117 16 16} box DIAMOND_DOWN_BOX align 8
                  }
                }
                Fl_Check_Button btn_WK_use_pot {
                  label {Use Pot}
                  callback {WK_use_pot_changed();}
                  tooltip {Winkeyer pot controls WPM} xywh {418 117 20 15} down_box DOWN_BOX align 8 when 1
                }
                Fl_Output txt_WK_wpm {
                  tooltip {WPM setting} xywh {505 114 50 22}
                }
                Fl_Group {} {open
                  xywh {10 363 291 23} box ENGRAVED_FRAME
                } {
                  Fl_Check_Button btnK3NG {
                    label {K3NG Arduino sketch emulation}
                    callback {progdefaults.WK_K3NGsketch = o->value();
progdefaults.changed = true;}
                    tooltip {Activate for Mortty K3NG sketch} xywh {20 367 223 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.WK_K3NGsketch);}
                  }
                }
              }
              Fl_Group tabsCW_ext_chars {
                label {Ext. Chars.}
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group {} {
                  label {Check to enable character encode/decode
Select one character from each group} open
                  xywh {5 85 590 266} box EMBOSSED_FRAME align 17
                } {
                  Fl_Group {} {open
                    xywh {10 140 99 80} box ENGRAVED_FRAME
                  } {
                    Fl_Check_Button btn_A_aelig {
                      label {A aelig}
                      callback {progdefaults.A_aelig = o->value();
if (progdefaults.A_aelig) {
	progdefaults.A_umlaut = false;
	btn_A_umlaut->value(0);
}
btn_A_umlaut->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {16 156 70 15} down_box DOWN_BOX
                      code0 {\#include "cw.h"}
                      code1 {o->value(progdefaults.A_aelig);}
                    }
                    Fl_Check_Button btn_A_umlaut {
                      label { A umlaut}
                      callback {progdefaults.A_umlaut = o->value();
if (progdefaults.A_umlaut) {
	progdefaults.A_aelig = false;
	btn_A_aelig->value(0);
}
btn_A_aelig->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {16 193 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.A_umlaut);}
                    }
                  }
                  Fl_Check_Button btn_A_ring {
                    label { A ring}
                    callback {progdefaults.A_ring = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
                    tooltip {Swap left/right keyer contacts} xywh {16 230 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.A_ring);}
                  }
                  Fl_Group {} {open
                    xywh {111 140 99 120} box ENGRAVED_FRAME
                  } {
                    Fl_Check_Button btn_O_acute {
                      label { O acute}
                      callback {progdefaults.O_acute = o->value();
if (progdefaults.O_acute) {
	progdefaults.O_umlaut = false;
	btn_O_umlaut->value(0);
	progdefaults.O_slash = false;
	btn_O_slash->value(0);
}
btn_O_umlaut->redraw();
btn_O_slash->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {116 156 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.O_acute);}
                    }
                    Fl_Check_Button btn_O_slash {
                      label { O slash}
                      callback {progdefaults.O_slash = o->value();
if (progdefaults.O_slash) {
	progdefaults.O_umlaut = false;
	btn_O_umlaut->value(0);
	progdefaults.O_acute = false;
	btn_O_acute->value(0);
}
btn_O_umlaut->redraw();
btn_O_acute->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {116 230 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.O_slash);}
                    }
                    Fl_Check_Button btn_O_umlaut {
                      label { O umlaut}
                      callback {progdefaults.O_umlaut = o->value();
if (progdefaults.O_umlaut) {
	progdefaults.O_acute = false;
	btn_O_acute->value(0);
	progdefaults.O_slash = false;
	btn_O_slash->value(0);
}
btn_O_acute->redraw();
btn_O_slash->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {116 193 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.O_umlaut);}
                    }
                  }
                  Fl_Check_Button btn_C_cedilla {
                    label { C cedilla}
                    callback {progdefaults.C_cedilla = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
                    tooltip {Swap left/right keyer contacts} xywh {213 156 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.C_cedilla);}
                  }
                  Fl_Check_Button btn_E_grave {
                    label { E grave}
                    callback {progdefaults.E_grave = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
                    tooltip {Swap left/right keyer contacts} xywh {311 156 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.E_grave);}
                  }
                  Fl_Check_Button btn_E_acute {
                    label { E acute}
                    callback {progdefaults.E_acute = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
                    tooltip {Swap left/right keyer contacts} xywh {311 193 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.E_acute);}
                  }
                  Fl_Check_Button btn_N_tilde {
                    label { N tilde}
                    callback {progdefaults.N_tilde = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
                    tooltip {Swap left/right keyer contacts} xywh {404 156 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.N_tilde);}
                  }
                  Fl_Group {} {open
                    xywh {490 140 99 80} box ENGRAVED_FRAME
                  } {
                    Fl_Check_Button btn_U_umlaut {
                      label { U umlaut}
                      callback {progdefaults.U_umlaut = o->value();
if (progdefaults.U_umlaut) {
	progdefaults.U_circ = false;
	btn_U_circ->value(0);
}
btn_U_circ->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {495 156 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.U_umlaut);}
                    }
                    Fl_Check_Button btn_U_circ {
                      label { U circ}
                      callback {progdefaults.U_circ = o->value();
if (progdefaults.U_circ) {
	progdefaults.U_umlaut = false;
	btn_U_umlaut->value(0);
}
btn_U_umlaut->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
                      tooltip {Swap left/right keyer contacts} xywh {495 193 70 15} down_box DOWN_BOX
                      code0 {o->value(progdefaults.U_circ);}
                    }
                  }
                  Fl_Group {} {
                    label {See https://en.wikipedia.org/wiki/Morse_code
for information regarding extended Morse characters.} open
                    xywh {110 280 403 45} align 17
                  } {}
                }
              }
              Fl_Group tab_nanoCW {
                label nanoCW open
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group select_nanoCW_CommPort {
                  label {Ser. Port}
                  callback {progdefaults.nanoIO_serial_port_name = o->value();} open
                  tooltip {nanoIO serial port} xywh {70 85 435 22} box DOWN_BOX color 55 align 4
                  code0 {\#include "combo.h"}
                  code1 {\#include "nanoIO.h"}
                  code2 {o->value(progdefaults.nanoIO_serial_port_name.c_str());}
                  class Fl_ComboBox
                } {}
                Fl_Light_Button btn_nanoCW_connect {
                  label Connect
                  callback {if (o->value()) {
  btn_nanoIO_connect->value(0);
  if (!open_nanoCW())
    o->value(0);
} else {
  close_nanoIO();
}}
                  tooltip {Connect / Disconnect from nanoIO} xywh {511 85 80 22}
                }
                Fl_Button btn_cwfsk_save {
                  label Save
                  callback {nano_CW_save();}
                  tooltip {Write state of nanoIO to Arduino EEPROM} xywh {511 138 80 22}
                }
                Fl_Button btn_cwfsk_query {
                  label Status
                  callback {nano_CW_query();}
                  tooltip {Query state of nanoIO} xywh {511 165 80 22}
                }
                Fl_Counter cntr_nanoCW_paddle_WPM {
                  label Paddle
                  callback {progdefaults.CW_keyspeed = (int)o->value();
set_nano_keyerWPM(progdefaults.CW_keyspeed);
progdefaults.changed = true;}
                  tooltip {CW wpm using paddle keyer} xywh {70 113 110 22} align 4 minimum 5 maximum 100 step 1 value 20
                  code0 {o->value(progdefaults.CW_keyspeed);}
                  code1 {o->lstep(5);}
                }
                Fl_Text_Display txt_nano_CW_io {
                  label {USB serial I/O}
                  xywh {4 210 590 175} align 5
                  code0 {\#include "FTextRXTX.h"}
                  code1 {o->setFont(progdefaults.RxFontnbr);}
                  code2 {o->setFontSize(12);}
                  class FTextView
                }
                Fl_Counter cntr_nanoCW_WPM {
                  label {Comp'}
                  callback {progdefaults.CWspeed = (int)o->value();
cntCW_WPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->value(progdefaults.CWspeed);
progdefaults.changed = true;
sync_cw_parameters();}
                  tooltip {CW wpm keyboard strings} xywh {70 139 110 22} align 4 minimum 5 maximum 100 step 1 value 20
                  code0 {o->value(progdefaults.CWspeed);}
                  code1 {o->lstep(5);}
                }
                Fl_Counter cnt_nanoCWdash2dot {
                  label {Dash/Dot}
                  callback {progdefaults.CWdash2dot=o->value();
cntCWdash2dot->value(progdefaults.CWdash2dot);
progdefaults.changed = true;}
                  tooltip {Dash to dot ratio} xywh {87 165 75 22} type Simple align 4 minimum 2.5 maximum 3.5 value 3
                  code0 {o->value(progdefaults.CWdash2dot);}
                  code1 {o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_Counter2
                }
                Fl_Group listbox_nano_keyer {
                  label Keyer
                  callback {progdefaults.nanoIO_CW_keyer = o->index();
set_nanoIO_keyer(o->index());
progdefaults.changed = true;} open
                  xywh {395 113 110 22} box DOWN_BOX color 7 align 4
                  code0 {o->add("Iambic-A|Iambic-B|Straight");}
                  code1 {o->index(progdefaults.nanoIO_CW_keyer);}
                  class Fl_ListBox
                } {}
                Fl_Group listbox_incr {
                  label {Incr'}
                  callback {progdefaults.nanoIO_CW_incr = o->index() + '1';
set_nanoIO_incr();
progdefaults.changed = true;} open
                  xywh {445 138 60 22} box DOWN_BOX color 7 align 4
                  code0 {o->add("1|2|3|4|5");}
                  code1 {o->index(progdefaults.nanoIO_CW_incr - '1');}
                  class Fl_ListBox
                } {}
                Fl_Check_Button btn_disable_CW_PTT {
                  label {PTT off}
                  callback {progdefaults.disable_CW_PTT=o->value();
progdefaults.changed=true;
nanoIO_set_cw_ptt();}
                  tooltip {Disable PTT} xywh {435 165 70 22} down_box DOWN_BOX
                  code0 {o->value(progdefaults.disable_CW_PTT);}
                }
                Fl_Group {} {open
                  xywh {185 110 164 85} box ENGRAVED_FRAME
                } {
                  Fl_Check_Button btn_nanoIO_pot {
                    label {Use WPM pot'}
                    callback {progdefaults.nanoIO_speed_pot=o->value();
progdefaults.changed=true;
nanoIO_use_pot();}
                    tooltip {WPM pot update to nanoIO required} xywh {312 113 21 22} down_box DOWN_BOX align 4 deactivate
                    code0 {o->value(progdefaults.nanoIO_speed_pot);}
                  }
                  Fl_Counter cntr_nanoIO_min_wpm {
                    label {Min WPM}
                    callback {if ((o->value() + cntr_nanoIO_rng_wpm->value()) > 100)
  cntr_nanoIO_rng_wpm->value(100 - o->value());
set_nanoIO_min_max();}
                    tooltip {Minimum WPM setting
default = 10} xywh {257 139 75 22} type Simple align 4 minimum 10 maximum 30 step 1 value 10 deactivate
                  }
                  Fl_Counter cntr_nanoIO_rng_wpm {
                    label {Rng WPM}
                    callback {if ((cntr_nanoIO_min_wpm->value() + o->value()) > 100)
o->value(100 - cntr_nanoIO_min_wpm->value());
set_nanoIO_min_max();}
                    tooltip {Range WPM setting
default = 20} xywh {257 165 75 22} type Simple align 4 minimum 10 maximum 40 step 1 value 20 deactivate
                  }
                }
              }
            }
          }
          Fl_Group tabDomEX {
            label Dom
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 60 490 180} box ENGRAVED_FRAME
            } {
              Fl_Input txtSecondary {
                label {Secondary Text}
                callback {progdefaults.secText = o->value();
progdefaults.changed = true;}
                tooltip {Text to send during keyboard idle times} xywh {65 87 360 40} type Multiline align 5 when 1
                code0 {txtSecondary->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Check_Button valDominoEX_FILTER {
                label Filtering
                callback {progdefaults.DOMINOEX_FILTER = o->value();
resetDOMEX();
progdefaults.changed = true;}
                tooltip {Use DSP filter before decoder} xywh {65 141 80 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.DOMINOEX_FILTER);}
              }
              Fl_Counter valDominoEX_BW {
                label {Filter bandwidth factor}
                callback {progdefaults.DOMINOEX_BW = o->value();
resetDOMEX();
progdefaults.changed = true;}
                tooltip {Filter bandwidth relative to signal width} xywh {206 141 63 20} type Simple align 8 minimum 1 maximum 2 value 1.5
                code0 {o->value(progdefaults.DOMINOEX_BW);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter valDominoEX_ADJ {
                label {Tone-spacing adjust}
                callback {progdefaults.DOMINOEX_ADJ = o->value();
resetDOMEX();
progdefaults.changed = true;}
                tooltip {Tone-spacing adjust} xywh {206 166 63 20} type Simple align 8 minimum -100 maximum 100
                code0 {o->value(progdefaults.DOMINOEX_ADJ);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Check_Button chkDominoEX_FEC {
                label FEC
                callback {progdefaults.DOMINOEX_FEC = o->value();
progdefaults.changed = true;}
                tooltip {Enable MultiPSK-compatible FEC} xywh {65 171 51 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.DOMINOEX_FEC);}
              }
              Fl_Value_Slider valDomCWI {
                label {CWI threshold}
                callback {progdefaults.DomCWI = o->value();
progdefaults.changed = true;}
                tooltip {CWI detection and suppression} xywh {65 207 260 20} type Horizontal align 1 textsize 14
                code0 {o->value(progdefaults.DomCWI);}
                code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
              Fl_Counter valDominoEX_PATHS {
                label {Paths (hidden)}
                callback {progdefaults.DOMINOEX_PATHS = (int)o->value();
progdefaults.changed = true;}
                xywh {389 194 63 20} type Simple minimum 4 maximum 8 step 1 value 5
                code0 {o->value(progdefaults.DOMINOEX_PATHS);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                code2 {o->hide();}
                class Fl_Counter2
              }
            }
          }
          Fl_Group tabFeld {
            label Feld
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Hell Transmit Parameters} open
              xywh {55 72 500 133} box ENGRAVED_FRAME align 17
            } {
              Fl_Group listboxHellFont {
                label {Transmit font}
                callback {progdefaults.feldfontnbr=o->index();
progdefaults.changed = true;} open
                tooltip {Select TX raster font} xywh {70 97 225 22} box DOWN_BOX color 7 align 8
                code0 {\#include "fontdef.h"}
                code1 {o->add(szFeldFonts);}
                code2 {o->index(progdefaults.feldfontnbr);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group listboxHellPulse {
                label {Pulse shape}
                callback {progdefaults.HellPulseFast = o->index();
progdefaults.changed = true;} open
                tooltip {Raised cosine pulse shape factor} xywh {70 145 150 22} box DOWN_BOX color 7 align 5
                code0 {o->add(_("Slow (4 msec)|Med (2 msec)|Fast (1 msec)|Hard Keying"));}
                code2 {o->index(progdefaults.HellPulseFast);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Check_Button btnFeldHellIdle {
                label {Transmit periods (.) when idle}
                callback {progdefaults.HellXmtIdle=o->value();
progdefaults.changed = true;}
                tooltip {Transmits a diddle dot when no keyboard activity} xywh {70 180 230 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.HellXmtIdle);}
              }
              Fl_Value_Slider valHellXmtWidth {
                label {Tx Width Multiplier}
                callback {progdefaults.HellXmtWidth=(int)o->value();
progdefaults.changed = true;}
                tooltip {Range 1...3} xywh {251 145 150 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 3 step 1 value 1 textsize 14
                code0 {o->value(progdefaults.HellXmtWidth);}
              }
            }
            Fl_Group {} {
              label {Hell Receive Parameters} open
              xywh {55 208 500 173} box ENGRAVED_FRAME align 17
            } {
              Fl_Check_Button btnBlackboard {
                label {Reverse video}
                callback {progdefaults.HellBlackboard=o->value();
FHdisp->reverse(progdefaults.HellBlackboard);
progdefaults.changed = true;}
                tooltip {Display RX in reverse video} xywh {70 232 125 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HellBlackboard);}
              }
              Fl_Check_Button btnHellMarquee {
                label {Marquee text}
                callback {progdefaults.HellMarquee=o->value();
FHdisp->set_marquee(progdefaults.HellMarquee);
progdefaults.changed = true;}
                tooltip {Display RX as a scrolling marquee} xywh {255 232 125 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HellMarquee);}
              }
              Fl_Value_Slider valHellRcvWidth {
                label {Rx Width Multiplier}
                callback {progdefaults.HellRcvWidth=(int)o->value();
progdefaults.changed = true;}
                tooltip {Range 1...4} xywh {70 268 120 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 4 step 1 value 1 textsize 14
                code0 {o->value(progdefaults.HellRcvWidth);}
              }
              Fl_Value_Slider valHellRcvHeight {
                label {Rx Height in pixels}
                callback {FHdisp_char_height();}
                tooltip {May require resizing the Rx/Tx panel} xywh {70 307 250 22} type {Horz Knob} color 54 align 8 minimum 14 maximum 42 step 2 value 20 textsize 14
                code0 {o->value(progdefaults.HellRcvHeight);}
              }
              Fl_Value_Slider sldrHellBW {
                label {Receive filter bandwidth}
                callback {progdefaults.HELL_BW = sldrHellBW->value();}
                tooltip {Adjust the DSP bandwidth} xywh {70 346 250 22} type Horizontal color 54 align 8 minimum 10 maximum 2400 step 5 value 400 textsize 14
                code0 {o->value(progdefaults.HELL_BW);}
                code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
              Fl_Value_Slider val_hellagc {
                label {Rx AGC}
                callback {progdefaults.hellagc=(int)o->value();
progdefaults.changed = true;}
                tooltip {1 - Slow, 2 - Medium, 3 - Fast} xywh {335 268 120 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 3 step 1 value 2 textsize 14
                code0 {o->value(progdefaults.hellagc);}
              }
            }
          }
          Fl_Group tabFSQ {
            label FSQ
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Rx Parameters} open
              xywh {5 60 585 65} box ENGRAVED_BOX align 21
            } {
              Fl_Value_Slider valhits {
                label {Min Hits}
                callback {progdefaults.fsqhits=(int)o->value();
progdefaults.changed = true;}
                tooltip {Minimum \# hits in tone detector} xywh {140 65 125 22} type {Horz Knob} align 8 minimum 3 maximum 6 step 1 value 3 textsize 14
                code0 {o->value(progdefaults.fsqhits);}
              }
              Fl_Choice sel_fsq_lpf {
                label {Image LPF}
                callback {progdefaults.fsq_img_filter=o->value();
progdefaults.changed = true;} open
                tooltip {Narrow LPF if image noisy} xywh {163 94 102 22} down_box BORDER_BOX
                code0 {o->add("None"); o->add("300 Hz"); o->add("400 Hz"); o->add("500 Hz");}
                code1 {o->value(progdefaults.fsq_img_filter);}
              } {}
              Fl_Value_Slider sldrMovAvg {
                label {MovAvg:}
                callback {progdefaults.fsq_movavg = o->value();
progdefaults.changed = true;}
                tooltip {Filter FFT output} xywh {410 65 125 22} type Horizontal align 4 minimum 1 maximum 15 step 1 value 4 textsize 14
                code0 {o->value(progdefaults.fsq_movavg);}
                code1 {o->maximum(MOVAVGLIMIT);}
              }
              Fl_Choice sel_fsq_heard_aging {
                label {Heard aging}
                callback {progdefaults.fsq_heard_aging=o->value();
progdefaults.changed = true;} open
                tooltip {Remove call after ...} xywh {433 94 102 22} down_box BORDER_BOX
                code0 {o->add("Never"); o->add("1 min"); o->add("5 min");o->add("10 min"); o->add("20 min"); o->add("20 min"); o->add("30 min"); o->add("60 min"); o->add("90 min"); o->add("120 min");}
                code1 {o->value(progdefaults.fsq_heard_aging);}
              } {}
            }
            Fl_Group {} {
              label {Tx Parameters} open
              xywh {5 125 585 95} box ENGRAVED_BOX align 21
            } {
              Fl_Round_Button {btn_fsqbaud[0]} {
                label {1.5 baud}
                callback {if (o->value() == 1) {
progdefaults.fsqbaud = 1.5;
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
                xywh {124 135 55 15} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.fsqbaud == 1.5);}
              }
              Fl_Round_Button {btn_fsqbaud[1]} {
                label {2 baud}
                callback {if (o->value() == 1) {
progdefaults.fsqbaud = 2;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
                xywh {217 135 55 15} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.fsqbaud == 2);}
              }
              Fl_Round_Button {btn_fsqbaud[2]} {
                label {3 baud}
                callback {if (o->value() == 1) {
progdefaults.fsqbaud = 3;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
                xywh {310 135 55 15} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.fsqbaud == 3);}
              }
              Fl_Round_Button {btn_fsqbaud[3]} {
                label {4.5 baud}
                callback {if (o->value() == 1) {
progdefaults.fsqbaud = 4.5;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
                xywh {403 135 55 15} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.fsqbaud == 4.5);}
              }
              Fl_Round_Button {btn_fsqbaud[4]} {
                label {6 baud}
                callback {if (o->value() == 1) {
progdefaults.fsqbaud = 6;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
}
progdefaults.changed = true;}
                xywh {497 135 55 15} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.fsqbaud == 6);}
              }
              Fl_Choice sel_fsq_frequency {
                label {Center freq}
                callback {progdefaults.fsq_frequency=o->value();
progdefaults.changed = true;} open
                xywh {250 199 102 21} down_box BORDER_BOX align 1 hide
                code0 {o->add("1150"); o->add("1500"); o->add("Variable");}
                code1 {o->value(progdefaults.fsq_frequency);}
              } {}
              Fl_Choice sel_fsq_sounder {
                label Sounder
                callback {progdefaults.fsq_sounder=o->value();
progdefaults.changed = true;} open
                tooltip {Send beacon every ...} xywh {80 156 100 22} down_box BORDER_BOX
                code0 {o->add("OFF"); o->add("1 min"); o->add("10 min"); o->add("30 min"); o->add("60 min");}
                code1 {o->value(progdefaults.fsq_sounder);}
              } {}
              Fl_Check_Button btn_fsq_lowercase {
                label {MYCALL always lower case}
                callback {progdefaults.fsq_lowercase=o->value();
progdefaults.changed = true;}
                tooltip {convert operator callsign to lower case} xywh {366 159 214 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.fsq_lowercase);}
              }
              Fl_Counter cntr_FSQ_time_out {
                label {Time out}
                callback {progdefaults.fsq_time_out = o->value();
progdefaults.changed = true;}
                tooltip {Time out xmt attempt in XX seconds} xywh {254 156 80 22} type Simple align 4 minimum 2 maximum 20 step 1 value 6
                code0 {o->value(progdefaults.fsq_time_out);}
              }
              Fl_Input {} {
                label {QTC:}
                callback {progdefaults.fsqQTCtext = o->value();
progdefaults.changed = true;}
                tooltip {Enter QTC text} xywh {80 182 456 22}
                code0 {o->value(progdefaults.fsqQTCtext.c_str());}
              }
            }
            Fl_Group {} {
              label {Message Logging} open
              xywh {5 210 585 55} box ENGRAVED_BOX align 21
            } {
              Fl_Check_Button btn_fsq_msg_dt_stamp {
                label {Add date/time}
                callback {progdefaults.add_fsq_msg_dt=o->value();
progdefaults.changed=true;}
                tooltip {Add date/time stamp to each \# received message} xywh {35 237 135 15} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.add_fsq_msg_dt);}
              }
              Fl_Check_Button btn_fsq_msg_append {
                label {always append to file(s)}
                callback {progdefaults.always_append=o->value();
progdefaults.changed=true;}
                tooltip {append \# directive msgs to named file} xywh {182 237 210 15} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.always_append);}
              }
              Fl_Counter cntr_FSQ_notify_time_out {
                label {Notify time out}
                callback {progdefaults.fsq_notify_time_out = o->value();
progdefaults.changed = true;}
                tooltip {Notification dialog closes after XX seconds;^j0 == dialog remains open} xywh {495 233 80 22} type Simple align 4 minimum 0 maximum 30 step 1 value 10
                code0 {o->value(progdefaults.fsq_notify_time_out);}
              }
            }
            Fl_Group {} {
              label Logging open
              xywh {5 265 585 80} box ENGRAVED_BOX align 21
            } {
              Fl_Output txtAuditLog {
                label {Audit log}
                xywh {82 285 325 22}
                code0 {o->value(progdefaults.fsq_audit_log.c_str());}
              }
              Fl_Light_Button btn_enable_auditlog {
                label Enable
                callback {progdefaults.fsq_enable_audit_log = o->value();
progdefaults.changed = true;}
                xywh {421 286 74 20} selection_color 2
                code0 {o->value(progdefaults.fsq_enable_audit_log);}
              }
              Fl_Button btn_select_auditlog {
                label Select
                callback {std::string str = std::string(TempDir);
str.append(progdefaults.fsq_audit_log);
const char *fname = FSEL::saveas("Audit log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.fsq_audit_log = fl_filename_name(fname);
txtAuditLog->value(progdefaults.fsq_audit_log.c_str());
progdefaults.changed = true;}
                xywh {509 286 70 20}
              }
              Fl_Output txtHeardLog {
                label {Heard log}
                xywh {82 313 325 22}
                code0 {o->value(progdefaults.fsq_heard_log.c_str());}
              }
              Fl_Light_Button btn_enable_fsq_heard_log {
                label Enable
                callback {progdefaults.fsq_enable_heard_log = o->value();
progdefaults.changed = true;}
                xywh {421 314 74 20} selection_color 2
                code0 {o->value(progdefaults.fsq_enable_heard_log);}
              }
              Fl_Button btn_select_fsq_heard_log {
                label Select
                callback {std::string str = std::string(TempDir);
str.append(progdefaults.fsq_heard_log);
const char *fname = FSEL::saveas("Heard log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.fsq_heard_log = fl_filename_name(fname);
txtHeardLog->value(progdefaults.fsq_heard_log.c_str());
progdefaults.changed = true;}
                xywh {509 314 70 20}
              }
            }
            Fl_Group {} {
              label {Text Colors} open
              xywh {5 345 585 35} box ENGRAVED_BOX align 21
            } {
              Fl_Button btn_fsq_xmt_color {
                label XMIT
                callback {choose_color(progdefaults.fsq_xmt_color);

btn_fsq_xmt_color->color( progdefaults.fsq_xmt_color );
btn_fsq_xmt_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_xmt_color, FTextBase::FSQ_TX);

progdefaults.changed = true;}
                tooltip {Transmit text} xywh {145 352 40 20} align 4
                code0 {btn_fsq_xmt_color->color(progdefaults.fsq_xmt_color);}
              }
              Fl_Button btn_fsq_directed_color {
                label DIRECTED
                callback {choose_color(progdefaults.fsq_directed_color);

btn_fsq_directed_color->color( progdefaults.fsq_directed_color );
btn_fsq_directed_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_directed_color, FTextBase::FSQ_DIR);

progdefaults.changed = true;}
                tooltip {Directed received text} xywh {275 352 40 20} align 4
                code0 {btn_fsq_directed_color->color(progdefaults.fsq_directed_color);}
              }
              Fl_Button btn_fsq_undirected_color {
                label UNDIRECTED
                callback {choose_color(progdefaults.fsq_undirected_color);

btn_fsq_undirected_color->color( progdefaults.fsq_undirected_color);
btn_fsq_undirected_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_undirected_color, FTextBase::FSQ_UND);

progdefaults.changed = true;}
                tooltip {Undirected received text} xywh {425 352 40 20} align 4
                code0 {btn_fsq_undirected_color->color(progdefaults.fsq_undirected_color);}
              }
              Fl_Button btn_fsq_color_defaults {
                label Defaults
                callback {progdefaults.fsq_xmt_color = FL_RED;
btn_fsq_xmt_color->color(progdefaults.fsq_xmt_color);
btn_fsq_xmt_color->redraw();

progdefaults.fsq_directed_color = FL_BLUE;
btn_fsq_directed_color->color(progdefaults.fsq_directed_color);
btn_fsq_directed_color->redraw();

progdefaults.fsq_undirected_color = FL_DARK_GREEN;
btn_fsq_undirected_color->color(progdefaults.fsq_undirected_color);
btn_fsq_undirected_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_xmt_color, FTextBase::FSQ_TX);
fsq_rx_text->setFontColor(progdefaults.fsq_directed_color, FTextBase::FSQ_DIR);
fsq_rx_text->setFontColor(progdefaults.fsq_undirected_color, FTextBase::FSQ_UND);

progdefaults.changed = true;}
                xywh {507 352 74 20}
              }
            }
          }
          Fl_Group tabIFKP {
            label IFKP
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Tx Parameters} open
              xywh {5 65 587 120} box ENGRAVED_BOX align 21
            } {
              Fl_Round_Button {btn_ifkpbaud[0]} {
                label {1/2 speed}
                callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 0;
btn_ifkpbaud[1]->value(0);
btn_ifkpbaud[2]->value(0);
}
progdefaults.changed = true;}
                xywh {100 93 100 17} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.ifkp_baud == 0);}
              }
              Fl_Round_Button {btn_ifkpbaud[1]} {
                label {1x speed}
                callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 1;
btn_ifkpbaud[0]->value(0);
btn_ifkpbaud[2]->value(0);
}
progdefaults.changed = true;}
                tooltip default xywh {208 93 100 17} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.ifkp_baud == 1);}
              }
              Fl_Round_Button {btn_ifkpbaud[2]} {
                label {2x speed}
                callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 2;
btn_ifkpbaud[0]->value(0);
btn_ifkpbaud[1]->value(0);
}
progdefaults.changed = true;}
                xywh {316 93 100 17} down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.ifkp_baud == 2);}
              }
              Fl_Check_Button btn_ifkp_lowercase {
                label {MYCALL always lower case}
                callback {progdefaults.ifkp_lowercase=o->value();
progdefaults.changed = true;}
                tooltip {convert operator callsign to lower case} xywh {100 125 220 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ifkp_lowercase);}
              }
              Fl_Check_Button btn_ifkp_lowercase_call {
                label {CALLSIGN always lower case}
                callback {progdefaults.ifkp_lowercase_call=o->value();
progdefaults.changed = true;}
                tooltip {convert other callsign to lower case} xywh {325 125 220 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ifkp_lowercase_call);}
              }
              Fl_Check_Button btn_ifkp_freqlock {
                label {lock WF at 1500 Hz}
                callback {progdefaults.ifkp_freqlock=o->value();
if (active_modem == ifkp_modem &&
  o->value() )
  active_modem->set_freq(1500);
progdefaults.changed = true;}
                tooltip {Always transmit at 1500 Hertz center freq.} xywh {100 155 220 15} down_box DOWN_BOX
                code0 {\#include "trx.h"}
                code1 {o->value(progdefaults.ifkp_freqlock);}
              }
            }
            Fl_Group {} {
              label Logging open
              xywh {5 190 587 100} box ENGRAVED_BOX align 21
            } {
              Fl_Output txt_ifkp_audit_log {
                label {Audit log}
                xywh {92 220 323 25}
                code0 {o->value(progdefaults.ifkp_audit_log.c_str());}
              }
              Fl_Light_Button btn_enable_ifkp_audit_log {
                label Enable
                callback {progdefaults.ifkp_enable_audit_log = o->value();
progdefaults.changed = true;}
                xywh {429 220 73 25} selection_color 2
                code0 {o->value(progdefaults.ifkp_enable_audit_log);}
              }
              Fl_Button btn_ifkp_select_auditlog {
                label Select
                callback {std::string str = std::string(TempDir);
str.append(progdefaults.ifkp_audit_log);
const char *fname = FSEL::saveas("Audit log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.ifkp_audit_log = fl_filename_name(fname);
txt_ifkp_audit_log->value(progdefaults.ifkp_audit_log.c_str());
progdefaults.changed = true;}
                xywh {510 220 70 25}
              }
              Fl_Output txt_ifkp_heard_log {
                label {Heard log}
                xywh {92 249 323 25}
                code0 {o->value(progdefaults.ifkp_heard_log.c_str());}
              }
              Fl_Light_Button btn_enable_ifkp_heard_log {
                label Enable
                callback {progdefaults.ifkp_enable_heard_log = o->value();
progdefaults.changed = true;}
                xywh {429 249 73 25} selection_color 2
                code0 {o->value(progdefaults.ifkp_enable_heard_log);}
              }
              Fl_Button btn_select_ifkp_heard_log {
                label Select
                callback {std::string str = std::string(TempDir);
str.append(progdefaults.ifkp_heard_log);
const char *fname = FSEL::saveas("Heard log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.ifkp_heard_log = fl_filename_name(fname);
txt_ifkp_heard_log->value(progdefaults.ifkp_heard_log.c_str());
progdefaults.changed = true;}
                xywh {510 249 70 25}
              }
            }
          }
          Fl_Group tabMT63 {
            label {MT-63}
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 73 490 84} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnMT63_8bit {
                label {8-bit extended characters (UTF-8)}
                callback {progdefaults.mt63_8bit = o->value();
progdefaults.changed = true;}
                tooltip {Enable this for UTF-8 characters} xywh {200 87 205 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.mt63_8bit);}
              }
              Fl_Check_Button btnMT63_rx_integration {
                label {Long receive integration}
                callback {progdefaults.mt63_rx_integration = o->value();
progdefaults.changed = true;}
                tooltip {Enable for very weak signals} xywh {200 117 190 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.mt63_rx_integration);}
              }
            }
            Fl_Group {} {open
              xywh {55 169 490 178} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnMT63_usetones {
                label {Transmit lower start tone}
                callback {progdefaults.mt63_usetones = o->value();
if (!o->value()) {
    btnMT63_upper_lower->value(0);
    btnMT63_upper_lower->do_callback();
    btnMT63_upper_lower->deactivate();
}
else
    btnMT63_upper_lower->activate();
progdefaults.changed = true;}
                xywh {199 177 200 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.mt63_usetones);}
              }
              Fl_Check_Button btnMT63_upper_lower {
                label {Transmit upper start tone}
                callback {progdefaults.mt63_twotones = o->value();
progdefaults.changed = true;}
                xywh {199 207 200 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.mt63_twotones);}
                code1 {if (!btnMT63_usetones->value()) o->deactivate();}
              }
              Fl_Spinner MT63_tone_duration {
                label {Tone Duration (secs)}
                callback {progdefaults.mt63_tone_duration=(int)o->value();
progdefaults.changed = true;}
                xywh {199 233 40 20} align 8 maximum 10 value 4
                code0 {o->value(progdefaults.mt63_tone_duration);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
              Fl_Check_Button btnMT63_at500 {
                label {Low tone at 500 Hz}
                callback {o->value(1);
progdefaults.mt63_at500 = true;
progdefaults.mt63_centered = false;
btnMT63_centered->value(0);
btnMT63_manual->value(0);
progdefaults.changed = true;}
                xywh {199 262 200 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.mt63_at500);}
              }
              Fl_Check_Button btnMT63_centered {
                label {Centered at 1500 Hz (SHARES)}
                callback {o->value(1);
progdefaults.mt63_centered = true;
progdefaults.mt63_at500 = false;
btnMT63_at500->value(0);
btnMT63_manual->value(0);
progdefaults.changed = true;}
                xywh {199 287 248 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.mt63_centered);}
              }
              Fl_Check_Button btnMT63_manual {
                label {Manual tuning}
                callback {o->value(1);
progdefaults.mt63_centered = false;
progdefaults.mt63_at500 = false;
btnMT63_at500->value(0);
btnMT63_centered->value(0);
progdefaults.changed = true;}
                xywh {199 312 200 20} down_box DOWN_BOX
                code0 {o->value(!progdefaults.mt63_at500 && !progdefaults.mt63_centered);}
              }
            }
          }
          Fl_Group tabOlivia {
            label Oliv
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 76 490 280} box ENGRAVED_FRAME
            } {
              Fl_Group i_listbox_olivia_bandwidth {
                label Bandwidth
                callback {progdefaults.oliviabw = o->index();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;} open
                tooltip {Select bandwidth} xywh {110 96 85 22} box DOWN_BOX color 7 align 8
                code0 {o->add(szOliviaBandwidth);}
                code1 {o->index(progdefaults.oliviabw);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group i_listbox_olivia_tones {
                label Tones
                callback {progdefaults.oliviatones = o->index();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;} open
                tooltip {Select number of tones} xywh {371 96 70 22} box DOWN_BOX color 7 align 8
                code0 {o->add(szOliviaTones);}
                code1 {o->index(progdefaults.oliviatones);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group {} {
                label {Receive synchronizer} open
                xywh {110 135 379 133} box ENGRAVED_FRAME align 21
              } {
                Fl_Counter cntOlivia_smargin {
                  label {Tune margin (tone frequency spacing)}
                  callback {progdefaults.oliviasmargin = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;}
                  tooltip {Change ONLY to experiment} xywh {125 166 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 8
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  code1 {o->value(progdefaults.oliviasmargin);}
                  class Fl_Counter2
                }
                Fl_Counter cntOlivia_sinteg {
                  label {Integration period (FEC blocks)}
                  callback {progdefaults.oliviasinteg = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;}
                  tooltip {Change ONLY to experiment} xywh {125 198 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 4
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  code1 {o->value(progdefaults.oliviasinteg);}
                  class Fl_Counter2
                }
                Fl_Check_Button btn_olivia_reset_fec {
                  label {Reset FEC blocks when changing BW or Tones}
                  callback {progdefaults.olivia_reset_fec = o->value();
progdefaults.changed = true;}
                  tooltip {Enable this for UTF-8 character transmission} xywh {126 230 349 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.olivia_reset_fec);}
                }
              }
              Fl_Check_Button btnOlivia_8bit {
                label {8-bit extended characters (UTF-8)}
                callback {progdefaults.olivia8bit = o->value();
progdefaults.changed = true;}
                tooltip {Enable this for UTF-8 character transmission} xywh {131 291 265 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.olivia8bit);}
              }
              Fl_Check_Button btnOlivia_start_stop_tones {
                label {xmt start/stop tones}
                callback {progdefaults.olivia_start_tones = o->value();
progdefaults.changed = true;}
                tooltip {Enable this to send start/stop tones} xywh {131 315 265 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.olivia_start_tones);}
              }
            }
          }
          Fl_Group tabContestia {
            label Cont
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 80 490 235} box ENGRAVED_FRAME
            } {
              Fl_Group i_listbox_contestia_bandwidth {
                label Bandwidth
                callback {progdefaults.contestiabw = o->index();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;} open
                tooltip {Select bandwidth} xywh {110 100 85 22} box DOWN_BOX color 7 align 8
                code0 {o->add(szContestiaBandwidth);}
                code1 {o->index(progdefaults.contestiabw);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group i_listbox_contestia_tones {
                label Tones
                callback {progdefaults.contestiatones = o->index();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;} open
                tooltip {Select number of tones} xywh {371 100 70 22} box DOWN_BOX color 7 align 8
                code0 {o->add(szContestiaTones);}
                code1 {o->index(progdefaults.contestiatones);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group {} {
                label {Receive synchronizer} open
                xywh {93 139 414 131} box ENGRAVED_FRAME align 21
              } {
                Fl_Counter cntContestia_smargin {
                  label {Tune margin (tone frequency spacing)}
                  callback {progdefaults.contestiasmargin = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;}
                  tooltip {Change ONLY to experiment} xywh {112 170 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 8
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_Counter2
                }
                Fl_Counter cntContestia_sinteg {
                  label {Integration period (FEC blocks)}
                  callback {progdefaults.contestiasinteg = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;}
                  tooltip {Change ONLY to experiment} xywh {112 202 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 4
                  code0 {o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_Counter2
                }
                Fl_Check_Button btn_contestia_reset_fec {
                  label {Reset FEC blocks when changing BW or Tones}
                  callback {progdefaults.contestia_reset_fec = o->value();
progdefaults.changed = true;}
                  tooltip {Enable this for UTF-8 character transmission} xywh {108 235 349 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.contestia_reset_fec);}
                }
              }
              Fl_Check_Button btnContestia_8bit {
                label {8-bit extended characters}
                callback {progdefaults.contestia8bit = o->value();
progdefaults.changed = true;}
                tooltip {Enable this for Latin-1 accented characters} xywh {79 249 200 20} down_box DOWN_BOX hide
              }
              Fl_Check_Button btnContestia_start_stop_tones {
                label {xmt start/stop tones}
                callback {progdefaults.contestia_start_tones = o->value();
progdefaults.changed = true;}
                tooltip {Enable this to send start/stop tones} xywh {141 280 265 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.contestia_start_tones);}
              }
            }
          }
          Fl_Group tabPSK {
            label PSK
            xywh {0 50 600 340} hide
          } {
            Fl_Tabs tabsPSK {open
              xywh {0 50 600 340} selection_color 50
            } {
              Fl_Group grpPSK {
                label General open
                xywh {0 75 600 315} align 5
              } {
                Fl_Group {} {
                  label {AFC behavior} open
                  xywh {55 87 490 86} box ENGRAVED_FRAME align 21
                } {
                  Fl_Counter cntSearchRange {
                    label {Acquisition search range (Hz)}
                    callback {progdefaults.SearchRange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
                    tooltip {Capture signals within this frequency range} xywh {200 111 75 20} type Simple align 8 minimum 10 maximum 500 step 10 value 200
                    code0 {o->value(progdefaults.SearchRange);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Counter cntACQsn {
                    label {Acquisition S/N (dB)}
                    callback {progdefaults.ACQsn = o->value();
progdefaults.changed = true;}
                    tooltip {Capture signals over this threshold} xywh {200 140 75 20} type Simple align 8 minimum 3 maximum 20 step 1 value 6
                    code0 {o->value(progdefaults.ACQsn);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                }
                Fl_Group {} {
                  label {S/N and IMD behavior} open
                  xywh {55 175 490 65} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group listbox_psk_status_timeout {
                    label after
                    callback {progdefaults.StatusDim = o->index();
progdefaults.changed = true;} open
                    tooltip {Behavior of s/n imd} xywh {180 206 80 20} box DOWN_BOX color 7 align 8
                    code0 {o->add(_("Clear")); o->add(_("Dim"));}
                    code1 {o->index(progdefaults.StatusDim);
                       o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Counter {} {
                    label seconds
                    callback {progdefaults.StatusTimeout = (int)(o->value());
progdefaults.changed = true;}
                    tooltip {Will occur after this time in seconds} xywh {321 206 75 20} type Simple align 8 minimum 0 maximum 30 step 1
                    code0 {o->value(progdefaults.StatusTimeout);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                }
                Fl_Group {} {
                  label {Multi-Channel Signal Processing} open
                  xywh {55 245 490 80} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnEnablePSKbrowsing {
                    label {Multi-channel detector}
                    callback {progdefaults.pskbrowser_on = o->value();
progdefaults.changed = true;}
                    xywh {225 295 180 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.pskbrowser_on);}
                  }
                  Fl_Box {} {
                    label {Disable on very slow CPUs of if signal browser is not used}
                    xywh {65 272 440 20} align 20
                  }
                }
                Fl_Group {} {
                  label {8 psk} open
                  xywh {55 327 490 47} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnPSKpilot {
                    label {Pilot tone}
                    callback {progdefaults.pskpilot = o->value();
progdefaults.changed = true;}
                    tooltip {Enable encode/decode vestigial pilot tone} xywh {100 340 113 20} down_box DOWN_BOX
                    code0 {o->value(progdefaults.pskpilot);}
                  }
                  Fl_Counter cnt_pilot_power {
                    label {pilot power (dB)}
                    callback {progdefaults.pilot_power = o->value();
progdefaults.changed = true;}
                    tooltip {Pilot tone power relative to signal} xywh {205 340 75 20} type Simple align 8 minimum -60 maximum -20 step 1 value -30
                    code0 {o->value(progdefaults.pilot_power);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Check_Button btnPSK8Preamble {
                    label {Short Preamble}
                    callback {progStatus.psk8DCDShortFlag = o->value();}
                    tooltip {Enable short preamble for 8PSK transmission} xywh {410 340 113 20} down_box DOWN_BOX
                    code0 {o->value(progStatus.psk8DCDShortFlag);}
                  }
                }
              }
            }
          }
          Fl_Group tabRTTY {
            label TTY open
            xywh {0 50 609 340} hide
          } {
            Fl_Tabs tabsRTTY {open
              xywh {0 50 609 340} selection_color 50
            } {
              Fl_Group tab_Rx_TTY {
                label Rx
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group {} {
                  label Receive open
                  xywh {32 101 535 69} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group i_listbox_rtty_afc_speed {
                    label {AFC speed}
                    callback {progdefaults.rtty_afcspeed = o->index();
progdefaults.changed = true;} open
                    tooltip {AFC tracking speed} xywh {107 128 90 22} box DOWN_BOX color 7
                    code0 {o->add("Slow"); o->add("Normal"); o->add("Fast");}
                    code1 {o->index(progdefaults.rtty_afcspeed);}
                    code2 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Check_Button chkUOSrx {
                    label {RX - unshift on space}
                    callback {progdefaults.UOSrx=o->value();
progdefaults.changed = true;}
                    tooltip {Revert to unshifted char's on a space} xywh {211 128 63 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.UOSrx);}
                  }
                  Fl_Value_Input rtty_rx_shape {
                    label {Filter Shape Factor}
                    callback {progdefaults.rtty_filter = o->value();
progStatus.rtty_filter_changed = true;
progdefaults.changed = true;}
                    tooltip {rcos timing coefficient:
1.0 ... 2.0
W1HKJ best 1.275
DO2SMF best 1.500} xywh {445 126 48 25} align 1 minimum 1 maximum 2 step 0.001 value 1.25 hide
                    code0 {o->value(progdefaults.rtty_filter);}
                  }
                }
                Fl_Group {} {
                  label {Decode (CWI suppression)} open
                  xywh {32 171 535 55} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button {btnRxTones[0]} {
                    label {Mark-Space}
                    callback {if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 0;
}}
                    xywh {120 198 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rtty_cwi == 0);}
                  }
                  Fl_Check_Button {btnRxTones[1]} {
                    label {Mark only}
                    callback {if (o->value()) {
  btnRxTones[0]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 1;
}}
                    xywh {253 198 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rtty_cwi == 1);}
                  }
                  Fl_Check_Button {btnRxTones[2]} {
                    label {Space only}
                    callback {if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[0]->value(0);
  progdefaults.rtty_cwi = 2;
}}
                    xywh {387 198 70 15} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rtty_cwi == 2);}
                  }
                }
                Fl_Group {} {
                  label {RTTY Scope Display} open
                  xywh {32 228 535 55} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button btnPreferXhairScope {
                    label {Use cross hair scope}
                    callback {progdefaults.PreferXhairScope=o->value();
progdefaults.changed = true;}
                    tooltip {Default to cross hair digiscope} xywh {120 250 165 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.PreferXhairScope);}
                  }
                  Fl_Check_Button chk_true_scope {
                    label {XY - classic scope}
                    callback {progdefaults.true_scope=o->value();
progdefaults.changed = true;}
                    tooltip {Enabled - use Mark/Space filter outputs
Disabled - use pseudo signals} xywh {340 250 70 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.true_scope);}
                  }
                }
                Fl_Group {} {
                  label {Log RTTY frequency} open
                  xywh {32 285 535 65} box ENGRAVED_FRAME align 21
                } {
                  Fl_Check_Button chk_useMARKfreq {
                    label {Use MARK freq'}
                    callback {progdefaults.useMARKfreq=o->value();
progdefaults.changed = true;}
                    tooltip {Enabled - log QSO using Mark frequency
Disabled - log QSO using center frequency} xywh {120 311 146 22} down_box DOWN_BOX value 1
                    code0 {o->value(progdefaults.useMARKfreq);}
                  }
                  Fl_Button btnRTTY_mark_color {
                    label {track color}
                    callback {if (fl_color_chooser("MARK freq track",
  progdefaults.rttymarkRGBI.R,
  progdefaults.rttymarkRGBI.G,
  progdefaults.rttymarkRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
                    tooltip {Color of Mark Track} xywh {340 311 41 18} color 2 align 8
                    code0 {o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));}
                  }
                }
              }
              Fl_Group tab_SndCrd_FSK {
                label Tx
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group {} {
                  label {Sound Card FSK}
                  xywh {5 85 590 225} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group selShift {
                    label {Carrier shift}
                    callback {progdefaults.rtty_shift = o->index();
sel_xcvr_FSK_shift->index(progdefaults.rtty_shift);
if (progdefaults.rtty_shift == o->lsize() - 1)
    selCustomShift->activate();
else
    selCustomShift->deactivate();
selCustomShift->redraw();
resetRTTY();
progdefaults.changed = true;} open
                    tooltip {Select carrier shift} xywh {75 109 100 22} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szShifts);o->index(progdefaults.rtty_shift);
                       o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Counter selCustomShift {
                    label {Custom shift}
                    callback {progdefaults.rtty_custom_shift = o->value();
resetRTTY();
progdefaults.changed = true;}
                    tooltip {Input carrier shift} xywh {75 142 100 22} align 8 minimum 10 maximum 1200 step 10 value 450
                    code0 {o->lstep(100.0);}
                    code1 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Group selBaud {
                    label {Baud rate}
                    callback {progdefaults.rtty_baud = o->index();
resetRTTY();
progdefaults.changed = true;} open
                    tooltip {Select carrier baudrate} xywh {75 175 100 22} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szBauds);}
                    code1 {o->index(progdefaults.rtty_baud);}
                    code2 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Group selBits {
                    label {Bits per character}
                    callback {progdefaults.rtty_bits = o->index();
selParity->do_callback();} open
                    tooltip {Select \# bits / char} xywh {75 208 100 22} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szSelBits);o->index(progdefaults.rtty_bits);
                       o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Group selParity {
                    label Parity
                    callback {if (progdefaults.rtty_bits == 0) {
  progdefaults.rtty_parity = rtty::RTTY_PARITY_NONE;
  o->index(progdefaults.rtty_parity);
} else
  progdefaults.rtty_parity = o->index();
resetRTTY();
progdefaults.changed = true;} open
                    tooltip {Select parity} xywh {75 241 100 22} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szParity);o->index(progdefaults.rtty_parity);
                       o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Group selStopBits {
                    label {Stop bits}
                    callback {progdefaults.rtty_stop = o->index();
resetRTTY();
progdefaults.changed = true;} open
                    tooltip {Select \# stop bits} xywh {75 275 100 22} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szStopBits);o->index(progdefaults.rtty_stop);
                       o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_ListBox
                  } {}
                  Fl_Value_Slider sldrRTTYbandwidth {
                    label {Filter Adjustment}
                    callback {progdefaults.RTTY_BW = o->value();
resetRTTY();
progdefaults.changed = true;}
                    tooltip {RTTY filter bandwidth} xywh {326 280 250 20} type Horizontal align 5 minimum 0.5 maximum 2 step 0.1 value 1 textsize 14
                    code0 {o->value(progdefaults.RTTY_BW);}
                    code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                    class Fl_Value_Slider2
                  }
                  Fl_Check_Button btnAUTOCRLF {
                    label AutoCRLF
                    callback {progdefaults.rtty_autocrlf = o->value();
progdefaults.changed = true;}
                    tooltip {Add CRLF after page width characters} xywh {326 109 90 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.rtty_autocrlf);}
                  }
                  Fl_Counter cntrAUTOCRLF {
                    label chars
                    callback {progdefaults.rtty_autocount = (int)o->value();
progdefaults.changed = true;}
                    tooltip {Auto CRLF line length} xywh {437 109 65 22} type Simple align 8 minimum 68 maximum 80 step 1 value 72
                    code0 {o->labelsize(FL_NORMAL_SIZE);}
                    class Fl_Counter2
                  }
                  Fl_Check_Button btnCRCRLF {
                    label {CR-CR-LF}
                    callback {progdefaults.rtty_crcrlf = o->value();
progdefaults.changed = true;}
                    tooltip {Use "cr cr lf" for "cr lf"} xywh {326 142 90 22} down_box DOWN_BOX when 6
                    code0 {o->value(progdefaults.rtty_crcrlf);}
                  }
                  Fl_Check_Button chkUOStx {
                    label {TX - unshift on space}
                    callback {progdefaults.UOStx=o->value();
progdefaults.changed = true;}
                    tooltip {Revert to Unsifted char's on a space} xywh {326 175 63 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.UOStx);}
                  }
                  Fl_Check_Button chk_shaped_rtty {
                    label {Shaped Tx}
                    callback {progStatus.shaped_rtty = o->value();}
                    tooltip {Use wave shaping on Tx signal} xywh {326 241 212 22} down_box DOWN_BOX value 1
                    code0 {o->value(progStatus.shaped_rtty);}
                  }
                  Fl_Check_Button chkPseudoFSK {
                    label {Pseudo-FSK - right channel}
                    callback {progdefaults.PseudoFSK = o->value();
chkPseudoFSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
}}
                    tooltip {Create keyed square wave on right audio channel} xywh {326 208 212 22} down_box DOWN_BOX
                    code0 {o->value(progdefaults.PseudoFSK);}
                  }
                }
                Fl_Group {} {
                  label {Transceiver FSK}
                  xywh {5 312 590 72} box ENGRAVED_FRAME align 21
                } {
                  Fl_Counter cntr_xcvr_FSK_MARK {
                    label Mark
                    callback {progdefaults.xcvr_FSK_MARK = o->value();}
                    tooltip {Mark frequency in Hertz} xywh {15 341 126 23} align 8 minimum 500 maximum 3000 step 1 value 2115
                    code0 {o->value(progdefaults.xcvr_FSK_MARK);}
                    code1 {o->lstep(10);}
                  }
                  Fl_Group sel_xcvr_FSK_shift {
                    label {Carrier shift}
                    callback {progdefaults.rtty_shift = o->index();
selShift->index(progdefaults.rtty_shift);
resetRTTY();
progdefaults.changed = true;} open
                    tooltip {Carrier shift in Hertz} xywh {198 341 100 23} box DOWN_BOX color 7 align 8 when 1
                    code0 {o->add(szShifts);}
                    code1 {o->index(progdefaults.rtty_shift);}
                    class Fl_ListBox
                  } {}
                  Fl_Counter cnt_TTY_LTRS {
                    label {LTRS at start}
                    callback {progdefaults.TTY_LTRS = (int)o->value();
progdefaults.changed = true;}
                    tooltip {Insert NN LTRS bytes at start of each transmission} xywh {405 341 80 23} type Simple align 8 minimum 0 maximum 10 step 1 value 2
                    code0 {o->value(progdefaults.TTY_LTRS);}
                  }
                }
              }
              Fl_Group tab_nanoIO {
                label {nanoIO Tx}
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Group select_nanoIO_CommPort {
                  label {Ser. Port}
                  callback {progdefaults.nanoIO_serial_port_name = o->value();} open
                  tooltip {nanoIO serial port} xywh {86 85 405 23} box DOWN_BOX color 55 align 4
                  code0 {\#include "combo.h"}
                  code1 {\#include "nanoIO.h"}
                  class Fl_ComboBox
                } {}
                Fl_Light_Button btn_nanoIO_connect {
                  label Connect
                  callback {if (o->value()) {
  btn_nanoCW_connect->value(0);
  if (!open_nanoIO())
    o->value(0);
} else {
  close_nanoIO();
}}
                  tooltip {Connect / Disconnect from nanoIO} xywh {501 85 80 23}
                }
                Fl_Group sel_nanoIO_baud {
                  label {Baud rate}
                  callback {progdefaults.nanoIO_baud = o->index();
nano_set_baud(progdefaults.nanoIO_baud);
progdefaults.changed = true;} open
                  tooltip {nanoIO - TTY baud} xywh {391 112 100 23} box DOWN_BOX color 7 align 4 when 1
                  code0 {o->add("45.45|50.0|75.0|100.0");}
                  code1 {o->index(progdefaults.nanoIO_baud);}
                  code2 {o->labelsize(FL_NORMAL_SIZE);}
                  class Fl_ListBox
                } {}
                Fl_Check_Button chk_nanoIO_polarity {
                  label {MARK polarity}
                  callback {progdefaults.nanoIO_polarity=o->value();
nano_mark_polarity(progdefaults.nanoIO_polarity);
progdefaults.changed = true;}
                  tooltip {Set - mark logical HIGH
Read from nanoIO} xywh {84 112 63 22} down_box DOWN_BOX
                  code0 {o->value(progdefaults.nanoIO_polarity);}
                }
                Fl_Text_Display txt_nano_io {
                  label {USB serial I/O}
                  xywh {4 155 590 230} align 5
                  code0 {\#include "FTextRXTX.h"}
                  code1 {o->setFont(progdefaults.RxFontnbr);}
                  code2 {o->setFontSize(12);}
                  class FTextView
                }
              }
              Fl_Group tab_Nav {
                label Navigator
                xywh {0 75 600 315} align 5 hide
                code0 {\#include "Nav.h"}
              } {
                Fl_Group {} {
                  label {FSK Interface} open
                  xywh {5 82 590 55} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group select_USN_FSK_port {
                    label Port
                    callback {progdefaults.Nav_FSK_port = o->value();} open
                    tooltip {Navigator serial port} xywh {48 105 455 23} box DOWN_BOX color 55 align 4
                    code0 {\#include "combo.h"}
                    code1 {\#include "Nav.h"}
                    code2 {o->value(progdefaults.Nav_FSK_port.c_str());}
                    class Fl_ComboBox
                  } {}
                  Fl_Light_Button btn_Nav_connect {
                    label FSK
                    callback {if (o->value()) {
  if (!open_NavFSK())
    o->value(0);
} else {
  close_NavFSK();
}}
                    tooltip {Connect / Disconnect from Nav FSK port} xywh {510 105 80 23}
                  }
                }
                Fl_Group {} {
                  label {Configuration Interface} open
                  xywh {5 140 590 245} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group select_Nav_config_port {
                    label Port
                    callback {progdefaults.Nav_config_port = o->value();} open
                    tooltip {Navigator configuration port} xywh {49 161 455 23} box DOWN_BOX color 55 align 4
                    code0 {o->value(progdefaults.Nav_config_port.c_str());}
                    class Fl_ComboBox
                  } {}
                  Fl_Group sel_Nav_ch1 {
                    label {Channel 1 Attenuator}
                    callback {progdefaults.Nav_channel_1_att = o->index();
Nav_set_channel_1_att(progdefaults.Nav_channel_1_att);
progdefaults.changed = true;} open
                    tooltip {Nav Channel 1 attenuator} xywh {177 188 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->add("15 db|Normal");}
                    code2 {o->index(progdefaults.Nav_channel_1_att);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_ch2 {
                    label {Channel 2 attenuator}
                    callback {progdefaults.Nav_channel_2_att = o->index();
Nav_set_channel_2_att(progdefaults.Nav_channel_2_att);
progdefaults.changed = true;} open
                    tooltip {NavChannel 2 Attenuator} xywh {177 217 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->add("15 db|Normal");}
                    code2 {o->index(progdefaults.Nav_channel_2_att);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_rf_att {
                    label {RF attenuator}
                    callback {progdefaults.Nav_rf_att = o->index();
Nav_set_rf_att(progdefaults.Nav_rf_att);
progdefaults.changed = true;} open
                    tooltip {NavRF Attenuator} xywh {177 247 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->add("20 db|Normal");}
                    code2 {o->index(progdefaults.Nav_rf_att);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_wk_ptt {
                    label {WinKey PTT}
                    callback {progdefaults.Nav_wk_ptt = o->index();
Nav_set_wk_ptt(progdefaults.Nav_wk_ptt);
progdefaults.changed = true;} open
                    tooltip {NavWinkey PTT} xywh {177 277 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->index(progdefaults.Nav_wk_ptt);}
                    code2 {o->add("On|Off");}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_LED {
                    label {LED brightness}
                    callback {progdefaults.Nav_led = o->index();
Nav_set_led(progdefaults.Nav_led);
progdefaults.changed = true;} open
                    tooltip {NavLED brightness} xywh {177 307 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->index(progdefaults.Nav_led);}
                    code2 {o->add("Dim|Normal");}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_CAT_LED {
                    label {CAT LED state}
                    callback {progdefaults.Nav_cat_led = o->index();
Nav_set_cat_led(progdefaults.Nav_cat_led);
progdefaults.changed = true;} open
                    tooltip {NavCAT state LED} xywh {177 337 80 23} box DOWN_BOX color 7 align 4 when 1
                    code1 {o->index(progdefaults.Nav_cat_led);}
                    code2 {o->add("Steady|Polling");}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_FSK_baud {
                    label {Baud rate}
                    callback {progdefaults.Nav_FSK_baud = o->index();
Nav_set_baud(progdefaults.Nav_FSK_baud);
progdefaults.changed = true;} open
                    tooltip {Nav FSK baud rate} xywh {385 188 80 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("45.45|75|100");}
                    code1 {o->index(progdefaults.Nav_FSK_baud);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_FSK_stopbits {
                    label {Stop bits}
                    callback {progdefaults.Nav_FSK_stopbits = o->index();
Nav_set_stopbits(progdefaults.Nav_FSK_stopbits);
progdefaults.changed = true;} open
                    tooltip {Nav FSK Stop bits} xywh {384 217 80 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("1|1.5|2");}
                    code1 {o->index(progdefaults.Nav_FSK_stopbits);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_FSK_polarity {
                    label {Mark Polarity}
                    callback {progdefaults.Nav_FSK_polarity = o->index();
Nav_set_polarity(progdefaults.Nav_FSK_polarity);
progdefaults.changed = true;} open
                    tooltip {Nav FSK MARK Polarity} xywh {384 247 80 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Normal|Reverse");}
                    code1 {o->index(progdefaults.Nav_FSK_polarity);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_FSK_sidetone {
                    label {Side tone}
                    callback {progdefaults.Nav_FSK_sidetone = o->index();
Nav_set_sidetone(progdefaults.Nav_FSK_sidetone);
progdefaults.changed = true;} open
                    tooltip {Nav FSK side tone} xywh {384 277 80 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("On|Off");}
                    code1 {o->index(progdefaults.Nav_FSK_sidetone);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_Nav_FSK_ptt {
                    label {FSK PTT}
                    callback {progdefaults.Nav_FSK_ptt = o->index();
Nav_set_ptt(progdefaults.Nav_FSK_ptt);
progdefaults.changed = true;} open
                    tooltip {Nav FSK PTT - should always be on} xywh {384 307 80 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("On|Off");}
                    code1 {o->index(progdefaults.Nav_FSK_ptt);}
                    class Fl_ListBox
                  } {}
                  Fl_Light_Button btn_Nav_config {
                    label Config
                    callback {if (o->value()) {
  if (!open_NavConfig())
    o->value(0);
} else {
  close_NavConfig();
}}
                    tooltip {Connect / Disconnect from Nav Config port} xywh {509 161 80 23}
                  }
                }
              }
              Fl_Group tab_Synop {
                label Synop
                xywh {0 75 600 315} align 5 hide
              } {
                Fl_Check_Button btnSynopAdifDecoding {
                  label {SYNOP to ADIF}
                  callback {progdefaults.SynopAdifDecoding=o->value();
progdefaults.changed = true;}
                  tooltip {Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to ADIF log file} xywh {190 91 126 22} down_box DOWN_BOX align 148
                  code0 {o->value(progdefaults.SynopAdifDecoding);}
                }
                Fl_Check_Button btnSynopKmlDecoding {
                  label {SYNOP to KML}
                  callback {progdefaults.SynopKmlDecoding=o->value();
progdefaults.changed = true;}
                  tooltip {Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to KML documents (Ex: Google Earth)} xywh {190 129 119 22} down_box DOWN_BOX align 148
                  code0 {o->value(progdefaults.SynopKmlDecoding);}
                }
                Fl_Check_Button btnSynopInterleaved {
                  label {Interleave SYNOP and text}
                  callback {progdefaults.SynopInterleaved=o->value();
progdefaults.changed = true;}
                  tooltip {Interleave text with decoded SYNOP messages, or replacement.} xywh {190 168 210 22} down_box DOWN_BOX align 148
                  code0 {o->value(progdefaults.SynopInterleaved);}
                }
              }
              Fl_Group tab_WKFSK {
                label {Winkeyer 3} open
                xywh {0 75 609 315} align 5
                code0 {\#include "winkeyer.h"}
              } {
                Fl_Group {} {
                  label {Serial Interface} open
                  xywh {5 82 590 55} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group select_WKFSK_CommPort {
                    label Port
                    callback {progStatus.WK_serial_port_name = o->value();
select_WK_CommPort->value(progStatus.WK_serial_port_name.c_str());} open
                    tooltip {Xcvr serial port} xywh {73 105 405 23} box DOWN_BOX color 55 align 4
                    code0 {\#include "combo.h"}
                    code1 {o->value(progStatus.WK_serial_port_name.c_str());}
                    class Fl_ComboBox
                  } {}
                  Fl_Light_Button btn_WKFSK_connect {
                    label Connect
                    callback {WKFSK_connect(o->value());}
                    tooltip {Connect / Disconnect from WinKeyer} xywh {504 105 80 23}
                    code0 {o->value(progStatus.WK_online);}
                  }
                }
                Fl_Group {} {
                  label {Configuration Interface} open
                  xywh {5 140 590 245} box ENGRAVED_FRAME align 21
                } {
                  Fl_Group sel_WKFSK_baud {
                    label {Baud rate}
                    callback {progStatus.WKFSK_baud = o->index();
WKFSK_init();} open
                    tooltip {Nav FSK baud rate} xywh {190 178 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("45.45|50|75|100");}
                    code1 {o->index(progStatus.WKFSK_baud);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_stopbits {
                    label {Stop bits}
                    callback {progStatus.WKFSK_stopbits = o->index();
WKFSK_init();} open
                    tooltip {Nav FSK Stop bits} xywh {190 207 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("2|1.5");}
                    code1 {o->index(progStatus.WKFSK_stopbits);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_ptt {
                    label {FSK port}
                    callback {progStatus.WKFSK_ptt = o->index();
WKFSK_init();} open
                    tooltip {NavWinkey PTT} xywh {190 236 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("On PTT|On KEY");}
                    code1 {o->index(progStatus.WKFSK_ptt);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_polarity {
                    label {Mark Polarity}
                    callback {progStatus.WKFSK_polarity = o->index();
WKFSK_init();} open
                    tooltip {Nav FSK MARK Polarity} xywh {190 266 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Normal|Reverse");}
                    code1 {o->index(progStatus.WKFSK_polarity);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_sidetone {
                    label Sidetone
                    callback {progStatus.WKFSK_sidetone = o->index();
WKFSK_init();} open
                    tooltip {Nav FSK side tone} xywh {190 295 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Off|On");}
                    code1 {o->index(progStatus.WKFSK_sidetone);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_auto_crlf {
                    label {Auto CRLF}
                    callback {progStatus.WKFSK_auto_crlf = o->index();
WKFSK_init();} open
                    tooltip {Nav FSK side tone} xywh {190 325 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Off|On");}
                    code1 {o->index(progStatus.WKFSK_auto_crlf);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_diddle {
                    label Diddle
                    callback {progStatus.WKFSK_diddle = o->index();
WKFSK_init();} open
                    tooltip {Diddle On/OFF} xywh {380 178 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Off|On");}
                    code1 {o->index(progStatus.WKFSK_diddle);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_diddle_char {
                    label {Diddle char}
                    callback {progStatus.WKFSK_diddle_char = o->index();
WKFSK_init();} open
                    tooltip {Diddle character} xywh {380 207 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("BLANK|LTRS");}
                    code1 {o->index(progStatus.WKFSK_diddle_char);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_usos {
                    label USOS
                    callback {progStatus.WKFSK_usos = o->index();
WKFSK_init();} open
                    tooltip {Unshift on space} xywh {380 236 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Off|On");}
                    code1 {o->index(progStatus.WKFSK_usos);}
                    class Fl_ListBox
                  } {}
                  Fl_Group sel_WKFSK_monitor {
                    label Echo
                    callback {progStatus.WKFSK_monitor = o->index();
WKFSK_init();} open
                    tooltip {Unshift on space} xywh {380 266 78 23} box DOWN_BOX color 7 align 4 when 1
                    code0 {o->add("Off|On");}
                    code1 {o->index(progStatus.WKFSK_monitor);}
                    class Fl_ListBox
                  } {}
                }
              }
            }
          }
          Fl_Group tabTHOR {
            label Thor
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 78 490 270} box ENGRAVED_FRAME
            } {
              Fl_Input txtTHORSecondary {
                label {Secondary Text}
                callback {progdefaults.THORsecText = o->value();
progdefaults.changed = true;}
                tooltip {Text to send during keyboard idle times} xywh {84 105 430 40} type Multiline align 5 when 1
                code0 {txtTHORSecondary->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Check_Button valTHOR_FILTER {
                label Filtering
                callback {progdefaults.THOR_FILTER = o->value();
resetTHOR();
progdefaults.changed = true;}
                tooltip {Enable DSP prior to decoder} xywh {84 159 80 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.THOR_FILTER);}
              }
              Fl_Counter valTHOR_BW {
                label {Filter bandwidth factor}
                callback {progdefaults.THOR_BW = o->value();
resetTHOR();
progdefaults.changed = true;}
                tooltip {Filter bandwidth relative to signal width} xywh {229 159 63 20} type Simple align 8 minimum 1 maximum 2 value 1.5
                code0 {o->value(progdefaults.THOR_BW);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Value_Slider valThorCWI {
                label {CWI threshold}
                callback {progdefaults.ThorCWI = o->value();
progdefaults.changed = true;}
                tooltip {CWI detection and suppression} xywh {84 212 260 20} type Horizontal align 1 textsize 14
                code0 {o->value(progdefaults.ThorCWI);}
                code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
              Fl_Check_Button valTHOR_PREAMBLE {
                label {Preamble Detection}
                callback {progdefaults.THOR_PREAMBLE = o->value();
progdefaults.changed = true;}
                tooltip {Detect the THOR preamble
Clear the Rx pipeline} xywh {84 254 200 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.THOR_PREAMBLE);}
              }
              Fl_Check_Button valTHOR_SOFTSYMBOLS {
                label {Soft-symbol decoding}
                callback {progdefaults.THOR_SOFTSYMBOLS = o->value();
progdefaults.changed = true;}
                tooltip {Use soft-decision decoding for symbol detection
Assists soft-bit decoding} xywh {84 284 190 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.THOR_SOFTSYMBOLS);}
              }
              Fl_Check_Button valTHOR_SOFTBITS {
                label {Soft-bit decoding}
                callback {progdefaults.THOR_SOFTBITS = o->value();
progdefaults.changed = true;}
                tooltip {Use soft-bit viterbi decoding for better Forward Error Correction
Works best with soft-symbol decoding enabled} xywh {84 314 170 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.THOR_SOFTBITS);}
              }
              Fl_Counter valTHOR_PATHS {
                label {Paths (hidden)}
                callback {progdefaults.THOR_PATHS = (int)o->value();
progdefaults.changed = true;}
                xywh {431 303 75 21} type Simple align 1 minimum 4 maximum 8 step 1 value 5
                code0 {o->value(progdefaults.THOR_PATHS);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                code2 {o->hide();}
                class Fl_Counter2
              }
            }
          }
          Fl_Group tabOther {
            label Other open
            xywh {0 50 600 340} hide
          } {
            Fl_Tabs tabsOther {open
              xywh {0 50 600 340}
            } {
              Fl_Group tabNavtex {
                label Nav
                xywh {0 75 600 315} hide
              } {
                Fl_Check_Button btnNvtxAdifLog {
                  label {Log Navtex messages to Adif file}
                  callback {progdefaults.NVTX_AdifLog=o->value();
progdefaults.changed = true;}
                  xywh {181 109 235 30} down_box DOWN_BOX
                  code0 {o->value(progdefaults.NVTX_AdifLog);}
                }
                Fl_Check_Button btnNvtxKmlLog {
                  label {Log Navtex messages to KML}
                  callback {progdefaults.NVTX_KmlLog=o->value();
progdefaults.changed = true;}
                  tooltip {Logs messages to Keyhole Markup Language (Google Earth, Marble, Gaia, etc...)} xywh {180 155 270 30} down_box DOWN_BOX
                  code0 {o->value(progdefaults.NVTX_KmlLog);}
                }
              }
              Fl_Group tabWefax {
                label WFx
                xywh {0 75 600 315}
              } {
                Fl_Group {} {open
                  xywh {2 79 598 285}
                } {
                  Fl_Check_Button btnWefaxAdifLog {
                    label {Log Wefax messages to Adif file}
                    callback {progdefaults.WEFAX_AdifLog=o->value();
progdefaults.changed = true;}
                    tooltip {Sent and received faxes are logged to Adif file.} xywh {99 155 235 30} down_box DOWN_BOX
                    code0 {o->value(progdefaults.WEFAX_AdifLog);}
                  }
                  Fl_Check_Button btnWefaxEmbeddedGui {
                    label {Embedded Wefax Gui}
                    callback {progdefaults.WEFAX_EmbeddedGui=o->value();
progdefaults.changed = true;}
                    tooltip {Display tx and rx in main fldigi window.
Change requires restart of fldigi} xywh {99 92 235 30} down_box DOWN_BOX
                    code0 {o->value(progdefaults.WEFAX_EmbeddedGui);}
                  }
                  Fl_Input btnWefaxShift {
                    label {Frequency shift (800 Hz)}
                    callback {if( o->value() > 900 ) { o->value(900); return; }
if( o->value() < 750 ) { o->value(750); return; }
progdefaults.WEFAX_Shift=o->value();
progdefaults.changed = true;}
                    tooltip {Default 800 Hz. Deutsche Wetterdienst 850Hz} xywh {99 195 80 20} type Int align 8
                    code0 {o->value(progdefaults.WEFAX_Shift);}
                    class Fl_Value_Input2
                  }
                  Fl_Input btnWefaxMaxRows {
                    label {Received fax maximum rows number (5000)}
                    callback {if(o->value() > 10000 ) { o->value(10000); return ; }
if(o->value() < 1000 ) { o->value(1000); return ; }
progdefaults.WEFAX_MaxRows=o->value();
progdefaults.changed = true;}
                    tooltip {Maximum row number for a received fax image.} xywh {99 235 85 20} type Int align 8
                    code0 {o->value(progdefaults.WEFAX_MaxRows);}
                    class Fl_Value_Input2
                  }
                  Fl_Input btnWefaxSaveDir {
                    label {Fax images destination directory}
                    callback {progdefaults.wefax_save_dir=o->value();
progdefaults.changed = true;}
                    xywh {99 285 310 20} align 5
                    code0 {o->value(progdefaults.wefax_save_dir.c_str());}
                  }
                  Fl_Button btnSelectFaxDestDir {
                    label {Directory...}
                    callback {Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(WefaxDestDirSet);
fc->show();}
                    xywh {429 285 80 20}
                  }
                  Fl_Check_Button btnWefaxHideTx {
                    label {Hide Transmission window}
                    callback {progdefaults.WEFAX_HideTx=o->value();
progdefaults.changed = true;}
                    tooltip {Hide transmission window by default.} xywh {99 125 235 30} down_box DOWN_BOX
                    code0 {o->value(progdefaults.WEFAX_HideTx);}
                  }
                  Fl_Check_Button btnWefaxSaveMonochrome {
                    label {Save image as monochrome file}
                    callback {progdefaults.WEFAX_SaveMonochrome=o->value();
progdefaults.changed = true;}
                    tooltip {Save the fax image as a gray-level PNG file.} xywh {99 315 235 30} down_box DOWN_BOX
                    code0 {o->value(progdefaults.WEFAX_SaveMonochrome);}
                  }
                }
              }
            }
          }
        }
      }
      Fl_Group tabRig {
        label Rig open
        xywh {0 25 600 365} hide
      } {
        Fl_Tabs tabsRig {open
          xywh {0 25 600 365} selection_color 50
        } {
          Fl_Group tabFLRIG {
            label flrig open
            xywh {0 50 600 340}
          } {
            Fl_Group {} {
              label {"Disable PTT keys modem if multiple instances of fldigi (client)
are connected to a single flrig (server).} open
              xywh {10 210 580 90} box ENGRAVED_BOX align 17
            } {
              Fl_Check_Button chk_flrig_keys_modem {
                label {Flrig PTT keys modem}
                callback {progdefaults.flrig_keys_modem = o->value();
progdefaults.changed = true;}
                tooltip {" "} xywh {240 258 183 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.flrig_keys_modem);}
              }
            }
            Fl_Group {} {
              label {flrig xmlrpc server parameters
these controls are mirrored on the IO configuration tab} open
              xywh {10 125 580 81} box ENGRAVED_FRAME align 21
            } {
              Fl_Button btnDefault_flrig_ip_mirror {
                label Default
                callback {set_ip_to_default(FLRIG_IO);
txt_flrig_ip_address_mirror->value(progdefaults.flrig_ip_address.c_str());
txt_flrig_ip_port_mirror->value(progdefaults.flrig_ip_port.c_str());
progdefaults.changed = true;}
                tooltip {Returns IP Address and port
number to the default value.} xywh {414 171 73 24}
              }
              Fl_Input txt_flrig_ip_address_mirror {
                label Addr
                callback {progdefaults.flrig_ip_address = o->value();
txt_flrig_ip_address->value(progdefaults.flrig_ip_address.c_str());
progdefaults.changed = true;}
                tooltip {IP Address for flrig interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {45 171 230 24} align 8 when 1
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                code1 {o->value(progdefaults.flrig_ip_address.c_str());}
                class Fl_Input2
              }
              Fl_Input txt_flrig_ip_port_mirror {
                label Port
                callback {progdefaults.flrig_ip_port = o->value();
txt_flrig_ip_port->value(progdefaults.flrig_ip_port.c_str());
progdefaults.changed = true;}
                tooltip {IP Address Port Number} xywh {319 171 55 24} align 8 when 1
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                code1 {o->value(progdefaults.flrig_ip_port.c_str());}
                class Fl_Input2
              }
              Fl_Button btn_reconnect_flrig_server_mirror {
                label Reconnect
                callback {reconnect_to_flrig();}
                tooltip {Press only if you change the address/port} xywh {494 171 82 24}
                code0 {\#include "rigsupport.h"}
              }
            }
            Fl_Group {} {
              label {flrig is the preferred method of tranceiver control} open
              xywh {10 68 580 52} box ENGRAVED_BOX align 17
            } {
              Fl_Check_Button btn_fldigi_client_to_fldigi {
                label {Enable flrig xcvr control with fldigi as client}
                callback {progdefaults.fldigi_client_to_flrig=o->value();
if (o->value()) {
  progdefaults.chkUSEHAMLIBis = false;
  progdefaults.chkUSERIGCATis = false;
  chkUSEHAMLIB->value(0);
  chkUSERIGCAT->value(0);
}
progdefaults.changed=true;}
                tooltip {Disable if flrig not used.} xywh {35 95 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.fldigi_client_to_flrig);}
              }
            }
          }
          Fl_Group {} {
            label RigCAT open
            xywh {0 50 600 340} hide
          } {
            Fl_Check_Button chkUSERIGCAT {
              label {Use RigCAT}
              callback {if (o->value() == 1) {
  chkUSEHAMLIB->value(0);
  btn_fldigi_client_to_fldigi->value(0);
  progdefaults.chkUSERIGCATis = true;
  progdefaults.fldigi_client_to_flrig = false;
  btnInitRIGCAT->labelcolor(FL_RED);
  btnInitRIGCAT->redraw();
} else {
  progdefaults.chkUSERIGCATis = false;
  progdefaults.initInterface();
}
progdefaults.changed=true;}
              tooltip {RigCAT used for rig control} xywh {245 60 110 20} down_box DOWN_BOX
            }
            Fl_Group grpRigCAT {open
              xywh {55 83 490 279} box ENGRAVED_FRAME
            } {
              Fl_Output txtXmlRigFilename {
                label {Rig description file:}
                tooltip {Use Open to select descriptor file} xywh {65 107 130 22} color 52 align 5
                code0 {o->value(fl_filename_name(progdefaults.XmlRigFilename.c_str()));}
              }
              Fl_Button btnSelectRigXmlFile {
                label {Open...}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
selectRigXmlFilename();}
                tooltip {Select rig descriptor file} xywh {198 107 60 22}
              }
              Fl_Group inpXmlRigDevice {
                label {Device:}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();} open
                xywh {391 107 144 22} box DOWN_BOX color 7 align 4
                code0 {o->value(progdefaults.XmlRigDevice.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ComboBox
              } {}
              Fl_Value_Input cntRigCatRetries {
                label Retries
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {\# retries before giving up} xywh {80 150 60 22} align 5 maximum 1000 step 1
                code0 {o->value(progdefaults.RigCatRetries);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input cntRigCatTimeout {
                label {Retry interval (ms)}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Time between retires in msec} xywh {210 150 60 22} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.RigCatTimeout);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input cntRigCatWait {
                label {Write delay (ms)}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Wait for response to subsequent command} xywh {80 190 60 22} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.RigCatWait);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Group listbox_xml_rig_baudrate {
                label {Baud rate:}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();} open
                xywh {436 150 99 22} box DOWN_BOX color 7 align 4
                code0 {o->add(szBaudRates);}
                code1 {o->index(progdefaults.XmlRigBaudrate);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Counter valRigCatStopbits {
                label Stopbits
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();}
                xywh {438 184 95 21} type Simple align 4 minimum 1 maximum 2 step 1 value 1
                code0 {o->value(progdefaults.RigCatStopbits);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Button btnInitRIGCAT {
                label Initialize
                callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
                tooltip {Initialize RigCAT interface} xywh {415 321 113 24}
              }
              Fl_Check_Button btnRigCatEcho {
                label {Commands are echoed}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
progdefaults.changed = true;}
                tooltip {Rig or interface echos serial data} xywh {100 216 192 22} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatECHO);}
              }
              Fl_Round_Button btnRigCatCMDptt {
                label {CAT command for PTT}
                callback {if (o->value()== 1) {
btnRigCatRTSptt->value(0);
btnRigCatDTRptt->value(0);
progdefaults.RigCatCMDptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatCMDptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();}
                tooltip {PTT is a CAT command (not hardware)} xywh {306 217 207 20} down_box DOWN_BOX selection_color 1
                code0 {o->value(progdefaults.RigCatCMDptt);}
              }
              Fl_Round_Button btnRigCatRTSptt {
                label {Toggle RTS for PTT}
                callback {if (o->value() == 1) {
btnRigCatCMDptt->value(0);
progdefaults.RigCatRTSptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatRTSptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {RTS is ptt line} xywh {100 246 160 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatRTSptt);}
              }
              Fl_Round_Button btnRigCatDTRptt {
                label {Toggle DTR for PTT}
                callback {if (o->value() == 1) {
btnRigCatCMDptt->value(0);
progdefaults.RigCatDTRptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatDTRptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {DTR is ptt line} xywh {306 244 160 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatDTRptt);}
              }
              Fl_Check_Button btnRigCatRTSplus {
                label {RTS +12 v}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Initial state of RTS} xywh {100 275 100 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatRTSplus);}
              }
              Fl_Check_Button btnRigCatDTRplus {
                label {DTR +12 v}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Initial state of DTR} xywh {306 272 100 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatDTRplus);}
              }
              Fl_Check_Button chkRigCatRTSCTSflow {
                label {RTS/CTS flow control}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Rig uses RTS/CTS handshake} xywh {100 303 170 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatRTSCTSflow);}
              }
              Fl_Check_Button chk_restore_tio {
                label {Restore UART Settings on Close}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Restore the serial (COM) port settings} xywh {100 332 205 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatRestoreTIO);}
              }
              Fl_Check_Button chkRigCatVSP {
                label {VSP Enable}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Virtual Serial Port Emulator - suppress WARNINGS} xywh {306 300 100 25} down_box DOWN_BOX
                code0 {o->value(progdefaults.RigCatVSP);}
              }
              Fl_Value_Input cntRigCatInitDelay {
                label {Init delay (ms)}
                callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
                tooltip {Wait for response to first CAT command} xywh {210 190 75 22} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.RigCatInitDelay);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
            }
          }
          Fl_Group tabHamlib {
            label Hamlib open
            xywh {0 50 600 340} hide
          } {
            Fl_Check_Button chkUSEHAMLIB {
              label {Use Hamlib}
              callback {progdefaults.chkUSEHAMLIBis = o->value();
if (o->value() == 1) {
  chkUSERIGCAT->value(0);
  btn_fldigi_client_to_fldigi->value(0);
  progdefaults.chkUSERIGCATis = false;
  progdefaults.fldigi_client_to_flrig = false;
  btnInitHAMLIB->labelcolor(FL_RED);
  btnInitHAMLIB->activate();
  btnInitHAMLIB->redraw();
} else {
  progdefaults.initInterface();
}

progdefaults.changed = true;}
              tooltip {Hamlib used for rig control} xywh {250 59 100 20} down_box DOWN_BOX
            }
            Fl_Group grpHamlib {open
              xywh {5 88 585 294} box ENGRAVED_FRAME
            } {
              Fl_Group cboHamlibRig {
                label {Rig:}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
\#if USE_HAMLIB
hamlib_get_defaults();
\#endif} open
                xywh {41 98 250 22} box DOWN_BOX color 7 align 4
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group inpRIGdev {
                label {Device:}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();} open
                xywh {355 98 220 22} box DOWN_BOX color 7 align 4
                code0 {o->value(progdefaults.HamRigDevice.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ComboBox
              } {}
              Fl_Value_Input cntHamlibRetries {
                label Retries
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {\# times to resend command before giving up} xywh {40 138 70 24} align 5 maximum 1000 step 1
                code0 {o->value(progdefaults.HamlibRetries);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input cntHamlibTimeout {
                label {Retry Interval (msec)}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Msec's between retries} xywh {180 138 70 24} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.HamlibTimeout);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input cntHamlibWriteDelay {
                label {Write delay (msec)}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Msec's between sequential commands} xywh {40 181 70 24} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.HamlibWriteDelay);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input cntHamlibWait {
                label {Post write delay (msec)}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Wait interval (msecs) before reading response} xywh {180 181 70 24} align 5 maximum 10000 step 1
                code0 {o->value(progdefaults.HamlibWait);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Group listbox_baudrate {
                label {Baud rate:}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();} open
                xywh {476 126 99 22} box DOWN_BOX color 7 align 4
                code0 {o->add(szBaudRates);}
                code1 {o->index(progdefaults.HamRigBaudrate);
                       o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Counter valHamRigStopbits {
                label Stopbits
                callback {progdefaults.HamRigStopbits = (int)o->value();
progdefaults.changed = true;}
                xywh {480 154 95 21} type Simple align 4 minimum 1 maximum 2 step 1 value 1
                code0 {o->value(progdefaults.HamRigStopbits);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter valHamRigPollrate {
                label {Polling Interval (msec)}
                callback {progdefaults.HamRigPollrate = (int)o->value();
progdefaults.changed = true;}
                xywh {480 182 95 21} type Simple align 4 minimum 100 maximum 2000 step 50 value 100
                code0 {o->value(progdefaults.HamRigPollrate);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Check_Button btnHamlibCMDptt {
                label {PTT via Hamlib command}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
if (o->value()) {
progdefaults.HamlibCMDptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt = false;
} else
progdefaults.HamlibCMDptt = false;

progdefaults.changed = true;}
                tooltip {PTT using hamlib command} xywh {55 229 215 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HamlibCMDptt);}
              }
              Fl_Check_Button btnHamlibPTT_ON_DATA {
                label {Audio on Auxiliary Port}
                callback {progdefaults.hamlib_ptt_on_data = o->value();}
                tooltip {PTT enables auxiliary audio source} xywh {55 254 215 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.hamlib_ptt_on_data);}
              }
              Fl_Check_Button btnHamlibDTRplus {
                label {DTR +12}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Initial state of DTR} xywh {55 280 90 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HamlibDTRplus);}
              }
              Fl_Check_Button chkHamlibRTSplus {
                label {RTS +12}
                callback {if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Initial state of RTS} xywh {245 280 85 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HamlibRTSplus);}
              }
              Fl_Check_Button chkHamlibRTSCTSflow {
                label {RTS/CTS flow control}
                callback {if (o->value() == 1) {
  chkHamlibXONXOFFflow->value(0);
  chkHamlibRTSplus->deactivate();
} else
  chkHamlibRTSplus->activate();
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Rig requires RTS/CTS flow control} xywh {55 306 170 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HamlibRTSCTSflow);}
                code1 {if (o->value()) chkHamlibRTSplus->deactivate();}
              }
              Fl_Check_Button chkHamlibXONXOFFflow {
                label {XON/XOFF flow control}
                callback {if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Rig requires Xon/Xoff flow control} xywh {245 306 185 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.HamlibXONXOFFflow);}
              }
              Fl_Check_Button chk_hamlib_cw_is_lsb {
                label {CW is LSB mode}
                callback {progdefaults.hamlib_cw_islsb = o->value();}
                tooltip {Check if xcvr uses LSB for CW} xywh {435 280 142 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.hamlib_cw_islsb);}
              }
              Fl_Check_Button chk_hamlib_rtty_is_usb {
                label {RTTY is USB mode}
                callback {progdefaults.hamlib_rtty_isusb = o->value();}
                tooltip {Check if xcvr uses USB for RTTY} xywh {435 306 152 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.hamlib_rtty_isusb);}
              }
              Fl_Counter val_hamlib_mode_delay {
                label {Mode delay (msec)}
                callback {progdefaults.hamlib_mode_delay = (int)o->value();
progdefaults.changed = true;}
                tooltip {Delay NN msec after executing mode change} xywh {480 228 95 21} type Simple align 4 minimum 0 maximum 2000 step 100 value 200
                code0 {o->value(progdefaults.hamlib_mode_delay);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Group listbox_sideband {
                label {Sideband:} open
                xywh {431 253 144 22} box DOWN_BOX color 7 align 4
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Input inpHamlibConfig {
                label {Advanced configuration:}
                callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
                tooltip {Optional configuration
in format: param=val ...} xywh {30 350 460 24} align 5
                code0 {inpHamlibConfig->value(progdefaults.HamConfig.c_str());}
                code1 {inpHamlibConfig->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Button btnInitHAMLIB {
                label Initialize
                callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
                tooltip {Initialize hamlib interface} xywh {495 350 80 24}
              }
            }
          }
          Fl_Group {} {
            label {Hardware PTT} open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              xywh {10 57 580 38} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btnPTTrightchannel {
                label {PTT tone on right audio channel }
                callback {progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel2->value(o->value());

if (o->value()) {
progdefaults.QSK = false;
btnQSK->value(0);
progdefaults.PseudoFSK = false;
chkPseudoFSK->value(0);
progdefaults.sig_on_right_channel = false;
chkAudioStereoOut->value(0);
}

progdefaults.changed = true;}
                tooltip {Can be used in lieu of or in addition to other PTT types} xywh {74 66 250 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.PTTrightchannel);}
              }
            }
            Fl_Group grpHWPTT {
              label {h/w ptt device-pin} open
              xywh {10 97 580 184} box ENGRAVED_FRAME align 21
            } {
              Fl_Round_Button btnTTYptt {
                label {Use separate serial port PTT}
                callback {btnUsePPortPTT->value(false);
btnUseUHrouterPTT->value(false);

if (o->value()) {
progdefaults.TTYptt = true;
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.TTYptt = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                xywh {25 124 220 20} down_box DOWN_BOX selection_color 1
              }
              Fl_Group inpTTYdev {
                label {Device:}
                callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;} open
                xywh {18 165 350 22} box DOWN_BOX color 7 align 5
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ComboBox
              } {}
              Fl_Round_Button btnSCU_17 {
                label {Port is second SCU-17 device}
                callback {progdefaults.SCU_17=o->value();
progdefaults.changed = true;}
                tooltip {Driver requires stop bits to be ZERO!} xywh {260 124 236 20} down_box DOWN_BOX selection_color 1
                code0 {o->value(progdefaults.SCU_17);}
              }
              Fl_Round_Button btnUsePPortPTT {
                label {Use parallel port PTT}
                callback {btnTTYptt->value(0);
btnUseUHrouterPTT->value(0);

if (o->value()) {
progdefaults.UsePPortPTT = true;
progdefaults.TTYptt =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.UsePPortPTT = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                xywh {25 213 170 20} down_box DOWN_BOX selection_color 1
              }
              Fl_Round_Button btnUseUHrouterPTT {
                label {Use uHRouter PTT}
                callback {btnTTYptt->value(0);
btnUsePPortPTT->value(0);

if (o->value()) {
progdefaults.UseUHrouterPTT = true;
progdefaults.TTYptt =
progdefaults.UsePPortPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.UseUHrouterPTT = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                xywh {25 245 170 20} down_box DOWN_BOX selection_color 1
              }
              Fl_Round_Button btnRTSptt {
                label {Use RTS}
                callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                tooltip {RTS is PTT signal line} xywh {380 153 85 20} down_box DOWN_BOX
              }
              Fl_Round_Button btnRTSplusV {
                label {RTS = +V}
                callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                tooltip {Initial voltage on RTS} xywh {471 153 100 20} down_box DOWN_BOX
              }
              Fl_Round_Button btnDTRptt {
                label {Use DTR}
                callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                tooltip {DTR is PTT signal line} xywh {380 185 85 20} down_box DOWN_BOX
              }
              Fl_Round_Button btnDTRplusV {
                label {DTR = +V}
                callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
                tooltip {Initial voltage on DTR} xywh {471 185 100 20} down_box DOWN_BOX
              }
              Fl_Button btnInitHWPTT {
                label Initialize
                callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
                tooltip {Initialize the H/W PTT interface} xywh {450 242 113 24}
              }
            }
            Fl_Group grpPTTdelays {
              label {PTT delays valid for all CAT/PTT types}
              xywh {10 284 580 91} box ENGRAVED_FRAME align 21
            } {
              Fl_Counter cntPTT_on_delay {
                label {Start of transmit PTT delay}
                callback {progdefaults.PTT_on_delay = o->value();
progdefaults.changed = true;}
                tooltip {Delay NN msec before starting audio} xywh {74 311 100 21} align 8 minimum 0 maximum 5000 step 10
                code0 {o->value(progdefaults.PTT_on_delay);}
                code1 {o->lstep(100);}
              }
              Fl_Counter cntPTT_off_delay {
                label {PTT end of transmit delay}
                callback {progdefaults.PTT_off_delay = o->value();
progdefaults.changed = true;}
                tooltip {Delay NN msec before releasing PTT} xywh {74 341 100 21} align 8 minimum 0 maximum 5000 step 10
                code0 {o->value(progdefaults.PTT_off_delay);}
                code1 {o->lstep(100);}
              }
            }
          }
          Fl_Group {} {
            label GPIO open
            xywh {0 50 600 340} hide
          } {
            Fl_Box {} {
              label {BCM GPIO  pin    Value}
              xywh {70 96 189 17} labelfont 4 align 20
            }
            Fl_Check_Button {btn_enable_gpio[0]} {
              label {17   00   11}
              callback {if (o->value()){
  progdefaults.enable_gpio |= 1;
  export_gpio(0);
} else {
  progdefaults.enable_gpio &= ~1;
  unexport_gpio(0);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 121 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value(progdefaults.enable_gpio & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[1]} {
              label {18   01   12}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<1);
  export_gpio(1);
} else {
  progdefaults.enable_gpio &= ~(1<<1);
  unexport_gpio(1);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 150 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 1) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[2]} {
              label {27   02   13}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<2);
  export_gpio(2);
} else {
  progdefaults.enable_gpio &= ~(1<<2);
  unexport_gpio(2);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 180 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 2) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[3]} {
              label {22   03   15}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<3);
  export_gpio(3);
} else {
  progdefaults.enable_gpio &= ~(1<<3);
  unexport_gpio(3);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 210 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 3) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[4]} {
              label {23   04   16}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<4);
  export_gpio(4);
} else {
  progdefaults.enable_gpio &= ~(1<<4);
  unexport_gpio(4);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 240 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 4) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[5]} {
              label {24   05   18}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<5);
  export_gpio(5);
} else {
  progdefaults.enable_gpio &= ~(1<<5);
  unexport_gpio(5);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 270 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 5) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[6]} {
              label {25   06   22}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<6);
  export_gpio(6);
} else {
  progdefaults.enable_gpio &= ~(1<<6);
  unexport_gpio(6);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 300 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 6) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[7]} {
              label { 4   07    7}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<7);
  export_gpio(7);
} else {
  progdefaults.enable_gpio &= ~(1<<7);
  unexport_gpio(7);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {60 330 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 7) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[8]} {
              label { 5   21   29}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<8);
  export_gpio(8);
} else {
  progdefaults.enable_gpio &= ~(1<<8);
  unexport_gpio(8);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 121 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 8) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[9]} {
              label { 6   22   31}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<9);
  export_gpio(9);
} else {
  progdefaults.enable_gpio &= ~(1<<9);
  unexport_gpio(9);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 150 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 9) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[10]} {
              label {13   23   33}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<10);
  export_gpio(10);
} else {
  progdefaults.enable_gpio &= ~(1<<10);
  unexport_gpio(10);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 180 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 10) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[11]} {
              label {19   24   35}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<11);
  export_gpio(11);
} else {
  progdefaults.enable_gpio &= ~(1<<11);
  unexport_gpio(11);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 210 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 11) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[12]} {
              label {26   25   37}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<12);
  export_gpio(12);
} else {
  progdefaults.enable_gpio &= ~(1<<12);
  unexport_gpio(12);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 240 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 12) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[13]} {
              label {12   26   32}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<13);
  export_gpio(13);
} else {
  progdefaults.enable_gpio &= ~(1<<13);
  unexport_gpio(13);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 270 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 13) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[14]} {
              label {16   27   36}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<14);
  export_gpio(14);
} else {
  progdefaults.enable_gpio &= ~(1<<14);
  unexport_gpio(14);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 300 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 14) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[15]} {
              label {20   28   38}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<15);
  export_gpio(15);
} else {
  progdefaults.enable_gpio &= ~(1<<15);
  unexport_gpio(15);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 330 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 15) & 0x01);}
            }
            Fl_Check_Button {btn_enable_gpio[16]} {
              label {21   29   40}
              callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<16);
  export_gpio(16);
} else {
  progdefaults.enable_gpio &= ~(1<<16);
  unexport_gpio(16);
}
progdefaults.changed = true;}
              tooltip {Select pin number} xywh {320 360 125 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.enable_gpio >> 16) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[0]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= 1;
} else {
  progdefaults.gpio_on &= ~1;
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 120 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[1]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<1);
} else {
  progdefaults.gpio_on &= ~(1<<1);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 150 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 1) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[2]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<2);
} else {
  progdefaults.gpio_on &= ~(1<<2);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 180 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 2) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[3]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<3);
} else {
  progdefaults.gpio_on &= ~(1<<3);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 210 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 3) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[4]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<4);
} else {
  progdefaults.gpio_on &= ~(1<<4);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 240 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 4) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[5]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<5);
} else {
  progdefaults.gpio_on &= ~(1<<5);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 270 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 5) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[6]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<6);
} else {
  progdefaults.gpio_on &= ~(1<<6);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 300 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 6) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[7]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<7);
} else {
  progdefaults.gpio_on &= ~(1<<7);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {200 330 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 7) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[8]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<8);
} else {
  progdefaults.gpio_on &= ~(1<<8);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 121 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 8) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[9]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<9);
} else {
  progdefaults.gpio_on &= ~(1<<9);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 150 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 9) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[10]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<10);
} else {
  progdefaults.gpio_on &= ~(1<<10);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 180 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 10) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[11]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<11);
} else {
  progdefaults.gpio_on &= ~(1<<11);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 210 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 11) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[12]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<12);
} else {
  progdefaults.gpio_on &= ~(1<<12);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 240 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 12) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[13]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<13);
} else {
  progdefaults.gpio_on &= ~(1<<13);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 270 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 13) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[14]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<14);
} else {
  progdefaults.gpio_on &= ~(1<<14);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 300 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 14) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[15]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<15);
} else {
  progdefaults.gpio_on &= ~(1<<15);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 330 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 15) & 0x01);}
            }
            Fl_Check_Button {btn_gpio_on[16]} {
              label {= 1 (on)}
              callback {if (o->value()){
  progdefaults.gpio_on |= (1<<16);
} else {
  progdefaults.gpio_on &= ~(1<<16);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
              tooltip {Select PTT on state} xywh {460 360 84 15} down_box DOWN_BOX labelfont 4
              code0 {o->value((progdefaults.gpio_on >> 16) & 0x01);}
            }
            Fl_Box {} {
              label {BCM GPIO  pin    Value}
              xywh {330 96 194 17} labelfont 4 align 20
            }
            Fl_Box {} {
              label {Enable GPIO PTT (Pi specific controls)}
              xywh {170 68 283 17}
            }
            Fl_Counter cnt_gpio_pulse_width {
              label {Pulse width (msec)}
              callback {progdefaults.gpio_pulse_width=(int)o->value();
progdefaults.changed=true;}
              tooltip {Set >0 if pulsed PTT used} xywh {60 357 80 21} type Simple align 8 minimum 0 maximum 50 step 1
              code0 {o->value(progdefaults.gpio_pulse_width);}
            }
          }
        }
      }
      Fl_Group tabSoundCard {
        label Audio open
        xywh {0 25 600 365} hide
      } {
        Fl_Tabs tabsSoundCard {open
          xywh {0 25 600 365} selection_color 50
        } {
          Fl_Group tabAudio {
            label Devices open
            xywh {0 50 600 340}
          } {
            Fl_Group AudioTCP {open
              xywh {55 65 380 45} box ENGRAVED_FRAME
            } {
              Fl_Round_Button {btnAudioIO[0]} {
                label TCP
                callback {sound_update(SND_IDX_TCP);
progdefaults.changed = true;
resetSoundCard();}
                tooltip {Use TCP audio server} xywh {65 75 53 25} down_box DOWN_BOX selection_color 1
              }
              Fl_Input inpIPServerHost {
                label {Host:}
                callback {scDevice[0] = progdefaults.IPServerHost = o->value();
scDevice[1] = progdefaults.IPServerPort;
progdefaults.changed = true;
resetSoundCard();}
                tooltip {TCP/UDP Server Host} xywh {180 75 90 25}
                code0 {o->value(progdefaults.IPServerHost.c_str());}
                code1 {inpIPServerHost->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Input inpIPServerPort {
                label {Port:}
                callback {scDevice[1] = progdefaults.IPServerPort = o->value();
scDevice[0] = progdefaults.IPServerHost;
progdefaults.changed = true;
resetSoundCard();}
                tooltip {TCP/UDP Server Port} xywh {320 75 90 25}
                code0 {o->value(progdefaults.IPServerPort.c_str());}
                code1 {inpIPServerPort->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
            }
            Fl_Group AudioUDP {open
              xywh {435 65 110 45} box ENGRAVED_FRAME
            } {
              Fl_Round_Button {btnAudioIO[4]} {
                label UDP
                callback {sound_update(SND_IDX_UDP);
progdefaults.changed = true;
resetSoundCard();}
                tooltip {Use UDP audio server} xywh {450 75 53 25} down_box DOWN_BOX selection_color 1
              }
            }
            Fl_Group AudioPort {open
              xywh {55 110 490 80} box ENGRAVED_FRAME
            } {
              Fl_Round_Button {btnAudioIO[1]} {
                label PortAudio
                callback {sound_update(SND_IDX_PORT);
progdefaults.changed = true;
resetSoundCard();}
                tooltip {Use Port Audio server} xywh {65 138 95 25} down_box DOWN_BOX selection_color 1
              }
              Fl_Choice menuPortInDev {
                label {Capture:}
                callback {scDevice[0] = progdefaults.PortInDevice = o->text();
progdefaults.PortInIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;} open
                tooltip {Audio input device} xywh {244 121 290 25} down_box BORDER_BOX
              } {}
              Fl_Choice menuPortOutDev {
                label {Playback:}
                callback {scDevice[1] = progdefaults.PortOutDevice = o->text();
progdefaults.PortOutIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;} open
                tooltip {Audio output device} xywh {244 156 290 25} down_box BORDER_BOX
              } {}
            }
            Fl_Group AudioPulse {open
              xywh {55 190 490 45} box ENGRAVED_FRAME
            } {
              Fl_Round_Button {btnAudioIO[2]} {
                label PulseAudio
                callback {sound_update(SND_IDX_PULSE);
progdefaults.changed = true;
resetSoundCard();}
                tooltip {Use Pulse Audio server} xywh {65 201 100 25} down_box DOWN_BOX selection_color 1
              }
              Fl_Input inpPulseServer {
                label {Server string:}
                callback {scDevice[0] = scDevice[1] = progdefaults.PulseServer = o->value();
resetSoundCard();
progdefaults.changed = true;}
                tooltip {Leave this blank or refer to
http://www.pulseaudio.org/wiki/ServerStrings} xywh {310 201 225 24}
                code0 {o->value(progdefaults.PulseServer.c_str());}
                code1 {inpPulseServer->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
            }
            Fl_Group AudioNull {open
              xywh {55 235 490 45} box ENGRAVED_FRAME
            } {
              Fl_Round_Button {btnAudioIO[3]} {
                label {File I/O only}
                callback {sound_update(SND_IDX_NULL);
progdefaults.changed = true;
resetSoundCard();}
                tooltip {NO AUDIO DEVICE AVAILABLE (or testing)} xywh {66 245 100 25} down_box DOWN_BOX selection_color 1
              }
            }
            Fl_Group AudioDuplex {open
              xywh {55 280 490 45} box ENGRAVED_FRAME
            } {
              Fl_Round_Button btn_is_full_duplex {
                label {Device supports full duplex}
                callback {progdefaults.is_full_duplex = o->value();
progdefaults.changed = true;
resetSoundCard();}
                tooltip {NO AUDIO DEVICE AVAILABLE (or testing)} xywh {66 290 223 25} down_box DOWN_BOX value 1 selection_color 1
                code0 {o->value(progdefaults.is_full_duplex);}
              }
            }
          }
          Fl_Group tabAudioOpt {
            label Settings open
            xywh {0 50 600 340} hide
          } {
            Fl_Group grpAudioSampleRate {
              label {Sample rate} open
              xywh {55 65 490 90} box ENGRAVED_FRAME align 21
            } {
              Fl_Group menuInSampleRate {
                label Capture
                callback {progdefaults.in_sample_rate = o->index() > 1 ? strtol(o->value(), 0, 10) : o->index();
resetSoundCard();
progdefaults.changed = true;} open
                tooltip {Force a specific sample rate. Select "Native" if "Auto"
does not work well with your audio device.} xywh {65 94 100 22} box DOWN_BOX color 7 align 8
                code0 {o->clear_changed();}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group menuOutSampleRate {
                label Playback
                callback {progdefaults.out_sample_rate = o->index() > 1 ? strtol(o->value(), 0, 10) : o->index();
resetSoundCard();
progdefaults.changed = true;} open
                xywh {65 124 100 22} box DOWN_BOX color 7 align 8
                code0 {o->clear_changed();}
                code1 {o->tooltip(menuInSampleRate->tooltip());}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Group menuSampleConverter {
                label Converter
                callback {if ((o->index()) == FLDIGI_SRC_BEST)
    fl_alert2("The best quality SINC interpolator has very high CPU overhead");
progdefaults.sample_converter = sample_rate_converters[o->index()];
resetSoundCard();
progdefaults.changed = true;
o->tooltip(src_get_description(progdefaults.sample_converter));} open
                tooltip {Set the type of resampler used of offset correction} xywh {319 94 216 22} box DOWN_BOX color 7 align 5
                code0 {\#include <FL/fl_ask.H>}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
            }
            Fl_Group {} {
              label Corrections open
              xywh {55 155 490 62} box ENGRAVED_FRAME align 21
            } {
              Fl_Spinner cntRxRateCorr {
                label {RX ppm}
                callback {progdefaults.RX_corr = (int)o->value();
progdefaults.changed = true;}
                tooltip {RX sound card correction} xywh {65 185 85 20} align 8
                code0 {o->step(1);}
                code1 {o->minimum(-50000);}
                code2 {o->maximum(50000);}
                code3 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
              Fl_Spinner cntTxRateCorr {
                label {TX ppm}
                callback {progdefaults.TX_corr = (int)o->value();
progdefaults.changed = true;}
                tooltip {TX sound card correction} xywh {226 185 85 20} align 8
                code0 {o->step(1);}
                code1 {o->minimum(-50000);}
                code2 {o->maximum(50000);}
                code3 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
              Fl_Spinner cntTxOffset {
                label {TX offset}
                callback {progdefaults.TxOffset = (int)o->value();
progdefaults.changed = true;}
                tooltip {Difference between Rx & Tx freq (rig offset)} xywh {388 185 85 20} align 8
                code0 {o->value(progdefaults.TxOffset);}
                code1 {o->step(1);}
                code2 {o->minimum(-50); o->maximum(50);}
                code3 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Spinner2
              }
            }
          }
          Fl_Group tabAudioRightChannel {
            label {Right channel}
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Transmit Usage} open
              xywh {25 61 550 246} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkAudioStereoOut {
                label {Modem signal on left and right channels}
                callback {progdefaults.sig_on_right_channel = o->value();
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
                tooltip {Left and right channels both contain modem audio} xywh {165 82 280 20} down_box DOWN_BOX
                code0 {chkAudioStereoOut->value(progdefaults.sig_on_right_channel);}
              }
              Fl_Check_Button chkReverseAudio {
                label {Reverse Left/Right channels}
                callback {progdefaults.ReverseAudio = o->value();
progdefaults.changed = true;}
                tooltip {Software reversal of left-right audio channels} xywh {165 112 270 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.ReverseAudio);}
              }
              Fl_Group {} {
                label {...
These controls are on other tabs.
They are replicated here for convenience.
You may change the state from either location.
...} open
                xywh {75 135 454 162} box ENGRAVED_FRAME align 18
              } {
                Fl_Check_Button btnPTTrightchannel2 {
                  label {PTT tone on right audio channel }
                  callback {progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
}}
                  tooltip {1000 Hz tone when PTT enabled
Can be used in lieu of or in addition to other PTT types} xywh {165 142 250 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.PTTrightchannel);}
                }
                Fl_Check_Button btnQSK2 {
                  label {CW QSK signal on right channel}
                  callback {progdefaults.QSK = o->value();
btnQSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
                  tooltip {Generate 1000 Hz square wave signal on right channel} xywh {165 172 211 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.QSK);}
                }
                Fl_Check_Button chkPseudoFSK2 {
                  label {Pseudo-FSK on right audio channel}
                  callback {progdefaults.PseudoFSK = o->value();
chkPseudoFSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
                  tooltip {Create 1000 Hz square wave on right channel} xywh {165 203 270 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.PseudoFSK);}
                }
              }
            }
            Fl_Group {} {
              label {Receive Usage} open
              xywh {25 310 550 60} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkReverseRxAudio {
                label {Reverse Left/Right channels}
                callback {progdefaults.ReverseRxAudio = o->value();
progdefaults.changed = true;}
                tooltip {Software reversal of left-right audio channels} xywh {165 328 270 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.ReverseRxAudio);}
              }
            }
          }
          Fl_Group tabWavFile {
            label Wav open
            xywh {0 50 600 340} hide
          } {
            Fl_Group listbox_wav_samplerate {
              label {Wav write sample rate}
              callback {progdefaults.wavSampleRate = o->index();
progdefaults.changed = true;} open
              tooltip {Pick baud rate from list} xywh {225 96 150 24} box DOWN_BOX color 7 align 5
              code0 {o->add("8000|11025|16000|22050|24000|44100|48000");}
              code1 {o->index(progdefaults.wavSampleRate);}
              code2 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_ListBox
            } {}
            Fl_Check_Button btn_record_both {
              label {Record both channels}
              callback {progdefaults.record_both_channels=o->value();
progdefaults.changed=true;}
              xywh {225 145 176 15} down_box DOWN_BOX
              code0 {o->value(progdefaults.record_both_channels);}
            }
          }
          Fl_Group tabAlerts {
            label Alerts open
            xywh {0 50 600 340} color 50 selection_color 50 hide
          } {
            Fl_Group {} {
              label {Regex Match in Browser} open
              xywh {5 56 590 66} box ENGRAVED_BOX align 17
            } {
              Fl_File_Input inp_wav_fname_regex {
                label {REGEX detected wav}
                xywh {10 80 304 35} align 5
                code0 {o->value(progdefaults.BWSR_REGEX_MATCH.c_str());}
              }
              Fl_Button btn_select_regex_wav {
                label Select
                callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.wav\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.BWSR_REGEX_MATCH = fnfc.filename();
  	inp_wav_fname_regex->value(progdefaults.BWSR_REGEX_MATCH.c_str());
	progdefaults.REGEX_ALERT_MENU = 0;
	mnu_regex_alert_menu->value(progdefaults.REGEX_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
                xywh {316 91 60 24}
                code0 {\#include <FL/Fl_Native_File_Chooser.H>}
              }
              Fl_Choice mnu_regex_alert_menu {
                label {Sound:}
                callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.BWSR_REGEX_MATCH = "bark"; break;
    case 2 : progdefaults.BWSR_REGEX_MATCH = "checkout"; break;
    case 3 : progdefaults.BWSR_REGEX_MATCH = "diesel"; break;
    case 4 : progdefaults.BWSR_REGEX_MATCH = "steam_train"; break;
    case 5 : progdefaults.BWSR_REGEX_MATCH = "doesnot"; break;
    case 6 : progdefaults.BWSR_REGEX_MATCH = "beeboo"; break;
    case 7 : progdefaults.BWSR_REGEX_MATCH = "phone"; break;
    case 8 : progdefaults.BWSR_REGEX_MATCH = "dinner_bell"; break;
  }
  inp_wav_fname_regex->value(progdefaults.BWSR_REGEX_MATCH.c_str());
}
progdefaults.REGEX_ALERT_MENU = o->value();} open
                xywh {380 91 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
                code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell");}
                code1 {o->value(progdefaults.REGEX_ALERT_MENU);}
              } {}
              Fl_Check_Button btn_enable_regex_match_wa {
                label Enable
                callback {progdefaults.ENABLE_BWSR_REGEX_MATCH=o->value();}
                xywh {514 69 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ENABLE_BWSR_REGEX_MATCH);}
              }
              Fl_Button btn_test_regex_wav {
                label Test
                callback {audio_alert->alert(progdefaults.BWSR_REGEX_MATCH.c_str());}
                xywh {518 91 60 24}
                code0 {\#include "audio_alert.h"}
              }
            }
            Fl_Group {} {
              label {MYCALL Match in Browser} open
              xywh {5 123 590 66} box ENGRAVED_BOX align 17
            } {
              Fl_File_Input inp_wav_fname_mycall {
                label {MYCALL detected wav}
                xywh {10 147 304 35} align 5
                code0 {o->value(progdefaults.BWSR_MYCALL_MATCH.c_str());}
              }
              Fl_Button btn_select_mycall_wav {
                label Select
                callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.wav\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.BWSR_MYCALL_MATCH = fnfc.filename();
  	inp_wav_fname_mycall->value(progdefaults.BWSR_MYCALL_MATCH.c_str());
	progdefaults.MYCALL_ALERT_MENU = 0;
  	mnu_mycall_alert_menu->value(progdefaults.MYCALL_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
                xywh {316 158 60 24}
              }
              Fl_Choice mnu_mycall_alert_menu {
                label {Sound:}
                callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.BWSR_MYCALL_MATCH = "bark"; break;
    case 2 : progdefaults.BWSR_MYCALL_MATCH = "checkout"; break;
    case 3 : progdefaults.BWSR_MYCALL_MATCH = "diesel"; break;
    case 4 : progdefaults.BWSR_MYCALL_MATCH = "steam_train"; break;
    case 5 : progdefaults.BWSR_MYCALL_MATCH = "doesnot"; break;
    case 6 : progdefaults.BWSR_MYCALL_MATCH = "beeboo"; break;
    case 7 : progdefaults.BWSR_MYCALL_MATCH = "phone"; break;
    case 8 : progdefaults.BWSR_MYCALL_MATCH = "dinner_bell"; break;
  }
  inp_wav_fname_mycall->value(progdefaults.BWSR_MYCALL_MATCH.c_str());
}
progdefaults.MYCALL_ALERT_MENU = o->value();} open
                xywh {380 158 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
                code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell");}
                code1 {o->value(progdefaults.MYCALL_ALERT_MENU);}
              } {}
              Fl_Check_Button btn_enable_mycall_match_wav {
                label Enable
                callback {progdefaults.ENABLE_BWSR_MYCALL_MATCH=o->value();}
                xywh {514 136 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ENABLE_BWSR_MYCALL_MATCH);}
              }
              Fl_Button btn_test_mycall_wav {
                label Test
                callback {audio_alert->alert(progdefaults.BWSR_MYCALL_MATCH.c_str());}
                xywh {518 158 60 24}
              }
            }
            Fl_Group {} {
              label {flmsg interface} open
              xywh {5 190 590 122} box ENGRAVED_BOX align 17
            } {
              Fl_File_Input inp_wav_flmsg_rcvd {
                label {flmsg received wav}
                xywh {10 214 304 35} align 5
                code0 {o->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());}
              }
              Fl_Button btn_select_rx_extract_msg {
                label Select
                callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.wav\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RX_EXTRACT_MSG_RCVD = fnfc.filename();
  	inp_wav_flmsg_rcvd->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());
  	progdefaults.RX_EXTRACT_ALERT_MENU = 0;
  	mnu_rx_extract_alert_menu->value(progdefaults.RX_EXTRACT_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
                xywh {316 225 60 24}
              }
              Fl_Choice mnu_rx_extract_alert_menu {
                label {Sound:}
                callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RX_EXTRACT_MSG_RCVD = "bark"; break;
    case 2 : progdefaults.RX_EXTRACT_MSG_RCVD = "checkout"; break;
    case 3 : progdefaults.RX_EXTRACT_MSG_RCVD = "diesel"; break;
    case 4 : progdefaults.RX_EXTRACT_MSG_RCVD = "steam_train"; break;
    case 5 : progdefaults.RX_EXTRACT_MSG_RCVD = "doesnot"; break;
    case 6 : progdefaults.RX_EXTRACT_MSG_RCVD = "beeboo"; break;
    case 7 : progdefaults.RX_EXTRACT_MSG_RCVD = "phone"; break;
    case 8 : progdefaults.RX_EXTRACT_MSG_RCVD = "dinner_bell"; break;
  }
  inp_wav_flmsg_rcvd->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());
}
progdefaults.RX_EXTRACT_ALERT_MENU = o->value();} open
                xywh {380 225 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
                code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell");}
                code1 {o->value(progdefaults.RX_EXTRACT_ALERT_MENU);}
              } {}
              Fl_Check_Button btn_enable_flmsg_wav {
                label Enable
                callback {progdefaults.ENABLE_RX_EXTRACT_MSG_RCVD=o->value();}
                xywh {514 203 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ENABLE_RX_EXTRACT_MSG_RCVD);}
              }
              Fl_Button btn_test_flmsg_extract_wav {
                label Test
                callback {audio_alert->alert(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());}
                xywh {518 225 60 24}
              }
              Fl_File_Input inp_wav_flmsg_timed_out {
                label {flmsg timed out wav}
                xywh {10 270 304 35} align 5
                code0 {o->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());}
              }
              Fl_Button btn_select_rx_extract_timed_out {
                label Select
                callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.wav\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RX_EXTRACT_TIMED_OUT = fnfc.filename();
  	inp_wav_flmsg_timed_out->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());
  	progdefaults.TIMED_OUT_ALERT_MENU = 0;
  	mnu_rx_timed_out_alert_menu->value(progdefaults.TIMED_OUT_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
                xywh {316 281 60 24}
              }
              Fl_Choice mnu_rx_timed_out_alert_menu {
                label {Sound:}
                callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RX_EXTRACT_TIMED_OUT = "bark"; break;
    case 2 : progdefaults.RX_EXTRACT_TIMED_OUT = "checkout"; break;
    case 3 : progdefaults.RX_EXTRACT_TIMED_OUT = "diesel"; break;
    case 4 : progdefaults.RX_EXTRACT_TIMED_OUT = "steam_train"; break;
    case 5 : progdefaults.RX_EXTRACT_TIMED_OUT = "doesnot"; break;
    case 6 : progdefaults.RX_EXTRACT_TIMED_OUT = "beeboo"; break;
    case 7 : progdefaults.RX_EXTRACT_TIMED_OUT = "phone"; break;
    case 8 : progdefaults.RX_EXTRACT_TIMED_OUT = "dinner_bell"; break;
  }
  inp_wav_flmsg_timed_out->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());
}
progdefaults.TIMED_OUT_ALERT_MENU = o->value();} open
                xywh {380 281 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
                code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell");}
                code1 {o->value(progdefaults.TIMED_OUT_ALERT_MENU);}
              } {}
              Fl_Button btn_test_rx_extract_timed_out {
                label Test
                callback {audio_alert->alert(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());}
                xywh {518 281 60 24}
              }
              Fl_Check_Button btn_enable_flmsg_time_out_wav {
                label Enable
                callback {progdefaults.ENABLE_RX_EXTRACT_TIMED_OUT=o->value();}
                xywh {515 260 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ENABLE_RX_EXTRACT_TIMED_OUT);}
              }
            }
            Fl_Group {} {
              label {RsID detection} open
              xywh {5 314 590 66} box ENGRAVED_BOX align 17
            } {
              Fl_File_Input inp_wav_fname_rsid {
                label {RsID audio alert wav}
                xywh {10 338 304 35} align 5
                code0 {o->value(progdefaults.RSID_MATCH.c_str());}
              }
              Fl_Button btn_select_rsid_wav {
                label Select
                callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.wav\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RSID_MATCH = fnfc.filename();
  	inp_wav_fname_rsid->value(progdefaults.RSID_MATCH.c_str());
  	progdefaults.RSID_ALERT_MENU = 0;
  	mnu_rsid_alert_menu->value(progdefaults.RSID_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
                xywh {316 349 60 24}
              }
              Fl_Choice mnu_rsid_alert_menu {
                label {Sound:}
                callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RSID_MATCH = "bark"; break;
    case 2 : progdefaults.RSID_MATCH = "checkout"; break;
    case 3 : progdefaults.RSID_MATCH = "diesel"; break;
    case 4 : progdefaults.RSID_MATCH = "steam_train"; break;
    case 5 : progdefaults.RSID_MATCH = "doesnot"; break;
    case 6 : progdefaults.RSID_MATCH = "beeboo"; break;
    case 7 : progdefaults.RSID_MATCH = "phone"; break;
    case 8 : progdefaults.RSID_MATCH = "dinner_bell"; break;
  }
  inp_wav_fname_rsid->value(progdefaults.RSID_MATCH.c_str());
}
progdefaults.RSID_ALERT_MENU = o->value();} open
                xywh {380 349 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
                code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell");}
                code1 {o->value(progdefaults.RSID_ALERT_MENU);}
              } {}
              Fl_Check_Button btn_enable_rsid_match_wav {
                label Enable
                callback {progdefaults.ENABLE_RSID_MATCH=o->value();}
                xywh {514 327 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.ENABLE_RSID_MATCH);}
              }
              Fl_Button btn_test_rsid_wav {
                label Test
                callback {audio_alert->alert(progdefaults.RSID_MATCH.c_str());}
                xywh {518 349 60 24}
              }
            }
          }
        }
      }
      Fl_Group tabID {
        label ID open
        xywh {0 25 600 365} hide
      } {
        Fl_Tabs tabsID {open
          xywh {0 25 600 365}
        } {
          Fl_Group tabRsID {
            label RsID open
            xywh {0 50 600 340}
          } {
            Fl_Group {} {
              label {Reed-Solomon ID (Rx)} open
              xywh {32 55 535 210} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkRSidNotifyOnly {
                label {Notify only}
                callback {progdefaults.rsid_notify_only = o->value();
notify_create_rsid_event(progdefaults.rsid_notify_only);
if (progdefaults.rsid_notify_only) {
    chkRetainFreqLock->deactivate();
    chkDisableFreqChange->deactivate();
}
else {
    chkRetainFreqLock->activate();
    chkDisableFreqChange->activate();
}
progdefaults.changed = true;}
                tooltip {Check this to be notified when an RSID is received
without changing modem and frequency} xywh {40 112 168 20} down_box DOWN_BOX
                code0 {chkRSidNotifyOnly->value(progdefaults.rsid_notify_only);}
              }
              Fl_Button bRSIDRxModes {
                label {Receive modes}
                callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.rsid_rx_modes);
progdefaults.changed = true;}
                xywh {40 81 130 24}
              }
              Fl_Check_Button chkRSidWideSearch {
                label {Searches passband}
                callback {progdefaults.rsidWideSearch=o->value();
rxid_selection_color();
progdefaults.changed = true;}
                tooltip {ON - search over entire waterfall
OFF - limit search to +/- 200 Hz} xywh {40 143 203 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.rsidWideSearch);}
              }
              Fl_Check_Button chkRSidMark {
                label {Mark prev freq/mode}
                callback {progdefaults.rsid_mark = o->value();
progdefaults.changed = true;}
                tooltip {Insert RX text marker before
changing frequency and modem} xywh {40 175 203 20} down_box DOWN_BOX
                code0 {chkRSidMark->value(progdefaults.rsid_mark);}
              }
              Fl_Check_Button chkRSidAutoDisable {
                label {Disables detector}
                callback {progdefaults.rsid_auto_disable = o->value();
progdefaults.changed = true;}
                tooltip {Disable further detection when RSID is received} xywh {40 207 203 20} down_box DOWN_BOX
                code0 {if (progdefaults.rsid_notify_only) progdefaults.rsid_auto_disable = false;}
                code1 {chkRSidAutoDisable->value(progdefaults.rsid_auto_disable);}
                code2 {if (progdefaults.rsid_notify_only) chkRSidAutoDisable->deactivate();}
              }
              Fl_Group listbox_rsid_errors {
                label {Allow errors}
                callback {progdefaults.RsID_label_type = o->index();
progdefaults.changed = true;} open
                tooltip {Low = zero errors
Medium = 1 error
High = 2 errors} xywh {40 233 100 22} box DOWN_BOX color 7 align 8
                code0 {listbox_rsid_errors->add(_("Low")); listbox_rsid_errors->add(_("Medium")); listbox_rsid_errors->add(_("High"));}
                code1 {listbox_rsid_errors->index(progdefaults.RsID_label_type);}
                code2 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ListBox
              } {}
              Fl_Counter val_RSIDsquelch {
                label {Squelch open (sec)}
                callback {progdefaults.rsid_squelch = (int)o->value();
progdefaults.changed = true;}
                tooltip {Use for triggering amplifier carrier detect} xywh {260 234 140 21} align 8 minimum 0 maximum 300 step 1
                code0 {o->value(progdefaults.rsid_squelch);}
                code1 {o->lstep(10.0);}
              }
              Fl_Check_Button chkRSidShowAlert {
                label {Disable alert dialog}
                callback {progdefaults.disable_rsid_warning_dialog_box = o->value();
progdefaults.changed = true;}
                tooltip {Do not show RsID alert dialog box} xywh {276 143 203 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.disable_rsid_warning_dialog_box);}
              }
              Fl_Check_Button chkRetainFreqLock {
                label {Retain tx freq lock}
                callback {progdefaults.retain_freq_lock = o->value();
progdefaults.changed = true;}
                tooltip {Retain TX lock frequency (Lk) when changing to RX RsID frequency} xywh {276 175 203 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.retain_freq_lock);}
              }
              Fl_Check_Button chkDisableFreqChange {
                label {Disable freq change}
                callback {progdefaults.disable_rsid_freq_change = o->value();
progdefaults.changed = true;}
                tooltip {Do not automatically change to RX RsID frequency} xywh {276 207 203 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.disable_rsid_freq_change);}
              }
              Fl_Group {} {
                label {The RsID notification message contents and
display characteristics are configured on the
"Notifications" configure dialog.} open
                xywh {216 74 330 60} box BORDER_BOX align 21
              } {}
            }
            Fl_Group {} {
              label {Pre-Signal Tone} open
              xywh {32 267 265 97} box ENGRAVED_FRAME align 21
            } {
              Fl_Counter val_pretone {
                label Seconds
                callback {progdefaults.pretone = o->value();
progdefaults.changed = true;}
                tooltip {Use for triggering amplifier carrier detect} xywh {88 305 140 21} minimum 0 maximum 10
                code0 {o->value(progdefaults.pretone);}
              }
            }
            Fl_Group {} {
              label {Reed-Solomon ID (Tx)} open
              xywh {300 267 265 97} box ENGRAVED_FRAME align 21
            } {
              Fl_Button bRSIDTxModes {
                label {Transmit modes}
                callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.rsid_tx_modes);
progdefaults.changed = true;}
                xywh {377 294 130 24}
              }
              Fl_Check_Button btn_post_rsid {
                label {End of xmt ID}
                callback {progdefaults.rsid_post=o->value();
progdefaults.changed = true;}
                tooltip {Add RsID signal to end of transmission} xywh {377 329 97 17} down_box DOWN_BOX
                code0 {o->value(progdefaults.rsid_post);}
              }
            }
          }
          Fl_Group tabVideoID {
            label Video open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Video Preamble ID} open
              xywh {32 115 536 189} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnsendid {
                label {Transmit mode ID}
                callback {progdefaults.sendid=o->value();
progdefaults.changed = true;}
                tooltip {Waterfall video ID} xywh {50 149 150 20} down_box DOWN_BOX
              }
              Fl_Check_Button btnsendvideotext {
                label {Transmit video text}
                callback {progdefaults.sendtextid=o->value();
progdefaults.changed = true;}
                tooltip {Waterfall video text} xywh {50 181 155 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.sendtextid);}
              }
              Fl_Input valVideotext {
                label {:}
                callback {progdefaults.strTextid = o->value();
progdefaults.changed = true;}
                tooltip {Limit to a few characters,
as in CQEM or IOTA etc.} xywh {217 179 323 24}
                code0 {o->value(progdefaults.strTextid.c_str());}
                code1 {valVideotext->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Check_Button chkID_SMALL {
                label {Use small font}
                callback {progdefaults.ID_SMALL=o->value();
progdefaults.changed = true;}
                tooltip {ON - small font
OFF - large font} xywh {50 213 120 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.ID_SMALL);}
              }
              Fl_Value_Slider sldrVideowidth {
                label {Chars/Row:}
                callback {progdefaults.videowidth = (int)o->value();
progdefaults.changed = true;}
                tooltip {Set the number of characters per row} xywh {290 211 125 24} type Horizontal align 4 minimum 1 maximum 8 step 1 value 4 textsize 14
                code0 {o->value(progdefaults.videowidth);}
                code2 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
              Fl_Check_Button btn_vidlimit {
                label {500 Hz limit}
                callback {progdefaults.vidlimit=o->value();
progdefaults.changed = true;}
                xywh {50 245 110 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.vidlimit);}
              }
              Fl_Check_Button btn_vidmodelimit {
                label {Mode width limit}
                callback {progdefaults.vidmodelimit=o->value();
progdefaults.changed=true;}
                xywh {50 273 110 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.vidmodelimit);}
              }
              Fl_Button bVideoIDModes {
                label {Video ID modes}
                callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.videoid_modes);
progdefaults.changed = true;}
                xywh {420 146 120 24}
              }
            }
          }
          Fl_Group tabCwID {
            label CW
            xywh {0 50 600 340} hide
          } {
            Fl_Group sld {
              label {CW Postamble ID} open
              xywh {32 146 536 127} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnCWID {
                label {Transmit callsign}
                callback {progdefaults.CWid = o->value();
progdefaults.changed = true;}
                tooltip {Send Callsign in CW at end of every transmission} xywh {139 184 140 24} down_box DOWN_BOX
                code0 {o->value(progdefaults.CWid);}
              }
              Fl_Value_Slider sldrCWIDwpm {
                label {Speed (WPM):}
                callback {progdefaults.CWIDwpm = (int)o->value();
progdefaults.changed = true;}
                tooltip {Send at this WPM} xywh {139 227 180 20} type Horizontal align 1 minimum 15 maximum 40 step 1 value 18 textsize 14
                code0 {o->value(progdefaults.CWIDwpm);}
                code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
                class Fl_Value_Slider2
              }
              Fl_Button bCWIDModes {
                label {CW ID modes}
                callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.cwid_modes);
progdefaults.changed = true;}
                xywh {412 184 120 24}
              }
            }
          }
        }
      }
      Fl_Group tabMisc {
        label Misc open
        xywh {0 25 600 365} hide
      } {
        Fl_Tabs tabsMisc {open
          xywh {0 25 600 365} selection_color 50
        } {
          Fl_Group tabCPUspeed {
            label CPU open
            xywh {0 50 600 340}
          } {
            Fl_Group {} {open
              xywh {55 75 490 51} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkSlowCpu {
                label {Slow CPU (less than 700MHz)}
                callback {progdefaults.slowcpu = o->value();
progdefaults.changed = true;}
                tooltip {Enable if you're computer does not decode properly} xywh {201 90 225 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.slowcpu);}
              }
            }
          }
          Fl_Group tabNBEMS {
            label NBEMS open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {NBEMS data file interface} open
              xywh {50 65 500 75} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkAutoExtract {
                label Enable
                callback {progdefaults.autoextract = o->value();
progdefaults.changed = true;}
                tooltip {Extract files for use with external "wrap / flmsg" program} xywh {104 96 75 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.autoextract);}
              }
              Fl_Check_Button chk_open_wrap_folder {
                label {Open message folder}
                callback {progdefaults.open_nbems_folder = o->value();
progdefaults.changed = true;}
                tooltip {Opens NBEMS file folder upon successful capture} xywh {310 96 146 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.open_nbems_folder);}
              }
            }
            Fl_Group {} {
              label {Reception of flmsg files} open
              xywh {50 141 500 199} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chk_open_flmsg {
                label {Open with flmsg}
                callback {progdefaults.open_flmsg = o->value();
progdefaults.changed = true;}
                tooltip {Open message with flmsg} xywh {104 241 136 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.open_flmsg);}
              }
              Fl_Check_Button chk_open_flmsg_print {
                label {Open in browser}
                callback {progdefaults.open_flmsg_print = o->value();
progdefaults.changed = true;}
                tooltip {Open file with default browser} xywh {310 241 136 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.open_flmsg_print);}
              }
              Fl_Input txt_flmsg_pathname {
                label {flmsg:}
                callback {progdefaults.flmsg_pathname = o->value();
progdefaults.changed = true;}
                tooltip {Enter full path-filename for flmsg} xywh {104 271 330 24} when 1
                code0 {o->value(progdefaults.flmsg_pathname.c_str());}
                class Fl_Input2
              }
              Fl_Button btn_select_flmsg {
                label {Locate flmsg}
                callback {select_flmsg_pathname();}
                tooltip {Locate flmsg executable} xywh {441 271 100 24}
              }
              Fl_Value_Slider sldr_extract_timeout {
                label {Timeout (secs)}
                callback {progdefaults.extract_timeout=o->value();
progdefaults.changed=true;}
                tooltip {Extract times out after NN seconds of inactivity.} xywh {70 309 364 21} type {Horz Knob} color 54 selection_color 0 align 8 minimum 1 maximum 20 step 0.5 value 10 textsize 14
                code0 {o->value(progdefaults.extract_timeout);}
              }
              Fl_Group {} {
                label {Selection of transfer direct takes precedence
over all other flmsg reception settings} open
                xywh {55 160 490 76} box ENGRAVED_FRAME align 17
              } {
                Fl_Check_Button chk_transfer__to_open_flmsg {
                  label {Transfer direct to executing flmsg}
                  callback {progdefaults.flmsg_transfer_direct = o->value();
progdefaults.changed = true;}
                  tooltip {Send data stream directly to executing flmsg} xywh {160 204 271 20} down_box DOWN_BOX
                  code0 {o->value(progdefaults.flmsg_transfer_direct);}
                }
              }
            }
          }
          Fl_Group tabPskmail {
            label Pskmail open
            xywh {0 50 600 340} align 5 hide
          } {
            Fl_Group {} {
              label {Mail Server Attributes} open
              xywh {55 58 490 174} box ENGRAVED_FRAME align 21
            } {
              Fl_Counter cntServerCarrier {
                label {Carrier frequency (Hz)}
                callback {progdefaults.ServerCarrier = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
                tooltip {Default listen / transmit frequency} xywh {106 86 80 20} type Simple align 8 minimum 500 maximum 2500 step 25 value 1500
                code0 {o->value(progdefaults.ServerCarrier);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter cntServerOffset {
                label {Search range (Hz)}
                callback {progdefaults.ServerOffset = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
                tooltip {Listen for signals within this range} xywh {106 123 80 20} type Simple align 8 minimum 10 maximum 500 step 10 value 100
                code0 {o->value(progdefaults.SearchRange);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter cntServerACQsn {
                label {Acquisition S/N (dB)}
                callback {progdefaults.ServerACQsn = o->value();
progdefaults.changed = true;}
                tooltip {Capture signals over this threshold} xywh {106 160 80 20} type Simple align 8 minimum 3 maximum 20 step 1 value 6
                code0 {o->value(progdefaults.ServerACQsn);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Counter cntServerAFCrange {
                label {AFC range (Hz)}
                callback {progdefaults.ServerAFCrange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
                tooltip {Limit AFC movement to this range} xywh {106 197 80 20} type Simple align 8 minimum 10 maximum 500 step 10 value 25
                code0 {o->value(progdefaults.SearchRange);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Counter2
              }
              Fl_Check_Button btnPSKmailSweetSpot {
                label {Reset to Carrier}
                callback {progdefaults.PSKmailSweetSpot = o->value();
progdefaults.changed = true;}
                tooltip {When no signal present} xywh {361 86 142 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.PSKmailSweetSpot);}
              }
            }
            Fl_Group {} {
              label General open
              xywh {55 234 490 131} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_arq_s2n_report {
                label {Report ARQ frames average S/N}
                callback {progdefaults.Pskmails2nreport=o->value();}
                xywh {80 259 250 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.Pskmails2nreport);}
              }
            }
          }
          Fl_Group tabSpot {
            label Spotting open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {PSK Reporter} open
              xywh {40 62 525 300} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnPSKRepAuto {
                label {Automatically spot callsigns in decoded text}
                callback {progdefaults.pskrep_auto = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
                tooltip {Parse all incoming text} xywh {65 103 324 20} down_box DOWN_BOX
                code0 {btnPSKRepAuto->value(progdefaults.pskrep_auto);}
              }
              Fl_Check_Button btnPSKRepLog {
                label {Send reception report when logging a QSO}
                callback {progdefaults.pskrep_log = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
                tooltip {Send report only when QSO is logged} xywh {65 134 327 20} down_box DOWN_BOX
                code0 {btnPSKRepLog->value(progdefaults.pskrep_log);}
              }
              Fl_Check_Button btnPSKRepQRG {
                label {Report rig frequency (enable only if you have rig control!)}
                callback {progdefaults.pskrep_qrg = o->value();
progdefaults.changed = true;}
                tooltip {Include the transmit frequency} xywh {65 166 416 20} down_box DOWN_BOX
                code0 {btnPSKRepQRG->value(progdefaults.pskrep_qrg);}
              }
              Fl_Check_Button btn_report_when_visible {
                label {Disable spotting when signal browser(s) are not visible.}
                callback {progdefaults.report_when_visible = o->value();
progdefaults.changed = true;}
                tooltip {Check to reduce CPU load in PSK and RTTY modes.} xywh {65 198 416 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.report_when_visible);}
              }
              Fl_Check_Button btn_pskrep_autostart {
                label {Log on to pskrep when starting fldigi}
                callback {progdefaults.pskrep_autostart = o->value();
progdefaults.changed = true;}
                tooltip {Automatically start psk reporter socket connection} xywh {65 230 291 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.pskrep_autostart);}
              }
              Fl_Box box_connected_to_pskrep {
                label Connected
                xywh {375 231 18 18} box DIAMOND_DOWN_BOX color 7 align 8
              }
              Fl_Input inpPSKRepHost {
                label {Host:}
                callback {progdefaults.pskrep_host = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
                tooltip {To whom the connection is made} xywh {108 268 220 24} when 1
                code0 {inpPSKRepHost->value(progdefaults.pskrep_host.c_str());}
                code1 {inpPSKRepHost->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Input inpPSKRepPort {
                label {Port:}
                callback {progdefaults.pskrep_port = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
                tooltip {Using UDP port \#} xywh {477 268 60 24} when 1
                code0 {inpPSKRepPort->value(progdefaults.pskrep_port.c_str());}
                code1 {inpPSKRepPort->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Button btnPSKRepInit {
                label Initialize
                callback {pskrep_stop();
if (!pskrep_start()) {
    boxPSKRepMsg->copy_label(pskrep_error());
    progdefaults.usepskrep = false;
    box_connected_to_pskrep->color(FL_WHITE);
    box_connected_to_pskrep->redraw();
} else {
    boxPSKRepMsg->label(0);
    o->labelcolor(FL_FOREGROUND_COLOR);
    progdefaults.usepskrep = true;
    box_connected_to_pskrep->color(FL_GREEN);
    box_connected_to_pskrep->redraw();
}}
                tooltip {Initialize the socket client} xywh {457 313 80 24}
              }
              Fl_Box boxPSKRepMsg {
                label {<PSK Reporter error message>}
                xywh {67 297 300 48} labelfont 2
                code0 {boxPSKRepMsg->label(0);}
              }
            }
          }
          Fl_Group tabSweetSpot {
            label {Sweet Spot} open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {open
              xywh {55 71 490 75} box ENGRAVED_FRAME align 21
            } {
              Fl_Value_Input valCWsweetspot {
                label CW
                callback {progdefaults.CWsweetspot=o->value();
progdefaults.changed = true;}
                tooltip {Default CW tracking point} xywh {92 82 65 20} minimum 200 maximum 4000 step 1 value 1000
                code0 {o->value(progdefaults.CWsweetspot);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input valRTTYsweetspot {
                label RTTY
                callback {progdefaults.RTTYsweetspot=o->value();
progdefaults.changed = true;}
                tooltip {Default RTTY tracking point} xywh {270 82 65 20} minimum 200 maximum 4000 step 1 value 1000
                code0 {o->value(progdefaults.RTTYsweetspot);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Value_Input valPSKsweetspot {
                label {PSK et al.}
                callback {progdefaults.PSKsweetspot=o->value();
progdefaults.changed = true;}
                tooltip {Default for all other modems} xywh {470 82 65 20} minimum 200 maximum 4000 step 1 value 1000
                code0 {o->value(progdefaults.PSKsweetspot);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_Value_Input2
              }
              Fl_Check_Button btnStartAtSweetSpot {
                label {Always start new modems at these frequencies}
                callback {progdefaults.StartAtSweetSpot = o->value();
progdefaults.changed = true;}
                tooltip {ON - start at default
OFF - keep current wf cursor position} xywh {65 112 348 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.StartAtSweetSpot);}
              }
            }
            Fl_Group {} {
              label {K3 A1A configuation} open
              xywh {55 151 490 60} box ENGRAVED_FRAME align 21 hide
            } {
              Fl_Check_Button btnCWIsLSB {
                label {CW is LSB}
                callback {progdefaults.CWIsLSB=o->value();
progdefaults.changed=true;}
                tooltip {Select this for Elecraft K3
Other radios should not need it.} xywh {270 172 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.CWIsLSB);}
              }
            }
          }
          Fl_Group tabText_IO {
            label {Text i/o} open
            xywh {0 50 600 340} hide
          } {
            Fl_Group grpTalker {
              label {Talker Socket (MS only)} open
              xywh {55 132 490 73} box ENGRAVED_FRAME align 21
            } {
              Fl_Light_Button btnConnectTalker {
                label Talker
                callback {if (o->value()) open_talker();
else close_talker();}
                xywh {81 152 74 20} selection_color 60
                code0 {extern void open_talker();}
                code1 {extern void close_talker();}
              }
              Fl_Box {} {
                label {Connect/disconnect to Talker socket server}
                xywh {160 152 345 20} align 20
              }
              Fl_Check_Button btn_auto_talk {
                label {Auto connect when fldigi opens (server must be up)}
                callback {progdefaults.auto_talk = o->value();}
                xywh {81 180 391 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.auto_talk);}
              }
            }
            Fl_Group {} {
              label {Capture rx text to external file} open
              xywh {55 72 490 56} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button chkRxStream {
                label {Enable rx text stream}
                callback {progdefaults.speak = o->value();
progdefaults.changed = true;}
                tooltip {Send rx text to file: textout.txt} xywh {81 99 175 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.speak);}
              }
            }
          }
          Fl_Group tabDTMF {
            label DTMF open
            xywh {0 50 600 340} hide
          } {
            Fl_Check_Button chkDTMFdecode {
              label {Decode DTMF tones}
              callback {progdefaults.DTMFdecode = o->value();}
              tooltip {Decode received DTMF tones} xywh {212 103 175 20} down_box DOWN_BOX
              code0 {o->value(progdefaults.DTMFdecode);}
            }
          }
          Fl_Group tabWX {
            label WX open
            xywh {0 50 600 340} hide
          } {
            Fl_Group {} {
              label {Weather query specification} open
              xywh {5 60 590 320} box ENGRAVED_FRAME align 21
            } {
              Fl_Input inpWXsta {
                label {METAR station ID code}
                callback {progdefaults.wx_sta = o->value();
progdefaults.changed = true;}
                tooltip {for example KMDQ for
Huntsville-Madison Executive Airport, AL} xywh {95 131 50 24} align 8
                code0 {o->value(progdefaults.wx_sta.c_str());}
              }
              Fl_Check_Button btn_wx_full {
                label {Full report}
                callback {progdefaults.wx_full=o->value();
progdefaults.changed = true;}
                tooltip {Insert full METAR report} xywh {260 170 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_full);}
              }
              Fl_Check_Button btn_wx_station_name {
                label {METAR station location}
                callback {progdefaults.wx_station_name = o->value();
progdefaults.changed = true;}
                tooltip {Add geopolitical name of METAR station} xywh {260 194 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_station_name);}
              }
              Fl_Check_Button btn_wx_condx {
                label Conditions
                callback {progdefaults.wx_condx=o->value();
progdefaults.changed = true;}
                tooltip {current wx conditions} xywh {260 220 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_condx);}
              }
              Fl_Check_Button btn_wx_fahrenheit {
                label Fahrenheit
                callback {progdefaults.wx_fahrenheit=o->value();
progdefaults.changed = true;}
                tooltip {report Fahrenheit} xywh {260 247 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_fahrenheit);}
              }
              Fl_Check_Button btn_wx_celsius {
                label Celsius
                callback {progdefaults.wx_celsius=o->value();
progdefaults.changed = true;}
                tooltip {report Celsius} xywh {388 247 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_celsius);}
              }
              Fl_Check_Button btn_wx_mph {
                label {Miles / Hour}
                callback {progdefaults.wx_mph=o->value();
progdefaults.changed = true;}
                tooltip {report miles per hour} xywh {260 273 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_mph);}
              }
              Fl_Check_Button btn_wx_kph {
                label {kilometers / hour}
                callback {progdefaults.wx_kph=o->value();
progdefaults.changed = true;}
                tooltip {report kilometers per hour} xywh {388 273 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_kph);}
              }
              Fl_Check_Button btn_wx_inches {
                label {Inches Hg.}
                callback {progdefaults.wx_inches=o->value();
progdefaults.changed = true;}
                tooltip {report inches mercury} xywh {260 300 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_inches);}
              }
              Fl_Check_Button btn_wx_mbars {
                label mbars
                callback {progdefaults.wx_mbars=o->value();
progdefaults.changed = true;}
                tooltip {report millibars} xywh {388 300 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.wx_mbars);}
              }
              Fl_Box {} {
                label Temperature
                xywh {93 245 156 19} align 20
              }
              Fl_Box {} {
                label {Wind speed/dir}
                xywh {93 271 156 19} align 20
              }
              Fl_Box {} {
                label {Barometric pressure}
                xywh {93 298 156 19} align 20
              }
              Fl_Button btn_metar_search {
                label {Search on  web}
                callback {get_METAR_station();}
                xywh {337 131 130 24}
                code0 {\#include "weather.h"}
              }
              Fl_Input txt_wx_url {
                label {Access URL}
                callback {progdefaults.wx_url = o->value();
progdefaults.changed = true;}
                tooltip {Enter METAR data internet URL} xywh {95 95 430 25} when 1
                code0 {o->value(progdefaults.wx_url.c_str());}
              }
              Fl_Button btn_default_wx_url {
                label Default
                callback {txt_wx_url->value(
"https://tgftp.nws.noaa.gov/data/observations/metar/decoded");
progdefaults.wx_url=txt_wx_url->value();
progdefaults.changed=true;}
                tooltip {Default URL} xywh {530 95 60 25}
              }
            }
          }
          Fl_Group tabKML {
            label KML open
            xywh {0 50 600 340} hide
          } {
            Fl_Input btnKmlSaveDir {
              label {KML files directory}
              callback {progdefaults.kml_save_dir=o->value();
progdefaults.changed = true;
kml_init();}
              tooltip {Where generated KML documents are stored.} xywh {26 75 390 24} align 69
              code0 {o->value(progdefaults.kml_save_dir.c_str());}
            }
            Fl_Input inputKmlRootFile {
              label {KML root file}
              xywh {25 119 300 24} align 5
              code0 {o->value("fldigi.kml");}
            }
            Fl_Counter cntKmlMergeDistance {
              label {Minimum distance for splitting aliases (Meters)}
              callback {progdefaults.kml_merge_distance = o->value();
progdefaults.changed = true;
kml_init();}
              tooltip {Minimum distance for splitting alias nodes (Meters)} xywh {26 155 100 24} align 8 minimum 0 maximum 100000 step 10 value 1000
              code0 {o->value(progdefaults.kml_merge_distance);}
              code1 {o->lstep(1000);}
            }
            Fl_Counter cntKmlRetentionTime {
              label {Data retention time, in hours (0 for no limit)}
              callback {progdefaults.kml_retention_time = o->value();
progdefaults.changed = true;
kml_init();}
              tooltip {Number of hours data is kept for each node. Zero means keeping everything.} xywh {25 191 100 24} align 8 minimum 0 maximum 500 step 1
              code0 {o->value(progdefaults.kml_retention_time);}
              code1 {o->lstep(24);}
            }
            Fl_Spinner cntKmlRefreshInterval {
              label {KML refresh interval (seconds)}
              callback {progdefaults.kml_refresh_interval = (int)(o->value());
progdefaults.changed = true;
kml_init();}
              tooltip {Refresh time interval written in KML file (Seconds)} xywh {24 227 50 24} align 8 value 10
              code0 {o->minimum(1); o->maximum(3600); o->step(1);}
              code1 {o->value(progdefaults.kml_refresh_interval);}
              code2 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_Spinner2
            }
            Fl_Group listbox_kml_balloon_style {
              label {KML balloon display style}
              callback {progdefaults.kml_balloon_style = o->index();
progdefaults.changed = true;
kml_init();}
              tooltip {KML balloon in plain text, or HTML, in plain tables or matrices.} xywh {24 263 201 24} box DOWN_BOX color 7 align 8 when 1
              code0 {o->add("Plain text|HTML tables|Single HTML matrix");o->index(progdefaults.kml_balloon_style);}
              code1 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_ListBox
            } {}
            Fl_Input btnKmlCommand {
              label {Command run on KML creation}
              callback {progdefaults.kml_command=o->value();
progdefaults.changed = true;
kml_init();}
              tooltip {Command started when KML files are generated. Subprocesses are started once, and restarted if needed.} xywh {24 299 246 24} align 72
              code0 {o->value(progdefaults.kml_command.c_str());}
            }
            Fl_Button btlTestKmlCommand {
              label {Test command}
              callback {KmlServer::SpawnProcess();}
              tooltip {Execute command on KML files.} xywh {24 335 191 24}
            }
            Fl_Button btnSelectKmlDestDir {
              label {Change dir...}
              callback {Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(KmlDestDirSet);
fc->show();}
              tooltip {Choose directory to store KML documents} xywh {425 75 101 24}
            }
            Fl_Button btlPurge {
              label {Cleanup KML data now !}
              callback {KmlServer::GetInstance()->Reset();}
              tooltip {Cleanups KML documents, empties Google Earth display.} xywh {336 119 190 24}
            }
            Fl_Check_Button btnKmlPurgeOnStartup {
              label {Cleanup on startup}
              callback {progdefaults.kml_purge_on_startup = o->value();
progdefaults.changed = true;}
              tooltip {Empties KML documents when starting program.} xywh {322 231 172 15} down_box DOWN_BOX
              code0 {o->value(progdefaults.kml_purge_on_startup);}
            }
            Fl_Group {} {open
              xywh {283 327 310 40} box ENGRAVED_FRAME
            } {
              Fl_Check_Button btn_kml_enabled {
                label {KML server enabled (On / Off)}
                callback {progdefaults.kml_enabled = o->value();
if (progdefaults.kml_enabled) {
  kml_init(true);
  progdefaults.changed = true;
} else {
  KmlServer::Exit();
}}
                tooltip {Uncheck if KML is never used} xywh {305 337 242 19} down_box DOWN_BOX
                code0 {o->value(progdefaults.kml_enabled);}
              }
            }
          }
        }
      }
      Fl_Group tabDL {
        label {DL Client} open
        xywh {0 25 540 350} selection_color 48
      } {
        Fl_Tabs tabsDL {open
          xywh {0 25 540 348}
        } {
          Fl_Group tabDLEnable {
            label Enable open
            xywh {0 50 540 320} hide
          } {
            Fl_Group {} {
              label habitat open
              xywh {5 59 530 76} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button confdialog_dl_online {
                label Online
                callback {if (o->value())
{
    dl_fldigi::commit();
    btnApplyConfig->deactivate();
}

dl_fldigi::online(o->value());}
                xywh {15 90 70 25} down_box DOWN_BOX
              }
              Fl_Input {} {
                label {Couch URI}
                callback {progdefaults.habitat_uri = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_UTHR_SETTINGS);
btnApplyConfig->activate();}
                tooltip {Address of the CouchDB server} xywh {165 80 360 20}
                code0 {o->value(progdefaults.habitat_uri.c_str());}
              }
              Fl_Input {} {
                label {Couch DB}
                callback {progdefaults.habitat_db = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_UTHR_SETTINGS);
btnApplyConfig->activate();}
                tooltip {CouchDB database name} xywh {165 106 360 19}
                code0 {o->value(progdefaults.habitat_db.c_str());}
              }
            }
            Fl_Group {} {
              label {SSDV Image Configuration} open
              xywh {5 140 530 80} box ENGRAVED_FRAME align 21
            } {
              Fl_Input imagepacketurl {
                label {Packet Upload URL:}
                callback {progdefaults.ssdv_packet_url = o->value();
progdefaults.changed = true;}
                xywh {165 165 360 20}
                code0 {o->value(progdefaults.ssdv_packet_url.c_str());}
              }
              Fl_Check_Button imagesave {
                label {Save Images}
                callback {progdefaults.ssdv_save_image = o->value();
progdefaults.changed = true;}
                xywh {15 189 130 21} down_box DOWN_BOX
                code0 {o->value(progdefaults.ssdv_save_image);}
              }
              Fl_Input imagesavedir {
                label {Location:}
                callback {progdefaults.ssdv_save_dir = o->value();
progdefaults.changed = true;}
                xywh {235 190 290 20}
                code0 {o->value(progdefaults.ssdv_save_dir.c_str());}
              }
            }
            Fl_Group {} {
              label {Waterfall PNG Export} open
              xywh {5 225 530 55} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button {} {
                label Enable
                callback {progdefaults.png_wfall = o->value();
progdefaults.changed = true;}
                xywh {15 250 80 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.png_wfall);}
              }
              Fl_Input {} {
                label {Location:}
                callback {progdefaults.waterfall_png_location = o->value();
progdefaults.changed = true;}
                tooltip {Please use full path including filename} xywh {235 250 290 20}
                code0 {o->value(progdefaults.waterfall_png_location.c_str());}
              }
            }
            Fl_Group {} {
              label {Frequency Tracking} open
              xywh {5 284 530 76} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnTrackFreq {
                label Enable
                callback {progdefaults.track_freq = o->value();
progdefaults.changed = true;}
                tooltip {Adjust the radio frequency to keep the signal inside the specified limits} xywh {15 317 125 25} down_box DOWN_BOX
                code0 {o->value(progdefaults.track_freq);}
              }
              Fl_Counter cntTrackFreqMin {
                label {Minimum Waterfall Frequency}
                callback {int i = o->value();
progdefaults.track_freq_min = i;
if(progdefaults.track_freq_max < i)
{
  progdefaults.track_freq_max = i;
  cntTrackFreqMax->value(i);
}
progdefaults.changed = true;}
                tooltip {Low frequency limit in Hz} xywh {145 308 105 20} align 8 minimum 0 maximum 4000 step 1 value 1000
                code0 {o->value(progdefaults.track_freq_min);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                code2 {o->lstep(10.0);}
                class Fl_Counter2
              }
              Fl_Counter cntTrackFreqMax {
                label {Maximum Waterfall Frequency}
                callback {int i = o->value();
progdefaults.track_freq_max = i;
if(progdefaults.track_freq_min > i)
{
  progdefaults.track_freq_min = i;
  cntTrackFreqMin->value(i);
}
progdefaults.changed = true;}
                tooltip {High frequency limit in Hz} xywh {145 333 105 20} align 8 minimum 0 maximum 4000 step 1 value 2000
                code0 {o->value(progdefaults.track_freq_max);}
                code1 {o->labelsize(FL_NORMAL_SIZE);}
                code2 {o->lstep(10.0);}
                class Fl_Counter2
              }
            }
          }
          Fl_Group {} {
            label Location open
            xywh {0 50 540 317}
          } {
            Fl_Group {} {
              label {Listener Location} open
              xywh {5 60 530 300} box ENGRAVED_FRAME align 21
            } {
              Fl_Input {} {
                label Baud
                callback {progdefaults.gps_speed = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_GPS_SETTINGS);
btnApplyConfig->activate();}
                xywh {115 225 150 25} type Int
                code0 {o->value(progdefaults.gps_speed);}
                class Fl_Value_Input
              }
              Fl_Button {} {
                label {Refresh Device List}
                callback {progdefaults.testCommPorts();}
                xywh {305 195 170 25}
              }
              Fl_Round_Button {} {
                label {Stationary Listener}
                callback {if (o->value())
{
    dl_fldigi::location::new_location_mode = dl_fldigi::location::LOC_STATIONARY;
    dl_fldigi::changed(dl_fldigi::CH_LOCATION_MODE);
    btnApplyConfig->activate();
}}
                xywh {45 80 190 25} type Radio down_box ROUND_DOWN_BOX
                code0 {o->value(!progdefaults.gps_start_enabled);}
              }
              Fl_Input stationary_lat {
                label Latitude
                callback {progdefaults.myLat = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_STATIONARY_LOCATION);
btnApplyConfig->activate();}
                xywh {135 105 125 25} type Float
                code0 {o->value(progdefaults.myLat.c_str());}
              }
              Fl_Input stationary_lon {
                label Longitude
                callback {progdefaults.myLon = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_STATIONARY_LOCATION);
btnApplyConfig->activate();}
                xywh {350 105 125 25} type Float
                code0 {o->value(progdefaults.myLon.c_str());}
              }
              Fl_Round_Button {} {
                label {Upload GPS Position}
                callback {if (o->value())
{
    dl_fldigi::location::new_location_mode = dl_fldigi::location::LOC_GPS;
    dl_fldigi::changed(dl_fldigi::CH_LOCATION_MODE);
    btnApplyConfig->activate();
}}
                xywh {45 165 190 25} type Radio down_box ROUND_DOWN_BOX
                code0 {o->value(progdefaults.gps_start_enabled);}
              }
              Fl_Group inpGPSdev {
                label Device
                callback {progdefaults.gps_device = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_GPS_SETTINGS);
btnApplyConfig->activate();} open selected
                xywh {115 195 185 25} box DOWN_BOX color 7 align 4
                code0 {o->labelsize(FL_NORMAL_SIZE);}
                class Fl_ComboBox
              } {}
              Fl_Check_Button {} {
                label {Always enable GPS on startup}
                callback {progdefaults.changed = true;}
                xywh {235 165 240 25} down_box DOWN_BOX
                code0 {o->value(progdefaults.gps_start_enabled);}
              }
              Fl_Spinner {} {
                label Period
                callback {progdefaults.gps_period = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_GPS_SETTINGS);
btnApplyConfig->activate();}
                xywh {345 225 45 25} box DOWN_BOX minimum 10 maximum 300
                code0 {o->value(progdefaults.gps_period);}
              }
              Fl_Group {} {
                label {Last GPS Position} open
                xywh {10 260 520 90} box ENGRAVED_BOX align 21
              } {
                Fl_Output gps_pos_lat {
                  label Lat
                  xywh {235 285 105 25}
                }
                Fl_Output gps_pos_altitude {
                  label Alt
                  xywh {95 315 105 25}
                }
                Fl_Output gps_pos_time {
                  label Time
                  xywh {95 285 105 25}
                }
                Fl_Output gps_pos_lon {
                  label Lon
                  xywh {380 285 105 25}
                }
                Fl_Button gps_pos_save {
                  label {Save as stationary location}
                  callback {stationary_lat->value(gps_pos_lat->value());
stationary_lon->value(gps_pos_lon->value());
stationary_alt->value(gps_pos_altitude->value());
stationary_lat->do_callback();
stationary_lon->do_callback();
stationary_alt->do_callback();}
                  xywh {235 315 250 25} deactivate
                }
              }
              Fl_Box {} {
                label {please enter lat/long as one number, in decimal degrees; altitude in metres}
                xywh {290 130 190 35} labelsize 10 align 128
              }
              Fl_Box {} {
                label {seconds between position updates}
                xywh {395 220 105 35} labelsize 10 align 128
              }
              Fl_Input stationary_alt {
                label Altitude
                callback {progdefaults.myAlt = o->value();
progdefaults.changed = true;
dl_fldigi::changed(dl_fldigi::CH_STATIONARY_LOCATION);
btnApplyConfig->activate();}
                xywh {135 135 125 25} type Float
                code0 {o->value(progdefaults.myAlt.c_str());}
              }
            }
          }
          Fl_Group tabDLFlights {
            label {Active flights list} open
            xywh {0 50 540 323} hide
          } {
            Fl_Browser flight_browser {
              callback {if (habFlight)
    habFlight->value(o->value() - 1);
payload_browser->deselect();

dl_fldigi::flights::select_flight(o->value() - 1);

/* Handle a double click and autoconfigure.
 * This payload is ready for configuring iff dl_fldigi.cxx
 * has activated the autoconfigure button. */
if (Fl::event_clicks() > 0 && payload_autoconfigure_a->active())
    dl_fldigi::flights::auto_configure();}
              xywh {5 60 530 225} type Hold
              code0 {o->column_widths(flight_browser_columns);}
            }
            Fl_Group {} {open
              xywh {5 290 530 75} box ENGRAVED_BOX align 21
            } {
              Fl_Button flight_docs_refresh_a {
                label {Refresh flights/payloads}
                callback {dl_fldigi::hbtint::uthr->flights();
dl_fldigi::hbtint::uthr->payloads();}
                xywh {122 330 295 25}
              }
              Fl_Choice flight_payload_list {
                label {Payload:} open
                xywh {75 300 145 25} down_box BORDER_BOX
              } {}
              Fl_Button payload_autoconfigure_a {
                label Autoconfigure
                callback {dl_fldigi::flights::auto_configure();}
                xywh {370 300 155 25}
              }
              Fl_Choice flight_payload_transmission_list {open
                xywh {225 300 140 25} down_box BORDER_BOX
              } {}
            }
          }
          Fl_Group tabDLPayloads {
            label {All payloads (testing)} open
            xywh {0 50 540 323} hide
          } {
            Fl_Browser payload_browser {
              callback {flight_browser->deselect();
if (habFlight)
    habFlight->value(-1);

dl_fldigi::flights::select_payload(o->value() - 1);

/* Handle a double click and autoconfigure.
 * This payload is ready for configuring iff dl_fldigi.cxx
 * has activated the autoconfigure button. */
if (Fl::event_clicks() > 0 && payload_autoconfigure_b->active())
    dl_fldigi::flights::auto_configure();}
              xywh {5 60 530 225} type Hold
              code0 {o->column_widths(payload_browser_columns);}
            }
            Fl_Group {} {open
              xywh {5 290 530 75} box ENGRAVED_BOX align 21
            } {
              Fl_Button flight_docs_refresh_b {
                label {Refresh flights/payloads}
                callback {dl_fldigi::hbtint::uthr->flights();
dl_fldigi::hbtint::uthr->payloads();}
                xywh {325 300 200 25}
              }
              Fl_Button payload_autoconfigure_b {
                label Autoconfigure
                callback {dl_fldigi::flights::auto_configure();}
                xywh {325 330 200 25}
              }
              Fl_Input payload_search_text {
                label {Search:}
                callback {dl_fldigi::flights::payload_search(false);}
                xywh {75 300 165 25} when 1
              }
              Fl_Choice payload_transmission_list {
                label {Mode:} open
                xywh {75 330 230 25} down_box BORDER_BOX
              } {}
              Fl_Button {} {
                label Next
                callback {dl_fldigi::flights::payload_search(true);}
                xywh {245 300 60 25}
              }
            }
          }
        }
      }
      Fl_Group tabQRZ {
        label Web open
        xywh {0 25 675 365} hide
      } {
        Fl_Tabs tabsQRZ {open
          xywh {0 25 675 365}
        } {
          Fl_Group {} {
            label {Call Lookup} open
            xywh {0 50 675 340}
          } {
            Fl_Group {} {
              label {Web Browser lookup} open
              xywh {8 56 585 131} box ENGRAVED_FRAME align 21
            } {
              Fl_Round_Button btnQRZWEBnotavailable {
                label None
                callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZWEBNONE;
progdefaults.changed = true;}
                tooltip {Do not use callsign lookup via web browser} xywh {48 75 61 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.QRZWEB == QRZWEBNONE);}
              }
              Fl_Round_Button btnQRZonline {
                label {QRS on line}
                callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZHTML;
progdefaults.changed = true;}
                tooltip {Visit QRZ web site} xywh {48 95 83 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZWEB == QRZHTML);}
              }
              Fl_Round_Button btnHAMCALLonline {
                label {HamCall online}
                callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMCALLHTML;
progdefaults.changed = true;}
                tooltip {Visit Hamcall web site} xywh {48 116 83 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZWEB == HAMCALLHTML);}
              }
              Fl_Round_Button btnHamQTHonline {
                label {HamQTH online}
                callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMQTHHTML;
progdefaults.changed = true;}
                tooltip {Visit hamQTH web site} xywh {48 137 20 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZWEB == HAMQTHHTML);}
              }
              Fl_Round_Button btnCallookOnline {
                label {Callook online}
                callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = CALLOOKHTML;
progdefaults.changed = true;}
                tooltip {Visit hamQTH web site} xywh {48 158 20 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZWEB == CALLOOKHTML);}
              }
              Fl_Input inp_qrzurl {
                label QRZ
                callback {progdefaults.qrzurl = o->value();
progdefaults.changed=true;}
                xywh {302 69 270 22}
                code0 {o->value(progdefaults.qrzurl.c_str());}
                class Fl_Input2
              }
              Fl_Input inp_hamcallurl {
                label Hamcall
                callback {progdefaults.hamcallurl = o->value();
progdefaults.changed = true;}
                xywh {302 96 270 22}
                code0 {o->value(progdefaults.hamcallurl.c_str());}
                class Fl_Input2
              }
              Fl_Input inp_hamqthurl {
                label HamQTH
                callback {progdefaults.hamqthurl = o->value();
progdefaults.changed = true;}
                xywh {302 124 270 22}
                code0 {o->value(progdefaults.hamqthurl.c_str());}
                class Fl_Input2
              }
              Fl_Input inp_callook_url {
                label Callook
                callback {progdefaults.callookurl = o->value();
progdefaults.changed = true;}
                tooltip {Callook.info web site} xywh {302 153 270 22}
                code0 {o->value(progdefaults.callookurl.c_str());}
                class Fl_Input2
              }
            }
            Fl_Group {} {
              label {Data base lookup} open
              xywh {8 188 585 195} box ENGRAVED_FRAME align 21
            } {
              Fl_Round_Button btnQRZXMLnotavailable {
                label None
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZXMLNONE;
progdefaults.changed = true;}
                tooltip {Do not use callsign database} xywh {55 211 69 20} down_box DOWN_BOX value 1
                code0 {o->value(progdefaults.QRZXML == QRZXMLNONE);}
              }
              Fl_Round_Button btnQRZcdrom {
                label {QRZ cdrom}
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZCD;
progdefaults.changed = true;}
                tooltip {Use CD or hard drive CD image} xywh {55 239 76 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZXML == QRZCD);}
              }
              Fl_Round_Button btnQRZsub {
                label {QRZ.com}
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZNET;
progdefaults.changed = true;}
                tooltip {You need a paid QRZ online
subscription to access} xywh {55 267 137 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZXML == QRZNET);}
              }
              Fl_Round_Button btnHamcall {
                label {Hamcall.net}
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMCALLNET;
progdefaults.changed = true;}
                tooltip {You need a paid Hamcall online
subscription to access} xywh {55 296 137 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZXML == HAMCALLNET);}
              }
              Fl_Round_Button btnHamQTH {
                label {HamQTH.com}
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMQTH;
progdefaults.changed = true;}
                tooltip {Free service courtesy of OK} xywh {55 324 137 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZXML == HAMQTH);}
              }
              Fl_Round_Button btnCALLOOK {
                label {Callook.info}
                callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = CALLOOK;
progdefaults.changed = true;}
                tooltip {Callook.info lookup (free service US callsigns only)} xywh {55 353 113 20} down_box DOWN_BOX
                code0 {o->value(progdefaults.QRZXML == CALLOOK);}
              }
              Fl_Input txtQRZpathname {
                callback {progdefaults.QRZpathname = o->value();
progdefaults.QRZchanged = true;
progdefaults.changed = true;}
                tooltip {ie: /home/dave/CALLBK/ or C:/CALLBK/
Leave blank to search for database} xywh {172 238 401 22}
                code0 {o->value(progdefaults.QRZpathname.c_str());}
                code1 {txtQRZpathname->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Input inpQRZusername {
                label {User name}
                callback {progdefaults.QRZusername = o->value();
progdefaults.changed = true;}
                tooltip {Login name for QRZ / Hamcall / HamQTH} xywh {282 273 163 22}
                code0 {o->value(progdefaults.QRZusername.c_str());}
                code1 {inpQRZusername->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Input inpQRZuserpassword {
                label Password
                callback {progdefaults.QRZuserpassword = o->value();
progdefaults.changed = true;}
                tooltip {Password for QRZ / Hamcall / HamQTH} xywh {282 309 163 22}
                code0 {o->value(progdefaults.QRZuserpassword.c_str());}
                code1 {o->type(FL_SECRET_INPUT);}
                code2 {inpQRZuserpassword->labelsize(FL_NORMAL_SIZE);}
                class Fl_Input2
              }
              Fl_Button btnQRZpasswordShow {
                label Show
                callback {inpQRZuserpassword->type(inpQRZuserpassword->type() ^ FL_SECRET_INPUT);
inpQRZuserpassword->redraw();
o->label((inpQRZuserpassword->type() & FL_SECRET_INPUT) ? "Show" : "Hide");}
                tooltip {Show password in plain text} xywh {457 309 76 22}
              }
              Fl_Group {} {open
                xywh {177 349 403 27} box ENGRAVED_FRAME
              } {
                Fl_Check_Button btn_notes_address {
                  label {Add address to notes field}
                  callback {progdefaults.notes_address = o->value();
progdefaults.changed = true;}
                  xywh {201 355 207 15} down_box DOWN_BOX
                  code0 {o->value(progdefaults.notes_address);}
                }
                Fl_Check_Button btn_clear_notes {
                  label {clear old data}
                  callback {progdefaults.clear_notes = o->value();
progdefaults.changed= true;}
                  xywh {428 355 122 15} down_box DOWN_BOX
                  code0 {o->value(progdefaults.clear_notes);}
                }
              }
            }
          }
          Fl_Group tabEQSL {
            label eQSL open
            xywh {0 50 600 340} hide
          } {
            Fl_Input inpEQSL_www_url {
              label {www url}
              callback {progdefaults.eqsl_www_url = o->value();
progdefaults.changed = true;}
              tooltip {Your login name} xywh {155 59 390 22}
              code0 {o->value(progdefaults.eqsl_www_url.c_str());}
              code1 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Input inpEQSL_id {
              label {User ID}
              callback {progdefaults.eqsl_id = o->value();
progdefaults.changed = true;}
              tooltip {Your login name} xywh {154 82 150 22}
              code0 {o->value(progdefaults.eqsl_id.c_str());}
              code1 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Input inpEQSL_pwd {
              label Password
              callback {progdefaults.eqsl_pwd = o->value();
progdefaults.changed = true;}
              tooltip {Your login password} xywh {154 105 150 22}
              code0 {o->value(progdefaults.eqsl_pwd.c_str());}
              code1 {o->type(FL_SECRET_INPUT);}
              code2 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Button btnEQSL_pwd_show {
              label Show
              callback {inpEQSL_pwd->type(inpEQSL_pwd->type() ^ FL_SECRET_INPUT);
inpEQSL_pwd->redraw();
o->label((inpEQSL_pwd->type() & FL_SECRET_INPUT) ? _("Show") : _("Hide"));}
              tooltip {Show password in plain text} xywh {310 105 70 22}
            }
            Fl_Input inpEQSL_nick {
              label {QTH Nickname}
              callback {progdefaults.eqsl_nick = o->value();
progdefaults.changed = true;}
              tooltip {Your login name} xywh {154 129 150 22}
              code0 {o->value(progdefaults.eqsl_nick.c_str());}
              code1 {o->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Button btn_verify_eqsl {
              label Verify
              callback cb_btn_verify_eqsl
              tooltip {Verify database with eQSL download file} xywh {475 129 70 22}
            }
            Fl_Group {} {
              label Options open
              xywh {42 157 516 223} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btn_send_when_logged {
                label {send when logged (log button, <LOG>, <LNW>)}
                callback {progdefaults.eqsl_when_logged = o->value();
progdefaults.changed = true;}
                tooltip {automatic data upload} xywh {126 166 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.eqsl_when_logged);}
              }
              Fl_Check_Button btn_send_datetime_off {
                label {Use date/time off for log entry}
                callback {progdefaults.eqsl_datetime_off = o->value();
progdefaults.changed = true;}
                tooltip {default uses date/time on} xywh {126 186 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.eqsl_datetime_off);}
              }
              Fl_Check_Button btn_show_eqsl_delivery {
                label {Show delivery message}
                callback {progdefaults.eqsl_show_delivery = o->value();
progdefaults.changed = true;}
                tooltip {Display timed delivery message if enabled} xywh {126 206 70 15} down_box DOWN_BOX
                code0 {o->value(progdefaults.eqsl_show_delivery);}
              }
              Fl_Input txt_eqsl_default_message {
                label {Default message}
                callback {progdefaults.eqsl_default_message = o->value();
progdefaults.changed = true;}
                tooltip {default text to send with <LOG> etc} xywh {95 247 451 40} type Multiline align 5 when 1
                code0 {o->value(progdefaults.eqsl_default_message.c_str());}
                class Fl_Input2
              }
              Fl_Group {} {
                label {Text Tags (tags use {} delimiters)} open
                xywh {58 293 481 81} box FLAT_BOX align 21
              } {
                Fl_Box eqsl_txt1 {
                  label {  {CALL} other ops call sign}
                  xywh {64 333 220 17} align 20
                }
                Fl_Box eqsl_txt2 {
                  label {  {MODE} full mode / submode}
                  xywh {62 352 220 17} align 20
                }
                Fl_Box eqsl_txt3 {
                  label {{NAME} other ops name}
                  xywh {310 333 220 17} align 20
                }
                Fl_Box {} {
                  label {These tags can also be used in <EQSL:[message]>}
                  xywh {80 312 440 17}
                }
              }
            }
          }
          Fl_Group tabLOTW {
            label LoTW open
            xywh {0 50 600 340} hide
          } {
            Fl_Input txt_lotw_pathname {
              label {tqsl:}
              callback {progdefaults.lotw_pathname = o->value();
progdefaults.changed = true;}
              tooltip {Enter full path-filename for tqsl executable} xywh {82 91 422 24} when 1
              code0 {o->value(progdefaults.lotw_pathname.c_str());}
              class Fl_Input2
            }
            Fl_Input inpLOTW_pwd {
              label Password
              callback {progdefaults.lotw_pwd = o->value();
progdefaults.changed = true;}
              tooltip {Your tqsl login password} xywh {82 126 250 24}
              code0 {o->value(progdefaults.lotw_pwd.c_str());}
              code1 {o->type(FL_SECRET_INPUT);}
              code2 {inpLOTW_pwd->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Check_Button btn_submit_lotw_password {
              label {Use password for tqsl access}
              callback {progdefaults.submit_lotw_password=o->value();
progdefaults.changed=true;}
              tooltip {Submit password with each upload} xywh {42 161 234 16} down_box DOWN_BOX
              code0 {o->value(progdefaults.submit_lotw_password);}
            }
            Fl_Input inpLOTW_location {
              label Location
              callback {progdefaults.lotw_location = o->value();
progdefaults.changed = true;}
              tooltip {tqsl station location} xywh {82 188 250 24}
              code0 {o->value(progdefaults.lotw_location.c_str());}
              code1 {inpLOTW_pwd->labelsize(FL_NORMAL_SIZE);}
              class Fl_Input2
            }
            Fl_Button btn_select_lotw {
              label Locate
              callback {std::string str = select_binary_pathname(progdefaults.lotw_pathname);
txt_lotw_pathname->value(str.c_str());
progdefaults.lotw_pathname = str;
progdefaults.changed = true;}
              tooltip {Locate tqsl executable} xywh {525 91 70 24}
            }
            Fl_Check_Button btn_lotw_quiet_mode {
              label {Quiet mode [-q], do not open tqsl dialog}
              callback {progdefaults.lotw_quiet_mode=o->value();
progdefaults.changed=true;}
              tooltip {Operate tqsl in batch mode (no dialog)} xywh {42 223 309 16} down_box DOWN_BOX
              code0 {o->value(progdefaults.lotw_quiet_mode);}
            }
            Fl_Check_Button btn_submit_lotw {
              label {Send QSO data to LoTW when logged}
              callback {progdefaults.submit_lotw=o->value();
progdefaults.changed=true;}
              tooltip {Submit each QSO as logged} xywh {42 247 289 16} down_box DOWN_BOX
              code0 {o->value(progdefaults.submit_lotw);}
            }
            Fl_Button btn_export_lotw {
              label Export
              callback {cb_btnExportLoTW();}
              tooltip {Export records for LoTW upload} xywh {15 273 70 24}
            }
            Fl_Button btn_review_lotw {
              label Check
              callback {cb_review_lotw();}
              tooltip {Review lotw.adif file before sending with tqsl} xywh {15 300 70 24}
            }
            Fl_Button btn_send_lotw {
              label Send
              callback {cb_send_lotw();}
              tooltip {Send lotw.adif via tqsl} xywh {15 328 70 24}
            }
            Fl_Box {} {
              label {Export logbook records for LoTW upload}
              xywh {90 273 346 24} align 20
            }
            Fl_Box {} {
              label {Review / edit the exported LoTW upload adif file}
              xywh {90 300 346 24} align 20
            }
            Fl_Box {} {
              label {Submit the upload adif file to LoTW}
              xywh {90 328 346 24} align 20
            }
            Fl_Box {} {
              label {You must have tqsl installed and it's location recorded for LoTW updates to work!}
              xywh {11 60 574 24} align 16
            }
            Fl_Button btnLOTW_pwd_show {
              label Show
              callback {inpLOTW_pwd->type(inpLOTW_pwd->type() ^ FL_SECRET_INPUT);
inpLOTW_pwd->redraw();
o->label((inpLOTW_pwd->type() & FL_SECRET_INPUT) ? _("Show") : _("Hide"));}
              tooltip {Show password in plain text} xywh {340 126 70 24}
            }
            Fl_Box {} {
              label {Use this tqsl station location}
              xywh {339 188 211 24} align 20
            }
            Fl_Button btn_verify_lotw {
              label Match
              callback cb_btn_verify_lotw
              tooltip {Verify database with LoTW download file} xywh {15 356 70 24}
            }
            Fl_Box {} {
              label {Match logbook records with LoTW download file}
              xywh {90 356 346 24} align 20
            }
            Fl_Button btn_view_unmatched {
              label {View Unmatched}
              callback cb_btn_view_unmatched
              tooltip {Verify database with LoTW download file} xywh {456 356 139 24} deactivate
            }
            Fl_Check_Button btn_show_lotw_delivery {
              label {Show delivery message}
              callback {progdefaults.lotw_show_delivery = o->value();
progdefaults.changed = true;}
              tooltip {Display timed delivery message if enabled} xywh {341 247 70 15} down_box DOWN_BOX
              code0 {o->value(progdefaults.lotw_show_delivery);}
            }
          }
        }
      }
      Fl_Group tabAutoStart {
        label Autostart
        callback {progdefaults.changed = true;} open
        xywh {0 25 600 365} when 1 hide
      } {
        Fl_Group {} {
          label {Auto start programs with fldigi} open
          xywh {2 32 596 335} box ENGRAVED_BOX align 17
        } {
          Fl_Input txt_auto_flrig_pathname {
            label {flrig:}
            callback {progdefaults.auto_flrig_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for flrig} xywh {63 71 310 24} when 1
            code0 {o->value(progdefaults.auto_flrig_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_flrig {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_flrig_pathname);
txt_auto_flrig_pathname->value(str.c_str());
progdefaults.auto_flrig_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate flrig executable} xywh {395 71 70 24}
          }
          Fl_Input txt_auto_flamp_pathname {
            label {flamp:}
            callback {progdefaults.auto_flamp_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for flamp} xywh {63 109 310 24} when 1
            code0 {o->value(progdefaults.auto_flamp_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_auto_flamp {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_flamp_pathname);
txt_auto_flamp_pathname->value(str.c_str());
progdefaults.auto_flamp_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate flamp executable} xywh {395 109 70 24}
          }
          Fl_Input txt_auto_flnet_pathname {
            label {flnet:}
            callback {progdefaults.auto_flnet_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for flnet} xywh {63 147 310 24} when 1
            code0 {o->value(progdefaults.auto_flnet_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_auto_flnet {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_flnet_pathname);
txt_auto_flnet_pathname->value(str.c_str());
progdefaults.auto_flnet_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate flnet executable} xywh {395 147 70 24}
          }
          Fl_Input txt_auto_fllog_pathname {
            label {fllog:}
            callback {progdefaults.auto_fllog_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for fllog} xywh {63 186 310 24} when 1
            code0 {o->value(progdefaults.auto_fllog_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_fllog {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_fllog_pathname);
txt_auto_fllog_pathname->value(str.c_str());
progdefaults.auto_fllog_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate fllog executable} xywh {395 186 70 24}
          }
          Fl_Input txt_auto_prog1_pathname {
            label {Prog 1:}
            callback {progdefaults.auto_prog1_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for external program} xywh {63 224 310 24} when 1
            code0 {o->value(progdefaults.auto_prog1_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_prog1 {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_prog1_pathname);
txt_auto_prog1_pathname->value(str.c_str());
progdefaults.auto_prog1_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate program \#1 executable} xywh {395 224 70 24}
          }
          Fl_Input txt_auto_prog2_pathname {
            label {Prog 2:}
            callback {progdefaults.auto_prog2_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for external program} xywh {63 262 310 24} when 1
            code0 {o->value(progdefaults.auto_prog2_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_prog2 {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_prog2_pathname);
txt_auto_prog2_pathname->value(str.c_str());
progdefaults.auto_prog2_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate program \#2 executable} xywh {395 262 70 24}
          }
          Fl_Input txt_auto_prog3_pathname {
            label {Prog 3:}
            callback {progdefaults.auto_prog3_pathname = o->value();
progdefaults.changed = true;}
            tooltip {Enter full path-filename for external program} xywh {63 301 310 24} when 1
            code0 {o->value(progdefaults.auto_prog3_pathname.c_str());}
            class Fl_Input2
          }
          Fl_Button btn_select_prog3 {
            label Locate
            callback {std::string str = select_binary_pathname(progdefaults.auto_prog3_pathname);
txt_auto_prog3_pathname->value(str.c_str());
progdefaults.auto_prog3_pathname = str;
progdefaults.changed = true;}
            tooltip {Locate program \#3 executable} xywh {395 301 70 24}
          }
          Fl_Check_Button btn_flrig_auto_enable {
            label {Enable
-}
            callback {progdefaults.flrig_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 75 19 15} down_box DOWN_BOX align 1
            code0 {o->value(progdefaults.flrig_auto_enable);}
          }
          Fl_Check_Button btn_flamp_auto_enable {
            callback {progdefaults.flamp_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 113 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.flamp_auto_enable);}
          }
          Fl_Check_Button btn_flnet_auto_enable {
            callback {progdefaults.flnet_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 151 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.flnet_auto_enable);}
          }
          Fl_Check_Button btn_fllog_auto_enable {
            callback {progdefaults.fllog_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 190 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.fllog_auto_enable);}
          }
          Fl_Check_Button btn_prog1_auto_enable {
            callback {progdefaults.prog1_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 228 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.prog1_auto_enable);}
          }
          Fl_Check_Button btn_prog2_auto_enable {
            callback {progdefaults.prog2_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 266 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.prog2_auto_enable);}
          }
          Fl_Check_Button btn_prog3_auto_enable {
            callback {progdefaults.prog3_auto_enable = o->value();
progdefaults.changed = true;}
            tooltip {Enable this entry when fldigi first starts} xywh {475 305 23 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.prog3_auto_enable);}
          }
          Fl_Button btn_test_flrig {
            label Test
            callback {start_process(progdefaults.auto_flrig_pathname);}
            tooltip {Start flrig} xywh {505 71 70 24}
          }
          Fl_Button btn_test_flamp {
            label Test
            callback {start_process(progdefaults.auto_flamp_pathname);}
            tooltip {Start flamp} xywh {505 109 70 24}
          }
          Fl_Button btn_test_flnet {
            label Test
            callback {start_process(progdefaults.auto_flnet_pathname);}
            tooltip {Start flnet} xywh {505 147 70 24}
          }
          Fl_Button btn_test_fllog {
            label Test
            callback {start_process(progdefaults.auto_fllog_pathname);}
            tooltip {Start fllog} xywh {505 186 70 24}
          }
          Fl_Button btn_test_prog1 {
            label Test
            callback {start_process(progdefaults.auto_prog1_pathname);}
            tooltip {Start prog1} xywh {505 224 70 24}
          }
          Fl_Button btn_test_prog2 {
            label Test
            callback {start_process(progdefaults.auto_prog2_pathname);}
            tooltip {Start prog2} xywh {505 262 70 24}
          }
          Fl_Button btn_test_prog3 {
            label Test
            callback {start_process(progdefaults.auto_prog3_pathname);}
            tooltip {Start prog3} xywh {505 301 70 24}
          }
        }
      }
      Fl_Group tabIO {
        label IO
        callback {btnDisable_p2p_io_widgets->value(1);}
        xywh {0 25 600 365} hide
        code0 {btnDisable_p2p_io_widgets->value(1);}
      } {
        Fl_Group {} {open
          xywh {6 34 588 102} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btnDisable_p2p_io_widgets {
            label Lock user_data_type long
            callback {progStatus.ip_lock = o->value();
if(o->value())
	disable_config_p2p_io_widgets();
else
	enable_config_p2p_io_widgets();
kiss_io_set_button_state(0);}
            tooltip {Allow/Disallow Changes} xywh {12 112 85 20} down_box DOWN_BOX
            code0 {o->value(progStatus.ip_lock);}
          }
          Fl_Check_Button btnEnable_arq {
            label {Enable ARQ}
            callback {if(o->value()) {
	enable_arq();
}

progdefaults.changed = true;}
            tooltip {Used For PSKMail and FLDIGI Suite of Programs} xywh {96 112 115 20} type Radio down_box DOWN_BOX
            code0 {if(progStatus.data_io_enabled == ARQ_IO) o->value(true);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnEnable_kiss {
            label {Enable KISS}
            callback {if(o->value()) {
	enable_kiss();
}
progdefaults.changed = true;}
            tooltip {Used for BPQ32} xywh {221 112 115 20} type Radio down_box DOWN_BOX
            code0 {if(progStatus.data_io_enabled == KISS_IO) o->value(true);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Box {} {
            label {Enable ARQ for programs that support TCP and FLDIGI ARQ protocol.
Enable KISS for programs that supports TCP/UDP and TNC-2 KISS protocol.
Only one interface (ARQ/KISS) can be active at any given time.
KISS/ARQ/XML Addr/Port changes require program restart.}
            xywh {8 37 582 72}
          }
        }
        Fl_Group {} {
          label KISS open
          xywh {6 138 588 85} box ENGRAVED_FRAME align 21
        } {
          Fl_Button btnDefault_kiss_ip {
            label Default
            callback {set_ip_to_default(KISS_IO);
progdefaults.changed = true;}
            tooltip {Returns IP Address and port
number to the default value.} xywh {505 195 80 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Input txtKiss_ip_address {
            label Addr
            callback {progStatus.kiss_address = o->value();
progdefaults.kiss_address = o->value();
progdefaults.changed = true;}
            tooltip {IP Address for KISS interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {55 195 230 25} align 8 when 1
            code0 {txtKiss_ip_address->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.kiss_address.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Input txtKiss_ip_io_port_no {
            label {I/O}
            callback {progStatus.kiss_io_port = o->value();
progdefaults.kiss_io_port = o->value();
progdefaults.changed = true;}
            tooltip {IP Address Port Number} xywh {330 195 55 25} align 8 when 1
            code0 {txtKiss_ip_io_port_no->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.kiss_io_port.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Input txtKiss_ip_out_port_no {
            label O
            callback {progStatus.kiss_out_port = o->value();
progdefaults.kiss_out_port = o->value();
progdefaults.changed = true;}
            tooltip {Output port number when same IP address used} xywh {425 195 55 25} align 8 when 1
            code0 {txtKiss_ip_out_port_no->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.kiss_out_port.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Check_Button btnEnable_dual_port {
            label DP
            callback {if(o->value()) {
	progStatus.kiss_dual_port_enabled = true;
	progdefaults.kiss_dual_port_enabled = true;
}
else {
	progStatus.kiss_dual_port_enabled = false;
	progdefaults.kiss_dual_port_enabled = false;
}

progdefaults.changed = true;}
            tooltip {Enable when both programs are using the same IP address} xywh {131 142 140 20} down_box DOWN_BOX
            code0 {if(progdefaults.kiss_dual_port_enabled) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Button btn_restart_kiss {
            label Restart
            callback {//restart_kiss_server();}
            xywh {505 193 82 25} hide
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Button btn_connect_kiss_io {
            label Start
            callback {connect_to_kiss_io(true);}
            tooltip {Return KISS TCP IO connection to a Listening state} xywh {504 165 82 25}
            code0 {(progStatus.ip_lock || !progdefaults.kiss_tcp_io) ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnKissTCPIO {
            label {TCP/IP}
            callback {if(o->value()) {
	progStatus.kiss_tcp_io = true;
	progdefaults.kiss_tcp_io = true;
} else {
	progStatus.kiss_tcp_io = false;
	progdefaults.kiss_tcp_io = false;
}
kiss_io_set_button_state(0);
progdefaults.changed = true;}
            tooltip {Check to enable TCP/IP IO Connection} xywh {280 142 70 20} down_box DOWN_BOX
            code0 {if(progdefaults.kiss_tcp_io) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnKissUDPIO {
            label {UDP/IP}
            callback {if(o->value()) {
	progStatus.kiss_tcp_io = false;
	progdefaults.kiss_tcp_io = false;
} else {
	progStatus.kiss_tcp_io = true;
	progdefaults.kiss_tcp_io = true;
}

kiss_io_set_button_state(0);
progdefaults.changed = true;}
            tooltip {Check to enable UDP/IP IO} xywh {55 142 70 20} down_box DOWN_BOX
            code0 {if(progdefaults.kiss_tcp_io) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnKissTCPListen {
            label {Listen / Bind}
            callback {if(o->value()) {
	progStatus.kiss_tcp_listen = true;
	progdefaults.kiss_tcp_listen = true;
} else {
	progStatus.kiss_tcp_listen = false;
	progdefaults.kiss_tcp_listen = false;
}

progdefaults.changed = true;}
            tooltip {Monitor for TCP connection.} xywh {360 142 95 20} down_box DOWN_BOX
            code0 {if(progStatus.kiss_tcp_listen) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnEnable_7bit_modem_inhibit {
            label {Inhibit 7bit Modem}
            callback {if(o->value()) {
	progStatus.kiss_io_modem_change_inhibit = true;
	progdefaults.kiss_io_modem_change_inhibit = true;
}
else {
	progStatus.kiss_io_modem_change_inhibit = false;
	progdefaults.kiss_io_modem_change_inhibit = false;
}

progdefaults.changed = true;}
            tooltip {Inhibit 7 bit modem change notice on user or RSID reception} xywh {55 165 140 20} down_box DOWN_BOX
            code0 {if(progdefaults.kiss_io_modem_change_inhibit) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnEnable_auto_connect {
            label {Auto Connect / Retry}
            callback {if(o->value()) {
	progdefaults.tcp_udp_auto_connect = true;
}
else {
	progdefaults.tcp_udp_auto_connect = false;
}

progdefaults.changed = true;}
            tooltip {Connect to host program on FLDIGI start up} xywh {280 165 155 20} down_box DOWN_BOX
            code0 {if(progdefaults.tcp_udp_auto_connect) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Check_Button btnEnable_ax25_decode {
            label {AX25 Decode}
            callback {if(o->value()) {
	progStatus.ax25_decode_enabled = true;
	progdefaults.ax25_decode_enabled = true;
}
else {
	progStatus.ax25_decode_enabled = false;
	progdefaults.ax25_decode_enabled = false;
}

progdefaults.changed = true;}
            tooltip {Decode AX25 Packets into human readable form} xywh {470 142 115 20} down_box DOWN_BOX
            code0 {if(progdefaults.ax25_decode_enabled) o->value(true); else o->value(false);}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
        }
        Fl_Group {} {
          label ARQ open
          xywh {6 225 588 35} box ENGRAVED_FRAME align 21
        } {
          Fl_Input txtArq_ip_address {
            label Addr
            callback {progdefaults.arq_address = o->value();
progdefaults.changed = true;}
            tooltip {IP Address for ARQ interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {56 229 230 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.arq_address.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Input txtArq_ip_port_no {
            label Port
            callback {progdefaults.arq_port = o->value();
progdefaults.changed = true;}
            tooltip {IP Address Port Number} xywh {330 229 55 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.arq_port.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Button btnDefault_arq_ip {
            label Default
            callback {set_ip_to_default(ARQ_IO);
progdefaults.changed = true;}
            tooltip {Returns IP Address and port
number to the default value.} xywh {425 229 73 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Button btn_restart_arq {
            label Restart
            callback {//arq_restart();}
            xywh {505 229 82 25} hide
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
        }
        Fl_Box {} {
          xywh {6 262 588 1} box BORDER_BOX
        }
        Fl_Group {} {
          label XML open
          xywh {6 266 588 35} box ENGRAVED_FRAME align 21
        } {
          Fl_Button btnDefault_xmlrpc_ip {
            label Default
            callback {set_ip_to_default(XMLRPC_IO);
progdefaults.changed = true;}
            tooltip {Returns IP Address and port
number to the default value.} xywh {425 270 73 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Input txtXmlrpc_ip_address {
            label Addr
            callback {progdefaults.xmlrpc_address = o->value();
progdefaults.changed = true;}
            tooltip {IP Address for XMLRPC interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {56 270 230 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.xmlrpc_address.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Input txtXmlrpc_ip_port_no {
            label Port
            callback {progdefaults.xmlrpc_port = o->value();
progdefaults.changed = true;}
            tooltip {IP Address Port Number} xywh {330 270 55 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.xmlrpc_port.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Button btn_restart_xml {
            label Restart
            callback {//restart_xml_server();}
            xywh {505 270 82 25} hide
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
        }
        Fl_Group {} {
          label flrig open
          xywh {6 304 588 35} box ENGRAVED_FRAME align 21
        } {
          Fl_Button btnDefault_flrig_ip {
            label Default
            callback {set_ip_to_default(FLRIG_IO);
progdefaults.changed = true;}
            tooltip {Returns IP Address and port
number to the default value.} xywh {425 309 73 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Input txt_flrig_ip_address {
            label Addr
            callback {progdefaults.flrig_ip_address = o->value();
progdefaults.changed = true;}
            tooltip {IP Address for flrig interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {56 309 230 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.flrig_ip_address.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Input txt_flrig_ip_port {
            label Port
            callback {progdefaults.flrig_ip_port = o->value();
progdefaults.changed = true;}
            tooltip {IP Address Port Number} xywh {330 309 55 25} align 8 when 1
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.flrig_ip_port.c_str());}
            code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
            class Fl_Input2
          }
          Fl_Button btn_reconnect_flrig_server {
            label Reconnect
            callback {reconnect_to_flrig();}
            xywh {505 309 82 25}
            code0 {\#include "rigsupport.h"}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
        }
        Fl_Group {} {
          label fllog open
          xywh {6 340 588 36} box ENGRAVED_FRAME align 21
        } {
          Fl_Input txt_fllog_ip_address {
            label Addr
            callback {progdefaults.xmllog_address = o->value();}
            tooltip {IP Address for fllog interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {56 345 230 25} align 8
            code0 {o->value(progdefaults.xmllog_address.c_str());}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Input txt_fllog_ip_port {
            label Port
            callback {progdefaults.xmllog_port = o->value();}
            tooltip {IP Address Port Number} xywh {330 345 55 25} align 8
            code0 {o->value(progdefaults.xmllog_port.c_str());}
            code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Button btn_reconnect_log_server {
            label Reconnect
            callback {progdefaults.xml_logbook = true;
progdefaults.changed = true;
connect_to_log_server();}
            xywh {505 345 82 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
          Fl_Button btnDefault_fllog_ip {
            label Default
            callback {set_ip_to_default(FLLOG_IO);
progdefaults.changed = true;}
            tooltip {Returns IP Address and port
number to the default value.} xywh {425 345 73 25}
            code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          }
        }
      }
      Fl_Group tabKPSM {
        label PSM open
        xywh {0 25 600 365} hide
      } {
        Fl_Group {} {open
          xywh {0 33 590 105} box ENGRAVED_BOX align 21
        } {
          Fl_Counter cntBusyChannelSeconds {
            label {Allow TX After Signal Detection (Seconds)}
            callback {progStatus.busyChannelSeconds = (int) o->value();
progdefaults.busyChannelSeconds = (int) o->value();
progdefaults.changed = true;}
            tooltip {Allow transmits after 'N' seconds of a signal detection.} xywh {180 39 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.busyChannelSeconds);}
            code1 {o->step(1,10);}
          }
          Fl_Check_Button btnEnableBusyChannel {
            label {Enable Busy Channel}
            callback {if(o->value()) {
	progStatus.enableBusyChannel = true;
	progdefaults.enableBusyChannel = true;
}
else {
	progStatus.enableBusyChannel = false;
	progdefaults.enableBusyChannel = false;
}
progdefaults.changed = true;}
            tooltip {Enable to inhibit TX on signal Detections} xywh {10 41 115 20} down_box DOWN_BOX
            code0 {if(progdefaults.enableBusyChannel) o->value(true);}
            code1 {else o->value(false);}
          }
          Fl_Counter cntPSMTXBufferFlushTimer {
            label {TX Buffer Flush Timer (Minutes, 0=Disable)}
            callback {progStatus.psm_flush_buffer_timeout = (int) o->value();
progdefaults.psm_flush_buffer_timeout = (int) o->value();
progdefaults.changed = true;}
            tooltip {Flushes the TX buffer after x period when Busy Channel remains on (TX inhibited)} xywh {180 64 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.psm_flush_buffer_timeout);}
            code1 {o->step(1,10); o->minimum(0); o->maximum(999);}
          }
          Fl_Counter cntPSMBandwidthMargins {
            label {Modem Bandwidth Margins }
            callback {progStatus.psm_minimum_bandwidth_margin   = (int) o->value();
progdefaults.psm_minimum_bandwidth_margin = (int) o->value();
progdefaults.changed = true;}
            tooltip {Monitor signals in modem bandwitdh plus margins.} xywh {180 89 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.psm_minimum_bandwidth_margin);}
            code1 {o->step(1,10);}
          }
          Fl_Counter cntPSMValidSamplePeriod {
            label {Valid Signal Sample Period (Milliseconds)}
            callback {progStatus.psm_hit_time_window   = (int) o->value();
progdefaults.psm_hit_time_window = (int) o->value();
progdefaults.changed = true;}
            tooltip {Valid signal sample period in Milliseconds} xywh {180 115 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.psm_hit_time_window);}
            code1 {o->step(1,10);}
          }
        }
        Fl_Group {} {open
          xywh {0 142 593 92} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btnEnable_csma {
            label {Enable CSMA}
            callback {if(o->value()) {
	progStatus.csma_enabled = true;
	progdefaults.csma_enabled = true;
} else {
	progStatus.csma_enabled = false;
	progdefaults.csma_enabled = false;
}
progdefaults.changed = true;}
            tooltip {Carrier Sense Mulitiple Access} xywh {10 156 115 20} down_box DOWN_BOX
            code0 {if(progdefaults.csma_enabled) o->value(true);}
          }
          Fl_Counter cntPersistance {
            label Persistance
            callback {progStatus.csma_persistance = (int) o->value();
progdefaults.csma_persistance = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_PERSISTANCE);}
            tooltip {Used to adjust the aggressiveness of TX} xywh {140 156 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.csma_persistance);}
            code1 {o->step(1,10); o->minimum(0); o->maximum(255);}
          }
          Fl_Counter cntSlotTime {
            label {Slot Time}
            callback {progStatus.csma_slot_time = (int) o->value();
progdefaults.csma_slot_time = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_SLOT_TIME);}
            tooltip {Non transmit window after a transmit period} xywh {140 181 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.csma_slot_time);}
            code1 {o->step(1,10); o->minimum(1); o->maximum(255);}
          }
          Fl_Counter cntTransmitDelay {
            label {Transmit Data Delay}
            callback {progStatus.csma_transmit_delay = (int) o->value();
progdefaults.csma_transmit_delay = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_TX_DELAY);}
            tooltip {Idle transmit before data sent} xywh {140 206 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.csma_transmit_delay);}
            code1 {o->step(1,10); o->minimum(1); o->maximum(255);}
          }
          Fl_Output OutputSlotTimeMS {
            label MilliSeconds
            tooltip {Displays the Slot Time in Milliseconds} xywh {397 181 95 20} align 8
          }
          Fl_Output OutputTransmitDelayMS {
            label MilliSeconds
            tooltip {Displays the Transmit Delay in Milliseconds} xywh {397 206 95 20} align 8
          }
          Fl_Output OutputPersistancePercent {
            label {Percent (%)}
            tooltip {Displays the Slot Time in Milliseconds} xywh {397 155 95 20} align 8
          }
        }
        Fl_Group {} {open
          xywh {0 237 593 30} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btnEnable_histogram {
            label {Enable Histogram}
            callback {if(o->value()) {
	progStatus.psm_use_histogram = true;
	progdefaults.psm_use_histogram = true;
} else {
	progStatus.psm_use_histogram = false;
	progdefaults.psm_use_histogram = false;
}
progdefaults.changed = true;}
            tooltip {Enable Histogram threshold signal monitoring} xywh {10 244 140 20} down_box DOWN_BOX
            code0 {if(progdefaults.psm_use_histogram) o->value(true);}
          }
          Fl_Counter cntPSMThreshold {
            label {PSM Histogram Threshold}
            callback {progStatus.psm_histogram_offset_threshold = (int) o->value();
progdefaults.psm_histogram_offset_threshold = (int) o->value();
progdefaults.changed = true;}
            tooltip {Sets the theshold level to x value above the noise level} xywh {180 244 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.psm_histogram_offset_threshold);}
            code1 {o->step(1,10); o->minimum(1); o->maximum(20);}
          }
        }
        Fl_Group {} {open
          xywh {0 270 593 31} box ENGRAVED_BOX align 21
        } {
          Fl_Counter cntKPSQLAttenuation {
            label {PSM Attenuate}
            callback {progStatus.kpsql_attenuation = (int) o->value();
progdefaults.kpsql_attenuation = (int) o->value();
update_kpsql_fractional_gain(progStatus.kpsql_attenuation);
progdefaults.changed = true;}
            tooltip {Adjust sensitivity by 1/N fractional values.} xywh {180 275 110 20} align 8 minimum 1 maximum 999 step 1 value 1
            code0 {o->value(progdefaults.kpsql_attenuation);}
            code1 {o->step(1,10); o->minimum(1); o->maximum(999);}
            code2 {update_kpsql_fractional_gain(progdefaults.kpsql_attenuation);}
          }
        }
        Fl_Button btnBuyChannelDefaults {
          label {Default Settings}
          callback {psm_set_defaults();}
          xywh {464 345 126 27}
        }
        Fl_Group {} {open
          xywh {0 304 593 31} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btn_show_psm_button {
            label {Show and enable Power Signal Monitor button (PSM)}
            callback {progdefaults.show_psm_btn = o->value();
UI_select();
progdefaults.changed = true;}
            tooltip {display PSM button on main dialog} xywh {10 310 151 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.show_psm_btn);}
          }
        }
      }
    }
    Fl_Button btnSaveConfig {
      label Save
      callback {progdefaults.saveDefaults();}
      xywh {330 394 130 22}
    }
    Fl_Return_Button btnCloseConfig {
      label Close
      callback {closeDialog();
	dl_fldigi::commit();}
      xywh {462 396 130 22}
    }
    Fl_Button btnResetConfig {
      label {Restore defaults}
      callback {if (fl_choice2("This will effect every configuration item!\\nConfirm", "Yes", "No", NULL)) {
	progdefaults.resetDefaults();
	progdefaults.changed = false;
      }}
      tooltip {WARNING - this will over write ALL settings} xywh {10 396 130 22}
    }
    Fl_Button btnApplyConfig {
      label {Apply (dl)}
      callback {dl_fldigi::commit();
btnApplyConfig->deactivate();}
      xywh {160 396 130 22} deactivate
    }
  }
}

Function {openConfig()} {return_type void
} {
  code {if (!dlgConfig) createConfig();
progdefaults.loadDefaults();} {}
}

Function {closeDialog()} {return_type void
} {
  code {if (dlgConfig) dlgConfig->hide();} {}
}

Function {createConfig()} {return_type void
} {
  code {if (!dlgConfig) {
    dlgConfig = ConfigureDialog();
    dlgConfig->xclass(PACKAGE_NAME);
  }} {}
}

decl {class Fl_File_Chooser ;} {public global
}

Function {WefaxDestDirSet(Fl_File_Chooser *w, void *userdata)} {return_type void
} {
  code {/* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
	btnWefaxSaveDir->value( w->value() );
	btnWefaxSaveDir->redraw();
	cb_btnWefaxSaveDir( btnWefaxSaveDir, NULL );
}} {}
}

Function {KmlDestDirSet(Fl_File_Chooser *w, void *userdata)} {open return_type void
} {
  code {/* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
	btnKmlSaveDir->value( w->value() );
	btnKmlSaveDir->redraw();
	cb_btnKmlSaveDir( btnKmlSaveDir, NULL );
}} {}
}

Function {make_window()} {} {}

Function {make_window()} {open
} {}
